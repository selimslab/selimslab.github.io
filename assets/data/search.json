[
  
      {
        "title"    : "Bayes&#39; theorem",
        "url"      : "/bayes/",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\n9\nHow the probability of an event changes with new information? \n\nLet little dashes represent the probabilities of events A and B\n\nA - - -\n\nB     - - - - \n\nOnly 1 dash is intersecting \n\n\nIf you know A happened, then the probability of B given A becomes\n\n1\nP(B|A) = P(A &amp; B) / P(B) = 1/4\n\n\nsimilarly\n\n1\nP(A|B) = P(A &amp; B) / P(A)\n\n\nLeading to Bayes’ theorem\n\n1\nP(A|B) = P(B|A) P(B) / P(A)\n\n\n"
        },
  
      {
        "title"    : "Counter Intuitive Math",
        "url"      : "/counter-intuitive-math/",
        "content"  : "A one-in-billion event will happen 8 times a month: https://gwern.net/Littlewood\n\nIf customers take on average 10 minutes to serve and they arrive randomly at a rate of 5.8 per hour then the waiting time for one teller is five hours while the waiting time for two tellers is 3 minutes: https://www.johndcook.com/blog/2008/10/21/what-happens-when-you-add-a-new-teller/\n\nIf you let a 100g strawberry that is 99% water by mass dehydrate such that the water now accounts for 98% of the total mass then its new mass is 50g: https://en.wikipedia.org/wiki/Potato_paradox\n\nhttps://en.wikipedia.org/wiki/The_Market_for_Lemons\n\nhttp://en.wikipedia.org/wiki/Winner%27s_curse\n\nMonty Hall problem https://en.wikipedia.org/wiki/Monty_Hall_problem\n"
        },
  
      {
        "title"    : "Digital vs Analog",
        "url"      : "/discrete-vs-continuous/",
        "content"  : "Nature doesn’t draw straight lines, it is continuous\n\nyet working with limited things is easier for our limited human minds and our computers\n\nSo we sample analog data like sight and sound, and represent it with discrete numbers\n\n"
        },
  
      {
        "title"    : "Equations That Changed The World",
        "url"      : "/equations-that-changed-the-world/",
        "content"  : "\n\nSee Classical Physics\n"
        },
  
      {
        "title"    : "Fourier Transform",
        "url"      : "/fourier-transform/",
        "content"  : "https://betterexplained.com/topics/fourier-transform/\n\nWhat does the Fourier Transform do? Given a smoothie, it finds the recipe.\n\nHow? Run the smoothie through filters to extract each ingredient.\n\nWhy? Recipes are easier to analyze, compare, and modify than the smoothie itself.\n\nor\n\nFT is a mathematical transform that decomposes functions depending on space or time into functions depending on spatial frequency or temporal frequency. That process is also called analysis.\n\nAn example application would be decomposing the waveform of a musical chord into terms of the intensity of its constituent pitches.\n\nThe term Fourier transform refers to both the frequency domain representation and the mathematical operation that associates the frequency domain representation to a function of space or time.\n"
        },
  
      {
        "title"    : "Laplace Transform",
        "url"      : "/laplace-transform/",
        "content"  : "an integral transform that converts a function of a real variable to a function of a complex variable\n\nThe transform has many applications in science and engineering because it is a tool for solving differential equations.\n\nIn particular, it transforms ordinary differential equations into algebraic equations and convolution into multiplication\n"
        },
  
      {
        "title"    : "Five ways to prove P=&gt;Q",
        "url"      : "/logic-proofs/",
        "content"  : "\n  P =&gt; Q (direct proof)\n  -Q =&gt;-P (proof by contrapositive)\n  (P ^ -Q) =&gt; Q (proof by contradicting the conclusion)\n  (P ^ -Q) =&gt; -P (proof by contradicting the hypothesis)\n  (P ^ -Q) =&gt; (R ^ -R) (proof by reductio ad absurdum)\n\n"
        },
  
      {
        "title"    : "Math",
        "url"      : "/math/",
        "content"  : "BetterExplained – Math lessons that click\n\nhttps://www.youtube.com/@3blue1brown\n\nOn Relative Growings - Calculus Made Easy\n\nTag: math - Sketchplanations\n\nTag: data - Sketchplanations\n\nTag: analytics - Sketchplanations\n"
        },
  
      {
        "title"    : "Normal Distribution",
        "url"      : "/normal-distribution/",
        "content"  : "\n\nNearly all values are within three standard deviations of the mean\n\nFor example, IQ distribution has a median 100, and standard deviation of 15 points,\n\na person with one std away from the mean has higher IQ than 84% of the population\n\n\n"
        },
  
      {
        "title"    : "Probability And Statistics",
        "url"      : "/probability-and-statistics/",
        "content"  : "Tag: statistics - Sketchplanations\n\nBayes’ theorem\n\nHypothesis testing\n\nPopulation sampling\n\nVariables, dependent, independent, control\n\nquantitative, discrete, continuous\n\ncategorical, binary, ordinal, nominal\n\nconfounding, latent, composite\n\nDescriptive statistics, distribution, central tendency, variability\n\nConfidence interval\n\nStatistical significance, p-value\n\nInferential statistics\n\nCentral Limit Theorem\n\nFrequentist vs Bayesian statistics\n\n\n\nSimpson’s Paradox: Trends which appear in groups of data may disappear or reverse when the groups are combined.\n\nDatasets\n\nMonty Hall problem - Wikipedia\n\n"
        },
  
      {
        "title"    : "Akins Laws Of Spacecraft",
        "url"      : "/akins-laws-of-spacecraft/",
        "content"  : "\n  \n    Engineering is done with numbers. Analysis without numbers is only an opinion.\n  \n  \n    To design a spacecraft right takes an infinite amount of effort. This is why it’s a good idea to design them to operate when some things are wrong .\n  \n  \n    Design is an iterative process. The necessary number of iterations is one more than the number you have currently done. This is true at any point in time.\n  \n  \n    Your best design efforts will inevitably wind up being useless in the final design. Learn to live with the disappointment.\n  \n  \n    (Miller’s Law) Three points determine a curve.\n  \n  \n    (Mar’s Law) Everything is linear if plotted log-log with a fat magic marker.\n  \n  \n    At the start of any design effort, the person who most wants to be team leader is least likely to be capable of it.\n  \n  \n    In nature, the optimum is almost always in the middle somewhere. Distrust assertions that the optimum is at an extreme point.\n  \n  \n    Not having all the information you need is never a satisfactory excuse for not starting the analysis.\n  \n  \n    When in doubt, estimate. In an emergency, guess. But be sure to go back and clean up the mess when the real numbers come along.\n  \n  \n    Sometimes, the fastest way to get to the end is to throw everything out and start over.\n  \n  \n    There is never a single right solution. There are always multiple wrong ones, though.\n  \n  \n    Design is based on requirements. There’s no justification for designing something one bit “better” than the requirements dictate.\n  \n  \n    (Edison’s Law) “Better” is the enemy of “good”.\n  \n  \n    (Shea’s Law) The ability to improve a design occurs primarily at the interfaces. This is also the prime location for screwing it up.\n  \n  \n    The previous people who did a similar analysis did not have a direct pipeline to the wisdom of the ages. There is therefore no reason to believe their analysis over yours. There is especially no reason to present their analysis as yours.\n  \n  \n    The fact that an analysis appears in print has no relationship to the likelihood of its being correct.\n  \n  \n    Past experience is excellent for providing a reality check. Too much reality can doom an otherwise worthwhile design, though.\n  \n  \n    The odds are greatly against you being immensely smarter than everyone else in the field. If your analysis says your terminal velocity is twice the speed of light, you may have invented warp drive, but the chances are a lot better that you’ve screwed up.\n  \n  \n    A bad design with a good presentation is doomed eventually. A good design with a bad presentation is doomed immediately.\n  \n  \n    (Larrabee’s Law) Half of everything you hear in a classroom is crap. Education is figuring out which half is which.\n  \n  \n    When in doubt, document. (Documentation requirements will reach a maximum shortly after the termination of a program.)\n  \n  \n    The schedule you develop will seem like a complete work of fiction up until the time your customer fires you for not meeting it.\n  \n  \n    It’s called a “Work Breakdown Structure” because the Work remaining will grow until you have a Breakdown, unless you enforce some Structure on it.\n  \n  \n    (Bowden’s Law) Following a testing failure, it’s always possible to refine the analysis to show that you really had negative margins all along.\n  \n  \n    (Montemerlo’s Law) Don’t do nuthin’ dumb.\n  \n  \n    (Varsi’s Law) Schedules only move in one direction.\n  \n  \n    (Ranger’s Law) There ain’t no such thing as a free launch.\n  \n  \n    (von Tiesenhausen’s Law of Program Management) To get an accurate estimate of final program requirements, multiply the initial time estimates by pi, and slide the decimal point on the cost estimates one place to the right.\n  \n  \n    (von Tiesenhausen’s Law of Engineering Design) If you want to have a maximum effect on the design of a new engineering system, learn to draw. Engineers always wind up designing the vehicle to look like the initial artist’s concept.\n  \n  \n    (Mo’s Law of Evolutionary Development) You can’t get to the moon by climbing successively taller trees.\n  \n  \n    (Atkin’s Law of Demonstrations) When the hardware is working perfectly, the really important visitors don’t show up.\n  \n  \n    (Patton’s Law of Program Planning) A good plan violently executed now is better than a perfect plan next week.\n  \n  \n    (Roosevelt’s Law of Task Planning) Do what you can, where you are, with what you have.\n  \n  \n    (de Saint-Exupery’s Law of Design) A designer knows that they have achieved perfection not when there is nothing left to add, but when there is nothing left to take away.\n  \n  \n    Any run-of-the-mill engineer can design something which is elegant. A good engineer designs systems to be efficient. A great engineer designs them to be effective.\n  \n  \n    (Henshaw’s Law) One key to success in a mission is establishing clear lines of blame.\n  \n  \n    Capabilities drive requirements, regardless of what the systems engineering textbooks say.\n  \n  \n    Any exploration program which “just happens” to include a new launch vehicle is, de facto, a launch vehicle program.\n  \n  \n    (alternate formulation) The three keys to keeping a new human space program affordable and on schedule:\n   1)  No new launch vehicles.\n   2)  No new launch vehicles.\n   3)  Whatever you do, don’t develop any new launch vehicles.\n  \n  \n    (McBryan’s Law) You can’t make it better until you make it work.\n  \n  \n    There’s never enough time to do it right, but somehow, there’s always enough time to do it over.\n  \n  \n    If there’s not a flight program, there’s no money.\n  If there is a flight program, there’s no time.\n  \n  \n    You really understand something the third time you see it (or the first time you teach it.)\n  \n  \n    (Lachance’s Law) “Plenty of time” becomes “not enough time” in a very short time.\n  \n  \n    Space is a completely unforgiving environment. If you screw up the engineering, somebody dies (and there’s no partial credit because most of the analysis was right…)\n  \n\n"
        },
  
      {
        "title"    : "Astronomy",
        "url"      : "/astronomy/",
        "content"  : "100,000 Stars (chromeexperiments.com)\n\nSolar System\n"
        },
  
      {
        "title"    : "Earth",
        "url"      : "/earth/",
        "content"  : "\n\n\n\n    \n    \n    \n    \n\n"
        },
  
      {
        "title"    : "Size Of The Universe",
        "url"      : "/size-of-the-universe/",
        "content"  : "94b light years\n\nsize of milkway, 100k light years\n\nthe milkway/universe\n\n1\n2\n3\n1e5 / 1e11 ~ 1e-6 in dia \n\n~ 1e-18 in vol\n\n\n8.317 light-minutes, distance between Earth and the Sun\n\n1 year 8766 hours, 31.5m secs, 500k minutes\n\nsun-earth distance/galaxy\n\n1\n2\n3\n4\n5\n8 minutes / 100k years  ~ 8 / 1e5 0.5 e5 ~ 16/e10 ~ 1e-9 \n\n~ 1e-9 in dia \n\n~ 1e-27 in vol \n\n\nso the sun-earth distance is like a nanometre for the galaxy\n\ndiameter of earth = 0.0425501031 light seconds\n\n100k ly ~ 3e12 light seconds\n\nearth/the galaxy\n\n1\n2\n3\n4e-2 / 3e12 ~ 1e-14 in dia\n\n1e-42 in volume \n\n\nvolume of earth/the observable universe\n    1e-20 in dia \n    1e-60 in vol\n\ndia of earth = 12 756 km  ~ 1e8 m\n\nif the universe diameter was the size of the earth,\n\nthe earths dia would be\n\n1\n1e8 m * 1e-20 = 1e-12 m \n\n\na hydrogen atom’s dia is ~ 1e-10 and its nucleus ~ 1e-15, on the order of a fermi\n\nso if universe was earth-sized, earth would be 1% of an hydrogen atom\n\nthen if universe was sun-sized, earth would be the size of an hydrogen atom\n\n1.28 Light Seconds for Earth to Moon\n\n28 000 light-years, sun to the center of milkway\n\n200b galaxies at least\n\n\n\nuniverse 1\n\n100b stars in milkway\n\n100b galaxies in the universe\n\n~ 1e22 stars\n\ndia\n\nuni/milky 1e6\n\nmilky/sun 1e12\n\nsun/earth 100\n\nuni/earth 1e20\n"
        },
  
      {
        "title"    : "Solar System",
        "url"      : "/solar-system/",
        "content"  : "\n"
        },
  
      {
        "title"    : "The Overview Effect",
        "url"      : "/the-overview-effect/",
        "content"  : "From https://variety.com/2022/tv/news/william-shatner-space-boldly-go-excerpt-1235395113/\n\nSo, I went to space.\n\nThe countdown began. With all the attending noise, fire, and fury, we lifted off. I could see Earth disappearing. As we ascended, I was at once aware of pressure. Gravitational forces pulling at me. The g’s. There was an instrument that told us how many g’s we were experiencing. At two g’s, I tried to raise my arm, and could barely do so. At three g’s, I felt my face being pushed down into my seat. I don’t know how much more of this I can take, I thought. Will I pass out? Will my face melt into a pile of mush? How many g’s can my ninety-year-old body handle?\n\nAnd then, suddenly, relief. No g’s. Zero. Weightlessness. We were floating.\n\nWe got out of our harnesses and began to float around. The other folks went straight into somersaults and enjoying all the effects of weightlessness. I wanted no part in that. I wanted, needed to get to the window as quickly as possible to see what was out there.\n\nI looked down and I could see the hole that our spaceship had punched in the thin, blue-tinged layer of oxygen around Earth. It was as if there was a wake trailing behind where we had just been, and just as soon as I’d noticed it, it disappeared.\n\nI continued my self-guided tour and turned my head to face the other direction, to stare into space. I love the mystery of the universe. I love all the questions that have come to us over thousands of years of exploration and hypotheses. Stars exploding years ago, their light traveling to us years later; black holes absorbing energy; satellites showing us entire galaxies in areas thought to be devoid of matter entirely… all of that has thrilled me for years… but when I looked in the opposite direction, into space, there was no mystery, no majestic awe to behold . . . all I saw was death.\n\nI saw a cold, dark, black emptiness. It was unlike any blackness you can see or feel on Earth. It was deep, enveloping, all-encompassing. I turned back toward the light of home. I could see the curvature of Earth, the beige of the desert, the white of the clouds and the blue of the sky. It was life. Nurturing, sustaining, life. Mother Earth. Gaia. And I was leaving her.\n\nEverything I had thought was wrong. Everything I had expected to see was wrong.\n\nI had thought that going into space would be the ultimate catharsis of that connection I had been looking for between all living things—that being up there would be the next beautiful step to understanding the harmony of the universe. In the film “Contact,” when Jodie Foster’s character goes to space and looks out into the heavens, she lets out an astonished whisper, “They should’ve sent a poet.” I had a different experience, because I discovered that the beauty isn’t out there, it’s down here, with all of us. Leaving that behind made my connection to our tiny planet even more profound.\n\nIt was among the strongest feelings of grief I have ever encountered. The contrast between the vicious coldness of space and the warm nurturing of Earth below filled me with overwhelming sadness. Every day, we are confronted with the knowledge of further destruction of Earth at our hands: the extinction of animal species, of flora and fauna . . . things that took five billion years to evolve, and suddenly we will never see them again because of the interference of mankind. It filled me with dread. My trip to space was supposed to be a celebration; instead, it felt like a funeral.\n\nI learned later that I was not alone in this feeling. It is called the “Overview Effect” and is not uncommon among astronauts, including Yuri Gagarin, Michael Collins, Sally Ride, and many others. Essentially, when someone travels to space and views Earth from orbit, a sense of the planet’s fragility takes hold in an ineffable, instinctive manner. Author Frank White first coined the term in 1987: “There are no borders or boundaries on our planet except those that we create in our minds or through human behaviors. All the ideas and concepts that divide us when we are on the surface begin to fade from orbit and the moon. The result is a shift in worldview, and in identity.”\n\nIt can change the way we look at the planet but also other things like countries, ethnicities, religions; it can prompt an instant reevaluation of our shared harmony and a shift in focus to all the wonderful things we have in common instead of what makes us different. It reinforced tenfold my own view on the power of our beautiful, mysterious collective human entanglement, and eventually, it returned a feeling of hope to my heart. In this insignificance we share, we have one gift that other species perhaps do not: we are aware—not only of our insignificance, but the grandeur around us that makes us insignificant. That allows us perhaps a chance to rededicate ourselves to our planet, to each other, to life and love all around us. If we seize that chance.\n\n"
        },
  
      {
        "title"    : "Books",
        "url"      : "/books-natural/",
        "content"  : "A Brief History of Time\n\nStructures: Or Why Things Don’t Fall Down\n\nCosmos, Carl Sagan\n\nBehave: The Biology of Humans at Our Best and Worst\n\nThe Emperor of All Maladies: A Biography of Cancer\n\nWhy We Sleep: Unlocking the Power of Sleep and Dreams\n\nThe Boy Who Was Raised as a Dog: And Other Stories from a Child Psychiatrist’s Notebook\n\nThe Man Who Mistook His Wife for a Hat and Other Clinical Tales\n"
        },
  
      {
        "title"    : "Climate Change",
        "url"      : "/climate-change/",
        "content"  : "The planet was here long before us, it’ll be here long after us. Human actions are trivial for the planet (see If the Earth is 45 years old), yet we are still able to make the place a hell for our children.\n\nIt’s possible to protect oceans, forests, mountains, and the life on earth. Nature will heal itself when we stop our abuse.\n\nWe must pressure politicians and corporations. No effort is too small, every little action will inspire more people\n\nWhat can a technologist do?\n"
        },
  
      {
        "title"    : "Feynman Lectures",
        "url"      : "/feynman-lectures/",
        "content"  : "https://www.feynmanlectures.caltech.edu\n\nClassical Physics\n\nMaxwell Equations\n\nPhilosophical Implications Of Quantum Mechanics\n\nFeynmans Epilogue\n"
        },
  
      {
        "title"    : "Feynmans Epilogue",
        "url"      : "/feynmans-epilogue/",
        "content"  : "https://www.feynmanlectures.caltech.edu/III_22.html\n\nFinally, may I add that the main purpose of my teaching has not been to prepare you for some examination—it was not even to prepare you to serve industry or the military. I wanted most to give you some appreciation of the wonderful world and the physicist’s way of looking at it, which, I believe, is a major part of the true culture of modern times. (There are probably professors of other subjects who would object, but I believe that they are completely wrong.)\n\nPerhaps you will not only have some appreciation of this culture; it is even possible that you may want to join in the greatest adventure that the human mind has ever begun.\n"
        },
  
      {
        "title"    : "Fluid Field Boundaries",
        "url"      : "/fluid-field-boundaries/",
        "content"  : "Back-propagation arose from control theory and used to optimize the thrusts of the Apollo spaceships\n\nNow its an important concept in machine learning and deep learning\n\nAnd current AI research is built upon concepts from statistics, pattern recognition, information theory, control theory, operations research, ..\n"
        },
  
      {
        "title"    : "Going Blind",
        "url"      : "/going-blind/",
        "content"  : "Ask HN: I’m a software engineer going blind, how should I prepare? - Hacker News (ycombinator.com)\n\nHard Times\n"
        },
  
      {
        "title"    : "Health",
        "url"      : "/health/",
        "content"  : "See also\n\nThe Checklist\n"
        },
  
      {
        "title"    : "How to deal with Extreme Physical Pain",
        "url"      : "/how-to-deal-with-pain/",
        "content"  : "from https://www.hanselman.com/blog/how-to-deal-with-extreme-physical-pain\n\nI’m in a LOT of pain right now. It’s hard to say that, especially considering that everyone experiences pain be it emotional or physical. I don’t want to make unneeded comparisons or consider my pain as being more important than anyone else’s. I’m not burned. I’m not dying of cancer. I am blessed.\n\nBut I’m hurting. A lot. It’s mine and it’s now and it’s not clear when it will stop.\n\nIt’s hard to think. It’s hard to move. I can’t sleep. Oxycodone makes me feel sick. Advil does nothing.\n\nI’ve just had my second frozen shoulder surgery (adhesive capsular release) in 4 years. Frozen shoulder is idiopathic (who knows why it happen) and it’s known to be quite painful. I can attest that it is. I’ve been unable to move my right arm for nearly a year. Not just that I couldn’t move it, I mean it couldn’t be moved by anyone. I couldn’t fit the deodorant in to my armpit because the whole joint was hardened.\n\nI had cortisone shots. No result. I finally had formal capsular release surgery where the surgeon goes in there and tidies up, removes scar tissue.\n\nThen the months of physical therapy and forced stretching starts.\n\nI’m going to physical therapy five days a week for an hour a day, and working at home stretching myself for an other 1-2 hours. It’s overwhelming and consuming. I just want to be able to pick up a cup from a high shelf. I have basic arm-usage requirements. This is going to be a marathon, and this is the second time this has happened.\n\nWHY AM I TELLING YOU THIS?\n\nA few reasons. I need the outlet. It’s my blog. Because I appreciate you all and you’ve been here, some of you, for nearly 20 years. Not everything is code.\n\nI had a nerve block in my neck that turned off my right side for a week. That was an extraordinary experience as it was an opportunity to experience a significant, albeit temporary, physical disability. Before I had no ability to move my arm but I had feeling. Now I had zero use of my right arm. It was a numb cadaver arm - dangerously dead weight. I used the time to play Xbox with my feet using the Xbox Adaptive Controller.\n\nThis nerve block is wearing off and it’s gone from itching, to tingling, to the feeling of an ice pick shoved into my deltoid and armpit every few minutes.\n\nI burst into tears at physical therapy today. The year just hit me all at once. It hurts. Between diabetes and this temporary paralysis, it’s been a week. 2020 is ass. It’s OK. Happens a few times a decade. Maybe it happens to you twice a week. Let it out, listen to your body.\n\nWHY AM I TELLING YOU THIS?\n\nIt’s OK to tell people you hurt. You’re human. Talk about your pain. Cry. Yell. Sob. Talk some more.\n\nWhen I’m done yelling, I’m trying to sit quietly and meditate about this pain. What is it trying to tell me? Can I mentally follow the nerve from the location (referred pain or otherwise) to my brain and determine what the body wants me to know? Am I being told there’s danger?\n\nI’m finding that there is soft tissue tolerance - what I can handle - and that doesn’t always line up with what I’m feeling. I’m feeling near intolerable pain in PT (physical therapy). Like torture with an unknown end date, it’s taken me to the level of pain where vomiting is the only escape and then it starts again. However, I persist. I breathe. I try to listen and trust the process and know that if I want to regain the full use of my arms, this is a medically known and studied process. Physical therapy works if you do it.\n\nThe cognitive dissonance is overwhelming. Your body says you’re actively dying but your conscious brain can - must - override it and let the pain flow freely. You observe it, rather than obstruct it.\n\nI hate this process but I’m going to learn from it. I’m learning and listening to my body and how I react to something so extreme.\n\nThe pain is important to acknowledge because this pain is gonna make me better and stronger. But it still hurts. Here we go.\n\nI hope that you, Dear Reader, are not in pain. But if you are, I hope it passes and that you come out better on the other side. I’m going to use this Bad Input for Good.\n\nHard Times\n"
        },
  
      {
        "title"    : "How to sleep better?",
        "url"      : "/sleep/",
        "content"  : "\n  Wake up early\n  Set a rhythm and order to your day\n  Drink enough water\n  No caffeine or alcohol after sunset, alcohol kills REM sleep\n  A dark, silent room, 19-20 Celcius\n\n"
        },
  
      {
        "title"    : "Natural Sciences",
        "url"      : "/natural-sciences/",
        "content"  : "See also\n\nTag: science - Sketchplanations\n\n"
        },
  
      {
        "title"    : "Pale Blue Dot",
        "url"      : "/pale-blue-dot/",
        "content"  : "Look again at that dot. That’s here. That’s home. That’s us. On it everyone you love, everyone you know, everyone you ever heard of, every human being who ever was, lived out their lives. The aggregate of our joy and suffering, thousands of confident religions, ideologies, and economic doctrines, every hunter and forager, every hero and coward, every creator and destroyer of civilization, every king and peasant, every young couple in love, every mother and father, hopeful child, inventor and explorer, every teacher of morals, every corrupt politician, every “superstar,” every “supreme leader,” every saint and sinner in the history of our species lived there-on a mote of dust suspended in a sunbeam.\n\n― Carl Sagan, Pale Blue Dot\n\nSagan\n"
        },
  
      {
        "title"    : "Classical Physics",
        "url"      : "/classical-physics/",
        "content"  : "From https://www.feynmanlectures.caltech.edu/II_18.html\n\nThe physics known by 1905 is the foundation of modern technology\n\nHere all in one table.\n\n\n\nThis is enough theory to explain electricity, magnetism, light, and motions of all bodies from galaxies to atoms\n\nTag: physics - Sketchplanations\n"
        },
  
      {
        "title"    : "Inertia",
        "url"      : "/inertia/",
        "content"  : "Objects and people display the same effect.\n\nThe first move is harder\n\nFrom Earth to Mars, just getting to the orbit takes half of the total energy\n\n"
        },
  
      {
        "title"    : "Maxwell Equations",
        "url"      : "/maxwell-equations/",
        "content"  : "Maxwell had made one of the great unifications of physics. Before his time, there was light, and there was electricity and magnetism. The latter two had been unified by the experimental work of Faraday, Oersted, and Ampère.\n\nThen, all of a sudden, light was no longer “something else,” but was only electricity and magnetism in this new form, little pieces of electric and magnetic fields which propagate through space on their own.\n\nHow can this bundle of electric and magnetic fields maintain itself? They cannot help maintaining themselves. Suppose the magnetic field were to disappear. There would be a changing magnetic field which would produce an electric field. If this electric field tries to go away, the changing electric field would create a magnetic field back again.\n\nSo by a perpetual interplay—by the swishing back and forth from one field to the other—they must go on forever. It is impossible for them to disappear.1 They maintain themselves in a kind of a dance—one making the other, the second making the first—propagating onward through space.\n\nhttps://www.feynmanlectures.caltech.edu/II_18.html\n\nhttps://en.wikipedia.org/wiki/Maxwell%27s_equations\n\nClassical Physics\n"
        },
  
      {
        "title"    : "Philosophical Implications Of Quantum Mechanics",
        "url"      : "/philosophical-implications-of-quantum-mechanics/",
        "content"  : "Quantum mechanics challenges classical physics by emphasizing the observer’s effect on phenomena and the limits of measurable concepts. The uncertainty principle highlights that observation alters the observed, making precise measurements of certain properties impossible. This shift deems some classical ideas unnecessary, not wrong. The theory’s predictive power relies on extrapolating beyond measured data. Classical physics also exhibited practical indeterminacy due to the amplification of small errors. Quantum mechanics’ indeterminacy thus doesn’t uniquely explain free will, as classical unpredictability also exists.\n\n\n\nFrom https://www.feynmanlectures.caltech.edu/III_02.html\n\nLet us consider briefly some philosophical implications of quantum mechanics. As always, there are two aspects of the problem: one is the philosophical implication for physics, and the other is the extrapolation of philosophical matters to other fields. When philosophical ideas associated with science are dragged into another field, they are usually completely distorted. Therefore we shall confine our remarks as much as possible to physics itself.\n\nFirst of all, the most interesting aspect is the idea of the uncertainty principle; making an observation affects the phenomenon. It has always been known that making observations affects a phenomenon, but the point is that the effect cannot be disregarded or minimized or decreased arbitrarily by rearranging the apparatus. When we look for a certain phenomenon we cannot help but disturb it in a certain minimum way, and the disturbance is necessary for the consistency of the viewpoint. The observer was sometimes important in prequantum physics, but only in a trivial sense. The problem has been raised: if a tree falls in a forest and there is nobody there to hear it, does it make a noise? A real tree falling in a real forest makes a sound, of course, even if nobody is there. Even if no one is present to hear it, there are other traces left. The sound will shake some leaves, and if we were careful enough we might find somewhere that some thorn had rubbed against a leaf and made a tiny scratch that could not be explained unless we assumed the leaf were vibrating. So in a certain sense we would have to admit that there is a sound made. We might ask: was there a sensation of sound? No, sensations have to do, presumably, with consciousness. And whether ants are conscious and whether there were ants in the forest, or whether the tree was conscious, we do not know. Let us leave the problem in that form.\n\nAnother thing that people have emphasized since quantum mechanics was developed is the idea that we should not speak about those things which we cannot measure. (Actually relativity theory also said this.) Unless a thing can be defined by measurement, it has no place in a theory. And since an accurate value of the momentum of a localized particle cannot be defined by measurement it therefore has no place in the theory. The idea that this is what was the matter with classical theory is a false position. It is a careless analysis of the situation. Just because we cannot measure position and momentum precisely does not a priori mean that we cannot talk about them. It only means that we need not talk about them. The situation in the sciences is this: A concept or an idea which cannot be measured or cannot be referred directly to experiment may or may not be useful. It need not exist in a theory. In other words, suppose we compare the classical theory of the world with the quantum theory of the world, and suppose that it is true experimentally that we can measure position and momentum only imprecisely. The question is whether the ideas of the exact position of a particle and the exact momentum of a particle are valid or not. The classical theory admits the ideas; the quantum theory does not. This does not in itself mean that classical physics is wrong. When the new quantum mechanics was discovered, the classical people—which included everybody except Heisenberg, Schrödinger, and Born—said: “Look, your theory is not any good because you cannot answer certain questions like: what is the exact position of a particle?, which hole does it go through?, and some others.” Heisenberg’s answer was: “I do not need to answer such questions because you cannot ask such a question experimentally.” It is that we do not have to. Consider two theories (a) and (b); (a) contains an idea that cannot be checked directly but which is used in the analysis, and the other, (b), does not contain the idea. If they disagree in their predictions, one could not claim that (b) is false because it cannot explain this idea that is in (a), because that idea is one of the things that cannot be checked directly. It is always good to know which ideas cannot be checked directly, but it is not necessary to remove them all. It is not true that we can pursue science completely by using only those concepts which are directly subject to experiment.\n\nIn quantum mechanics itself there is a probability amplitude, there is a potential, and there are many constructs that we cannot measure directly. The basis of a science is its ability to predict. To predict means to tell what will happen in an experiment that has never been done. How can we do that? By assuming that we know what is there, independent of the experiment. We must extrapolate the experiments to a region where they have not been done. We must take our concepts and extend them to places where they have not yet been checked. If we do not do that, we have no prediction. So it was perfectly sensible for the classical physicists to go happily along and suppose that the position—which obviously means something for a baseball—meant something also for an electron. It was not stupidity. It was a sensible procedure. Today we say that the law of relativity is supposed to be true at all energies, but someday somebody may come along and say how stupid we were. We do not know where we are “stupid” until we “stick our neck out,” and so the whole idea is to put our neck out. And the only way to find out that we are wrong is to find out what our predictions are. It is absolutely necessary to make constructs.\n\nWe have already made a few remarks about the indeterminacy of quantum mechanics. That is, that we are unable now to predict what will happen in physics in a given physical circumstance which is arranged as carefully as possible. If we have an atom that is in an excited state and so is going to emit a photon, we cannot say when it will emit the photon. It has a certain amplitude to emit the photon at any time, and we can predict only a probability for emission; we cannot predict the future exactly. This has given rise to all kinds of nonsense and questions on the meaning of freedom of will, and of the idea that the world is uncertain.\n\nOf course we must emphasize that classical physics is also indeterminate, in a sense. It is usually thought that this indeterminacy, that we cannot predict the future, is an important quantum-mechanical thing, and this is said to explain the behavior of the mind, feelings of free will, etc. But if the world were classical—if the laws of mechanics were classical—it is not quite obvious that the mind would not feel more or less the same. It is true classically that if we knew the position and the velocity of every particle in the world, or in a box of gas, we could predict exactly what would happen. And therefore the classical world is deterministic. Suppose, however, that we have a finite accuracy and do not know exactly where just one atom is, say to one part in a billion. Then as it goes along it hits another atom, and because we did not know the position better than to one part in a billion, we find an even larger error in the position after the collision. And that is amplified, of course, in the next collision, so that if we start with only a tiny error it rapidly magnifies to a very great uncertainty. To give an example: if water falls over a dam, it splashes. If we stand nearby, every now and then a drop will land on our nose. This appears to be completely random, yet such a behavior would be predicted by purely classical laws. The exact position of all the drops depends upon the precise wigglings of the water before it goes over the dam. How? The tiniest irregularities are magnified in falling, so that we get complete randomness. Obviously, we cannot really predict the position of the drops unless we know the motion of the water absolutely exactly.\n\nSpeaking more precisely, given an arbitrary accuracy, no matter how precise, one can find a time long enough that we cannot make predictions valid for that long a time. Now the point is that this length of time is not very large. It is not that the time is millions of years if the accuracy is one part in a billion. The time goes, in fact, only logarithmically with the error, and it turns out that in only a very, very tiny time we lose all our information. If the accuracy is taken to be one part in billions and billions and billions—no matter how many billions we wish, provided we do stop somewhere—then we can find a time less than the time it took to state the accuracy—after which we can no longer predict what is going to happen! It is therefore not fair to say that from the apparent freedom and indeterminacy of the human mind, we should have realized that classical “deterministic” physics could not ever hope to understand it, and to welcome quantum mechanics as a release from a “completely mechanistic” universe. For already in classical mechanics there was indeterminability from a practical point of view.\n"
        },
  
      {
        "title"    : "Physics",
        "url"      : "/physics/",
        "content"  : "\n"
        },
  
      {
        "title"    : "Sagan",
        "url"      : "/sagan/",
        "content"  : "“The nitrogen in our DNA, the calcium in our teeth, the iron in our blood, the carbon in our apple pies were made in the interiors of collapsing stars. We are made of starstuff.”\n― Carl Sagan, Cosmos\n"
        },
  
      {
        "title"    : "Sapolsky",
        "url"      : "/sapolsky/",
        "content"  : "“The brain is heavily influenced by genes. But from birth through young adulthood, the part of the human brain that most defines us (frontal cortex) is less a product of the genes with which you started life than of what life has thrown at you. Because it is the last to mature, by definition the frontal cortex is the brain region least constrained by genes and most sculpted by experience. This must be so, to be the supremely complex social species that we are. Ironically, it seems that the genetic program of human brain development has evolved to, as much as possible, free the frontal cortex from genes.”\n\n“On an incredibly simplistic level, you can think of depression as occurring when your cortex thinks an abstract thought and manages to convince the rest of the brain that this is as real as a physical stressor.”\n\n“Genes are rarely about inevitability, especially when it comes to humans, the brain, or behavior. They’re about vulnerability, propensities, tendencies.”\n\n“Most people who do a lot of exercise, particularly in the form of competitive athletics, have unneurotic, extraverted, optimistic personalities to begin with. (Marathon runners are exceptions to this.)”\n\n“We live well enough to have the luxury to get ourselves sick with purely social, psychological stress.”\n\n“Why should people in one part of the globe have developed collectivist cultures, while others went individualist? The United States is the individualism poster child for at least two reasons. First there’s immigration. Currently, 12 percent of Americans are immigrants, another 12 percent are children of immigrants, and everyone else except for the 0.9 percent pure Native Americans descend from people who emigrated within the last five hundred years. And who were the immigrants? Those in the settled world who were cranks, malcontents, restless, heretical, black sheep, hyperactive, hypomanic, misanthropic, itchy, unconventional, yearning to be rich, yearning to be out of their damn boring repressive little hamlet, yearning. Couple that with the second reason - for the majority of its colonial and independent history, America has had a moving frontier luring those whose extreme prickly optimism made merely booking passage to the New World insufficiently novel - and you’ve got America the individualistic.\nWhy has East Asia provided textbook examples of collectivism? The key is how culture is shaped by the way people traditionally made a living, which in turn is shaped by ecology. And in East Asia it’s all about rice. Rice, which was domesticated there roughly ten thousand years ago, requires massive amounts of communal work. Not just backbreaking planting and harvesting, which are done in rotation because the entire village is needed to harvest each family’s rice. The United States was not without labor-intensive agriculture historically. But rather than solving that with collectivism, it solved it withe slavery.”\n\n“In other words, the default state is to trust, and what the amygdala does is learn vigilance and distrust.”\n\n“Ultimately, forgiveness is usually about one thing—”This is for me, not for you.” Hatred is exhausting; forgiveness, or even just indifference, is freeing. To quote Booker T. Washington, “I shall allow no man to belittle my soul by making me hate him.” Belittle and distort and consume. Forgiveness seems to be at least somewhat good for your health—victims who show spontaneous forgiveness, or who have gone through forgiveness therapy (as opposed to “anger validation therapy”) show improvements in general health, cardiovascular function, and symptoms of depression, anxiety, and PTSD. Chapter 14 explored how compassion readily, perhaps inevitably, contains elements of self-interest. The compassionate granting of forgiveness epitomizes this.”\n\n“Second, nothing about adolescence can be understood outside the context of delayed frontocortical maturation. If by adolescence limbic, autonomic, and endocrine systems are going full blast while the frontal cortex is still working out the assembly instructions, we’ve just explained why adolescents are so frustrating, great, asinine, impulsive, inspiring, destructive, self-destructive, selfless, selfish, impossible, and world changing. Think about this—adolescence and early adulthood are the times when someone is most likely to kill, be killed, leave home forever, invent an art form, help overthrow a dictator, ethnically cleanse a village, devote themselves to the needy, become addicted, marry outside their group, transform physics, have hideous fashion taste, break their neck recreationally, commit their life to God, mug an old lady, or be convinced that all of history has converged to make this moment the most consequential, the most fraught with peril and promise, the most demanding that they get involved and make a difference. In other words, it’s the time of life of maximal risk taking, novelty seeking, and affiliation with peers. All because of that immature frontal cortex.”\n\n“Why is it that our automatic, intuitive moral judgments tend to be nonutilitarian? Because, as Greene states in his book, “Our moral brains evolved to help us spread our genes, not to maximize our collective happiness.”\n\n“This brings up a key concept, namely the inverted U. The complete absence of stress is aversively boring. Moderate, transient stress is wonderful—various aspects of brain function are enhanced; glucocorticoid levels in that range enhance dopamine release; rats work at pressing levers in order to be infused with just the right amount of glucocorticoids. And as stress becomes more severe and prolonged, those good effects disappear (with, of course, dramatic individual differences as to where the transition from stress as stimulatory to overstimulatory occurs; one person’s nightmare is another’s hobby).”\n\n“Testosterone makes people cocky, egocentric, and narcissistic.”\n\n“A remarkably consistent finding, starting with elementary school students, is that males are better at math than females. While the difference is minor when it comes to considering average scores, there is a huge difference when it comes to math stars at the upper extreme of the distribution. For example, in 1983, for every girl scoring in the highest percentile in the math SAT, there were 11 boys.\nWhy the difference? There have always been suggestions that testosterone is central. During development, testosterone fuels the growth of a brain region involved in mathematical thinking and giving adults testosterone enhances their math skills. Oh, okay, it’s biological. But consider a paper published in science in 2008. The authors examined the relationship between math scores and sexual equality in 40 countries based on economic, educational and political indices of gender equality. The worst was Turkey, United States was middling, and naturally, the Scandinavians were tops. Low and behold, the more gender equal the country, the less of a discrepancy in math scores. By the time you get to the Scandinavian countries it’s statistically insignificant. And by the time you examine the most gender equal country on earth at the time, Iceland, girls are better at math than boys. Footnote, note that the other reliable sex difference in cognition, namely better reading performance by girls than by boys doesn’t disappear in more gender equal societies. It gets bigger. In other words, culture matters. We carry it with us wherever we go.”\n\n“Everything in physiology follows the rule that too much can be as bad as too little. There are optimal points of allostatic balance. For example, while a moderate amount of exercise generally increases bone mass, thirty-year-old athletes who run 40 to 50 miles a week can wind up with decalcified bones, decreased bone mass, increased risk of stress fractures and scoliosis (sideways curvature of the spine)—their skeletons look like those of seventy-year-olds. To put exercise in perspective, imagine this: sit with a group of hunter-gatherers from the African grasslands and explain to them that in our world we have so much food and so much free time that some of us run 26 miles in a day, simply for the sheer pleasure of it. They are likely to say, “Are you crazy? That’s stressful.” Throughout hominid history, if you’re running 26 miles in a day, you’re either very intent on eating someone or someone’s very intent on eating you.”\n\n“if you’re stressed like a normal mammal in an acute physical crisis, the stress response is lifesaving. But if instead you chronically activate the stress response for reasons of psychological stress, your health suffers.”\n\n“The dissociation between fear and aggression is evident in violent psychopaths, who are the antithesis of fearful—both physiologically and subjectively they are less reactive to pain; their amygdalae are relatively unresponsive to typical fear-evoking stimuli and are smaller than normal. This fits with the picture of psychopathic violence; it is not done in aroused reaction to provocation. Instead, it is purely instrumental, using others as a means to an end with emotionless, remorseless, reptilian indifference.”\n\n“pain makes aggressive people more aggressive, while doing the opposite to unaggressive individuals.”\n\n“Archaeologists do something impressive, reflecting disciplinary humility. When archaeologists excavate a site, they recognize that future archaeologists will be horrified at their primitive techniques, at the destructiveness of their excavating. Thus they often leave most of a site untouched to await their more skillful disciplinary descendants. For example, astonishingly, more than forty years after excavations began, less than 1 percent of the famed Qin dynasty terra-cotta army in China has been uncovered.”\n"
        },
  
      {
        "title"    : "STEM",
        "url"      : "/stem/",
        "content"  : "x\n"
        },
  
      {
        "title"    : "Computers from scratch",
        "url"      : "/computers/",
        "content"  : "From scratch\n\nnumbers\n\nwriting\n\nelectricity\n\nelectron movement = current\n\nthe cause of electron movement can be magnetism + moving parts or chemical\n\nno current/current\n\nopen/close\n\n0/1\n\nbase 2\n\nboolean logic, AND OR NOT IF\n\nmechanical switch\n\nvacuum tube\n\ntransistor npn pnp\n\nlogic gates\n\nmemory cells\n\nbit\n\nbyte\n\nData types\n\nEverything is bytes in memory. We define how should the computer interpret bytes. \nFor example, take the byte 0101001. If looked as text, it’s the letter ‘A’. The computer could interpret it as a color pixel if the same byte were in a movie file, or as part of a song.\n\nint\n\nunsigned int\n\nlong\n\nshort\n\ndouble\n\nfloat\n\ndecimal\n\nbool\n\nchar\n\nstring\n\nunicode\n\nutf8\n\nComputer organization\n\nfetch-decode-execute\n\nCPU =  ALU + control unit + memory unit\n\nmemory\n\ndisk\n\nInstructions\n\nopcode operand\n\nLOAD 0010\n\nADD 0001 0100\n\nPUSH\n\nPOP\n\nJUMP\n\nconditionals -&gt; jump &amp; jump if not true\n\nvariables -&gt; binding, SET&amp;GET, symbol table in VM\n\nloops -&gt; if &amp; jump\n\nexpressions\n\nProgram\n\na set of instructions\n\ncode\n\ndata\n\nProcess\n\nthe OS abstraction for a running program, PID\n\nthread is a process with a shared address space\n\nstack pointer SP\n\ninstruction pointer(program counter) PC or IP\n\naddress space\n\nstack\n\nheap\n\ncode\n\ndata\n\nstack\n\nreturn address\n\nparams\n\nopen files\n\nlocal variables\n\nheap\nnew()\n\nmalloc()\n\ninterpreter\n\ntokenize\n\nparse tokens to nodes\n\ncreate AST, a tree of nodes\n\ntake a walk and eval\n\ncompiler\ntokenize\n\nparse tokens to nodes\n\ncreate AST or another IR\n\nemit bytecodes\n\nVM\n\nexecute bytecodes\n\ncan be a stack or register machine\n\nexamples\n\njava compiler vs jvm\n\nc# compiler vs CLR\n\nPVM\n\nOS\n\nbios\n\nbootloader\n\nkernel\n\nuser space\n\nKernel\n\nvirtual memory\n\nfile system\n\nvirtual cpu\n\nConcurrency control\n\nmutex\n\nsemaphore\n\nPolicies\n\nScheduling\n\nMechanisms\n\nProcess api\n\nfork, exec, wait\n\nsignals\n\nC\n\ninclude\n\nstruct\n\ntypedef\n\nunion\n\nenum\n\n\n\npointer\n\n*p &amp;p\n\n\n\natomic\n\nvolatile\n\nconst\n\nstatic\n\nregister\n"
        },
  
      {
        "title"    : "Containers",
        "url"      : "/containers/",
        "content"  : "Although OS provides process isolation, containers provide more isolation and ease on top of that\nSee The What, Why and How of Containers – Annwan\n\nContainers From Scratch • Liz Rice • GOTO 2018 is a great look under the hood for what really is a container\n\nher code below\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\npackage main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"os\"\n\t\"os/exec\"\n\t\"path/filepath\"\n\t\"strconv\"\n\t\"syscall\"\n)\n\n// go run main.go run &lt;cmd&gt; &lt;args&gt;\nfunc main() {\n\tswitch os.Args[1] {\n\tcase \"run\":\n\t\trun()\n\tcase \"child\":\n\t\tchild()\n\tdefault:\n\t\tpanic(\"help\")\n\t}\n}\n\nfunc run() {\n\tfmt.Printf(\"Running %v \\n\", os.Args[2:])\n\n\tcmd := exec.Command(\"/proc/self/exe\", append([]string{\"child\"}, os.Args[2:]...)...)\n\tcmd.Stdin = os.Stdin\n\tcmd.Stdout = os.Stdout\n\tcmd.Stderr = os.Stderr\n\tcmd.SysProcAttr = &amp;syscall.SysProcAttr{\n\t\tCloneflags:   syscall.CLONE_NEWUTS | syscall.CLONE_NEWPID | syscall.CLONE_NEWNS,\n\t\tUnshareflags: syscall.CLONE_NEWNS,\n\t}\n\n\tmust(cmd.Run())\n}\n\nfunc child() {\n\tfmt.Printf(\"Running %v \\n\", os.Args[2:])\n\n\tcg()\n\n\tcmd := exec.Command(os.Args[2], os.Args[3:]...)\n\tcmd.Stdin = os.Stdin\n\tcmd.Stdout = os.Stdout\n\tcmd.Stderr = os.Stderr\n\n\tmust(syscall.Sethostname([]byte(\"container\")))\n\tmust(syscall.Chroot(\"/home/liz/ubuntufs\"))\n\tmust(os.Chdir(\"/\"))\n\tmust(syscall.Mount(\"proc\", \"proc\", \"proc\", 0, \"\"))\n\tmust(syscall.Mount(\"thing\", \"mytemp\", \"tmpfs\", 0, \"\"))\n\n\tmust(cmd.Run())\n\n\tmust(syscall.Unmount(\"proc\", 0))\n\tmust(syscall.Unmount(\"thing\", 0))\n}\n\nfunc cg() {\n\tcgroups := \"/sys/fs/cgroup/\"\n\tpids := filepath.Join(cgroups, \"pids\")\n\tos.Mkdir(filepath.Join(pids, \"liz\"), 0755)\n\tmust(ioutil.WriteFile(filepath.Join(pids, \"liz/pids.max\"), []byte(\"20\"), 0700))\n\t// Removes the new cgroup in place after the container exits\n\tmust(ioutil.WriteFile(filepath.Join(pids, \"liz/notify_on_release\"), []byte(\"1\"), 0700))\n\tmust(ioutil.WriteFile(filepath.Join(pids, \"liz/cgroup.procs\"), []byte(strconv.Itoa(os.Getpid())), 0700))\n}\n\nfunc must(err error) {\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n\n"
        },
  
      {
        "title"    : "Networks",
        "url"      : "/networks/",
        "content"  : "TCP/IP Model\n\napplication layer - protocols, data\n\ntransport layer - TCP, segments\n\nnetwork or the internet layer - IP, packets\n\nlink layer - frames and bits\n"
        },
  
      {
        "title"    : "Operating Systems",
        "url"      : "/operating-systems/",
        "content"  : "Books\n\nOperating Systems: Three Easy Pieces\n\nWriting a Simple Operating System from Scratch\n\nOperating Systems, From 0 to 1\n"
        },
  
      {
        "title"    : "ACID",
        "url"      : "/acid/",
        "content"  : "Consistency\n\nConsistent data makes sense logically. It’s not a property of a db. \nAn app can leverage db features to achieve consistency. Like atomicity, isolation, foreign keys, referential integrity, validation, etc.\n\nSo a database can’t make your data magically consistent but it can help you with this\n\nAtomicity\nAll or nothing. It reduces a long list of possible problems when running a transaction to a abort-and-retry\n\nIsolation\n\nWhen there are more than one active transaction, there is a risk that they will affect each other. Databases try to prevent this. Yet, isolation has multiple levels and there is a long list of possible concurrency bugs. Some of the key ideas are,\n\nMaking a change visible to other transactions only when it’s fully committed\n\nUsing multiple versions of db objects. This enables a transaction to operate on an unchanging, consistent dataset. Called MVCC, multi-version concurrency control\n\nDurability\n\nMaybe it’s so obvious but it’s the topmost expectation from a db. A db shouldn’t lose the data. In practice, there is no perfect durability. Disks can fail or get full, processes crash, fsync might fail, etc. Some key ideas to tackle this are,\n\n\n  Write-ahead log: a db can log the intended change before acknowledging the write, so it can recover in case of a power loss or restart\n  Periodic backups: enables going back to a snapshot but the remaining data will still be lost\n  Replication: A db can write the data to multiple disks(possibly in multiple datacenters or availability zones)\n\n"
        },
  
      {
        "title"    : "B Trees",
        "url"      : "/b-trees/",
        "content"  : "Advantages\n\nMore compact, a key is stored once\n\nStrong transactions via locks\n\nConsistently good performance for many loads\n\nDisadvantages\n\nhard to handle high write thoughput\n\n"
        },
  
      {
        "title"    : "Databases",
        "url"      : "/databases/",
        "content"  : "Common DB schema change mistakes - Postgres.AI\n\n"
        },
  
      {
        "title"    : "Database Concepts",
        "url"      : "/db-concepts/",
        "content"  : "1. Normalization and Denormalization\n\n  Normalization: Process of organizing data to reduce redundancy. Steps involve normal forms (1NF, 2NF, 3NF, BCNF).\n  Denormalization: Introducing redundancy to optimize read performance. Used to reduce the complexity of queries.\n\n\n2. Indexing\n\n  Purpose: Speeds up retrieval operations.\n  Types: B-tree, Hash, Bitmap, Full-text.\n  Trade-offs: Increased write times and storage usage.\n\n\n3. Transaction Management\n\n  ACID Properties:\n    \n      Atomicity: All operations in a transaction complete or none do.\n      Consistency: Database remains in a valid state before and after the transaction.\n      Isolation: Transactions do not affect each other’s execution.\n      Durability: Changes are permanent once committed.\n    \n  \n  Isolation Levels: Read Uncommitted, Read Committed, Repeatable Read, Serializable.\n\n\n4. Concurrency Control\n\n  Locking Mechanisms: Pessimistic (Explicit locking) vs. Optimistic (Versioning).\n  Two-Phase Locking (2PL): Ensures conflict-serializability.\n  Timestamp Ordering: Ensures serializability by assigning timestamps to transactions.\n\n\n5. Replication and Sharding\n\n  Replication: Copying data across multiple servers for fault tolerance and load balancing.\n    \n      Types: Master-slave, Peer-to-peer.\n    \n  \n  Sharding: Splitting data across multiple servers to handle large datasets and high throughput.\n\n\n6. Data Warehousing and OLAP\n\n  Data Warehousing: Centralized repository for integrated data from multiple sources.\n  Online Analytical Processing (OLAP): Supports complex queries and analysis.\n    \n      Star Schema: Central fact table linked to dimension tables.\n      Snowflake Schema: Star schema with normalized dimension tables.\n    \n  \n\n\n7. NoSQL Databases\n\n  Types: Document, Key-Value, Column-Family, Graph.\n  Use Cases: High scalability, unstructured or semi-structured data.\n\n\n8. Query Optimization\n\n  Execution Plans: Understanding how queries are executed and optimized.\n  Cost-Based Optimization: Choosing the most efficient query execution path.\n\n\n9. Consistency Models\n\n  Strong Consistency: Guarantees immediate consistency after a write.\n  Eventual Consistency: Guarantees eventual consistency without immediate guarantees.\n\n\n10. CAP Theorem\n\n  Consistency: All nodes see the same data at the same time.\n  Availability: Every request receives a response, success or failure.\n  Partition Tolerance: The system continues to function despite network partitions.\n\n\n11. Database Security\n\n  Authentication and Authorization: Controlling access to data.\n  Encryption: Protecting data at rest and in transit.\n  Auditing: Tracking access and changes to data.\n\n\n12. Advanced Data Models\n\n  Graph Databases: Represent data as nodes and edges.\n  Temporal Databases: Manage data involving time dimensions.\n\n\n13. Distributed Databases\n\n  Coordination: Mechanisms for ensuring consistency across distributed nodes.\n  Challenges: Network latency, consistency, fault tolerance.\n\n\n"
        },
  
      {
        "title"    : "Data Structures to Build a DB",
        "url"      : "/db-data-structures/",
        "content"  : "The simplest DB could be just appending to a file, O(1) write, O(n) read\n\nIf you use a hash map instead, reads would reduce to 0(1)\n\nBut your hash map must fit into the memory\n\nAnd no range queries are possible, eg. selecting a date range\n\nLog structured merge tree (LSM tree)\n\nB Trees\n"
        },
  
      {
        "title"    : "Leaderless Replication",
        "url"      : "/leaderless-replication/",
        "content"  : "Dynamo-style, Cassandra, Riak, ..\n\nSince any node can accept writes, a mechanism is necessary to make them consistent, eventually\n\n\n  Read repair, read from multiple nodes and accept the latest value\n  Anti-entropy, run a background process watching for differences in data and updates old values\n\n\nQuorums\n\nImagine you have n total nodes,\n\nThe system may not have to wait for all nodes to write or read,\n\nIf you wait for,\n\nw votes for a valid write,\n\nr votes for a valid read\n\nIt satisfies the quorum condition if w + r &gt; n\n\nIf you require more than half of the nodes for a read and write to be valid, your system can handle up to n/2 node failures\n\nfor example n=5 w=3 r=3, you wait for 3 nodes to consider a write to be valid,\n\nthen you know 3 out of 5 nodes have an up to date value,\n\nso if you read 3 nodes, at least one of them will have an up to date value,\n\nand this setup can handle 2 node failures\n\nQuorum is a way to decrease probability of stale reads and causality errors,\n\nyet you still need to think about\n\n\n  detecting concurrent writes\n  what will happen to the quorum in case of a network partition?\n  what happens when a write fails halfway through? do you rollback the written nodes?\n\n"
        },
  
      {
        "title"    : "Log structured merge tree (LSM tree)",
        "url"      : "/lsm-trees/",
        "content"  : "Now maybe we can do better with the file-append\n\nOnly if there is a way to keep it sorted\n\nyou can sort after every entry but its highly inefficient\n\n\n\nWhat if we have an in-memory balanced tree like an AVL tree; or red-black tree,\n\nappend write to the tree first, then periodically flush the tree to a file,\n\nthere will be multiple files, all sorted, and periodically merged in the background\n\nThese sorted string tables are called SS Tables, and a sorted file can be compressed better, leading to smaller files\n\nThere is also a crash recovery log in case of a crash before the tree is flushed\n\n\n\na balanced tree + SS Tables + periodical merging -&gt; LSM tree\n\n\n  add incoming data to the balanced tree and to the crash recovery log\n  after a certain size, flush the tree to an SS table and delete the discard the recovery log\n  periodically merge the SS Tables in the background\n\n\nAdvantages\n\nLower write amplification, better disk life\n\nHigher throughput\n\nLocalized data, less unused disk space\n\nBetter compression, smaller files\n\nDisadvantages\n\nLess stable response times in higher percentiles\n\nCompaction costs\n\nIf compaction is not configured well, \nit may get behind the writes, leading to a disk full,\n\nand slower writes due to checking more segments\n\nSo monitor well\n"
        },
  
      {
        "title"    : "Partitioning",
        "url"      : "/partitioning/",
        "content"  : "Utilize partitioning to circumvent constraints in databases, networks, and computation.\n\nWays to partition include:\n\n\n  Dividing databases to bypass size or I/O limits.\n  Splitting queues or message buses to avoid request or connection constraints.\n  Segmenting web apps to overcome instance limits.\n\n\nDatabase partitioning methods are horizontal, vertical, or functional:\n\n\n  Horizontal, or sharding, divides data by subsets with the same schema.\n  Vertical splits data fields into subsets based on access frequency.\n  Functional partitions data by its usage in each system context.\n\n\nEnsure even load distribution by designing partition keys to avoid bottlenecks. Choose keys wisely to distribute load uniformly. Partitioning should address both service and subscription limits.\n\nConsider partitioning at various levels like database servers, VMs, and storage. Each level has its own constraints. Prioritize lower-level partitioning for easier management. Reserve subscription-level partitioning for large applications.\n\nSee also\n\nConsistent Hashing\n"
        },
  
      {
        "title"    : "Replication",
        "url"      : "/replication/",
        "content"  : "Keeping the same data on multiple nodes\n\nWhy distribute data?\n\n\n  fault tolerance\n  lower latency, eg. multiple AZ, closer to users\n  scale\n\n\nA simple concept yet requires a lot of thought to implement well\n\nSync or Async?\n\n\n  sync -&gt; wait for a write to be replicated on all nodes\n  async -&gt; write to the leader and async write followers\n  semi-sync -&gt; write to the leader and some of the followers and async write others\n\n\nWhat to replicate?\n\n\n  \n    SQL statements\n\n    indeterministic, eg. now()\n  \n  \n    WAL (write ahead log)\n\n    depends on internal bytes layout of a specific db version, so an upgrade requires downtime\n  \n  \n    Row based\n\n    higher level, easier to parse for external systems, nodes might run different versions of db\n  \n  \n    Trigger based\n\n    more flexible, custom application code, more prone to bugs, greater overhead\n  \n\n\nHow to replicate?\n\nSingle Leader\n\nLeaderless Replication\n\nMulti-leader\n\nMakes more sense in a multiple datacenter setup\n\nOffline clients and collaborative editing are also similar to a multi leader setup\n\nSee also\n\nPartitioning\n"
        },
  
      {
        "title"    : "Single Leader",
        "url"      : "/single-leader/",
        "content"  : "Postgres, MySQL, ..\n\nUsually requires extensions and helpers to setup\n\nFollower Failure\n\n\n  Get a snapshot from a leader\n  Get changes since the snapshot\n\n\nLeader Failure\n\nMore tricky\n\n\n  Detect the leader is down\n  Elect a new leader\n  Make sure each node recognizes the new leader and the old leader accepts that its a follower now\n\n\nLag Problems\n\n\n  Read your writes\n  Monotonic reads, you should not read an older value than they have seen\n  Consistent prefix reads, preserving order of writes, thus causality\n\n\nTransactions in a single node db solves them yet we need application level mechanisms for distributed nodes although they are complex and error-prone\n"
        },
  
      {
        "title"    : "Sql Tips",
        "url"      : "/sql-tips/",
        "content"  : "SQLforDevs.com - Database Tips &amp; Tricks\n\nThink about your data and how it will be used\n\nconsider different angles, there is often an easier way to look at a problem, like using a helper table, or relaxing the real-time constraint, or preparing ahead like pre-sorting\n\npresorted tables for sequential access\n\nMySQL auto-sorts by primary key. Reads will be fast, writes will be log time but this can be solved by using a temporary append-only table. First append then move to the sorted table. Query them both.\n\nIn PG, writes are always append. CLUSTER command sorts the table but its locking. there’s an extension to prevent locking but it keeps the data twice for some time. Bad for large tables. Partition to smaller tables.\n\nIndexes\n\nwithout an index, db has to check all rows\n\ndb has to update an index for new rows, so only keep the necessary indexes\n\nmysql can make an index invisible, deactivates it. so you can make sure before deleting it.\n\nNormalization\n\nReduce duplication, increate referential integrity. 1NF to 6NF\n\nORMs\n\nSometimes helpful yet sometimes slower and more convoluted than SQL\n\n"
        },
  
      {
        "title"    : "Armstrong Thesis",
        "url"      : "/armstrong-thesis/",
        "content"  : "http://erlang.org/download/armstrong_thesis_2003.pdf\n\nConcurrency\n"
        },
  
      {
        "title"    : "Azure Pillars",
        "url"      : "/azure-pillars/",
        "content"  : "\n  Secure\n  Reliable\n  Cost ROI\n  Perf\n  Ops Excellence\n\n\n"
        },
  
      {
        "title"    : "Consistent Hashing",
        "url"      : "/consistent-hashing/",
        "content"  : "When you add or remove a node, you only need to re-distribute a fraction of keys instead of all your keys\n\nMap servers and keys on a ring using a uniformly distributed hash function\n\nGo clockwise to find which server has the value of a key\n\nBloom filters helps to avoid searching if a key does not exist\n\nRepresent a server with many virtual nodes\n\nIf you add a node,  go counter clockwise and map the keys to the new node\n\nIf a node leaves, go counter clockwise and map the keys to the next node on the ring\n\nUsed for partitioning in Dynamo and Cassandra\n"
        },
  
      {
        "title"    : "Detect A Node Failure",
        "url"      : "/detect-a-node-failure/",
        "content"  : "Heartbeats and timeouts\n\nGossip protocol\n\n"
        },
  
      {
        "title"    : "Distributed Design Patterns",
        "url"      : "/distributed-design-patterns/",
        "content"  : "https://learn.microsoft.com/en-us/azure/architecture/patterns/category/data-management\n\nThere are so many patterns but you don’t need to memorize them all because they are based on a smaller list of key ideas. When you encounter a problem, you can arrive at the same pattern using the fundamentals.\n\n\n  \n    caching\n  \n  \n    separating interfaces\n  \n  \n    decoupling with queues or message brokers\n  \n  \n    reducing coordination necessity by assigning each worker a subset of work\n  \n  \n    batching work\n  \n  \n    reusing\n  \n  \n    async work\n  \n  \n    buffers\n  \n  \n    doing work upfront to simplify later stages, like indexing\n  \n  \n    dividing your data into more manageable pieces, sharding\n  \n  \n    using references to avoid moving large pieces of data\n  \n  \n    selecting an appropriate data store for the use case, like an object store for static assets, etc.\n  \n  \n    using a gateway to aggregating multiple requests to one\n  \n  \n    using separate subsystems for different concerns like auth, config, etc.\n  \n\n\nMany of them include a spectrum, for example\n\n\n  \n    central control vs autonomy\n  \n  \n    divide vs aggregate\n  \n  \n    couple vs decouple\n  \n  \n    copies vs references\n  \n  \n    sync vs async\n  \n\n\nAgain, the way is not to memorize and apply patterns but to reason about the problem at hand\n\n"
        },
  
      {
        "title"    : "Distributed Systems",
        "url"      : "/distributed-systems/",
        "content"  : "https://martinfowler.com/articles/patterns-of-distributed-systems/\n"
        },
  
      {
        "title"    : "Generate A Unique Id",
        "url"      : "/generate-a-unique-id/",
        "content"  : "\n  auto increment -&gt; works on a single node\n  id server -&gt; single point of failure\n  UUID -&gt; not sortable\n  Custom sortable id -&gt; timestamp + data center id + machine id + sequence number\n\n"
        },
  
      {
        "title"    : "Google SRE book",
        "url"      : "/google-sre-book/",
        "content"  : "\n  Fail sanely\n  Progressive rollouts\n  Monitoring\n    \n      Pages\n      Tickets\n      Logging\n    \n  \n  Measure in terms of the user\n  Error budgets\n  Postmortems\n  Capacity planning\n    \n      N+2 instances\n      Load testing\n      Validate forecasts with reality\n    \n  \n  Exponential back off\n  SRE half operational half development\n  Disaster role playing\n\n\nPreparedness And Disaster testing\n\n  Figure out ways to make it more robust\n  Ensure that systems will react as we think\n  Determine weaknesses\n  Live drills\n  Swing capacity\n  Focus on safety\n  attention to detail\n  Simulations\n  Training and certs\n  Detailed requirements and design\n  Defense in depth and breadth\n\n\nPostmortem culture\n\n  What happened\n  The effectiveness of the response\n  What we would do differently next time\n  What actions will be taken to make sure it doesn’t happen again\n\n\nAutomation and reduced overhead\n\n  Automation is a double edged sword\n  Methodical human approach is an alternative\n  Slow and steady is better in high stake cases\n  Multiple checks and balances\n  Human oversight\n\n\nStructural and rational decision making\n\n  The inputs are clear\n  The basis is agreed upon in advance\n  Any assumption are explicitly stated\n  Data driven over feelings and opinions\n\n\n"
        },
  
      {
        "title"    : "Apache Kafka",
        "url"      : "/kafka/",
        "content"  : "Apache Kafka\n\nKafka has a custom wire protocol. It doesn’t use http, thrift, protocol buffers etc. in order to have more control\n\nKafka groups messages.\nMore messages, more repetition patterns, efficient compression.\n\nDon’t fear the disk\n\nKafka persists data immediately. Kernel keeps data in pagecache before flushing to disk. Kafka uses fsync frequently to flush pagecache to disk.\n\nClusters also have an uninterruptible power supply to protect the pagecache.\n\nNo byte-copying\n\nProducer, broker, and consumer use the same format so they don’t need to copy bytes to different formats.\n\nAnother key point is the sendfile system call\n\nSending data from disk to network normally follows the red path below.\n\nKafka uses sendfile system call to directly copy from pagecache to network, following the green path\n\n\n\n"
        },
  
      {
        "title"    : "Apache Spark",
        "url"      : "/spark/",
        "content"  : "Parallel processing engine\n\nRDD\n\ndataframe\n\nparquet\n\ndelta lake table format, extends parquet with a transaction log and metadata\n\nenables relational db benefits on batch &amp; stream\n\nstructured streaming\n"
        },
  
      {
        "title"    : "Time And Order",
        "url"      : "/time-and-order/",
        "content"  : "Timestamps are unreliable since nodes cannot agree on time\n\nNetwork Time Protocol\n\nVector clocks\n\nSequence numbers\n\n"
        },
  
      {
        "title"    : "Use An Identity Service",
        "url"      : "/use-an-identity-service/",
        "content"  : "Using a framework or off-the-shelf identity solution still requires you to handle many issues. Avoid building an identity system from scratch.\n\nAvoid storing credentials\n\nRunning your identity system means storing a database of credentials. Never store credentials in clear text or encrypted form. Consider cryptographically hashing and salting credentials before storage. Even then, credentials remain vulnerable. Credential storage is a liability. IDaaS platforms securely manage credentials.\n\nImplement identity and federation protocols\n\nModern identity protocols like OAuth 2 and OpenID Connect are complex. Industry experts designed them to mitigate real-world attacks. These protocols evolve with technology and user expectations. Identity specialists implement and validate these protocols best. Federation protocols are also complex and need specialist knowledge.\n\nAdopt modern identity features\n\nUsers expect advanced features like:\n\n\n  Passwordless authentication\n  Single sign-on (SSO)\n  Multifactor authentication (MFA)\n  Auditing\n  Conditional access\n  Just-in-time access control\n\n\nBuilding these features yourself is difficult. IDaaS platforms offer improved security features like:\n\n\n  Detection of risky sign-in events\n  Detection of impossible travel\n  Detection of common credentials\n  Machine learning classification of sign-in attempts\n  Dark web monitoring for leaked credentials\n  Ongoing threat monitoring\n\n\nBuilding your identity system means missing out on these features.\n\nUse a reliable, high-performance identity system\n\nIdentity systems must be reliable. If unavailable, your solution may degrade or fail. IDaaS with service level agreements (SLA) ensure operational reliability. For example, Microsoft Entra ID offers an SLA for uptime. Identity systems must perform well and scale with growth. IDaaS systems handle large user loads and absorb attack traffic.\n\nTest your security and apply tight controls\n\nRunning your identity system requires you to keep it secure. Implement controls like:\n\n\n  Periodic penetration testing\n  Vetting employees\n  Tight change control\n\n\nThese controls are expensive and complex.\n\nUse cloud-native security controls\n\nUsing Microsoft Entra ID allows you to use cloud-native security features like managed identities for Azure resources. If using a separate identity platform, integrate managed identities with your identity solution.\n\nFocus on your core value\n\nMaintaining a secure, reliable, and responsive identity platform is expensive. Identity systems don’t add value to your solution or differentiate you from competitors. Outsource your identity needs to experts to focus on adding business value for customers.\n"
        },
  
      {
        "title"    : "Customize Prompt",
        "url"      : "/customize-prompt/",
        "content"  : "Instructions\nYou are a reliable assistant. Follow these rules for all your answers.\nPrinciples\n\n  Prioritize correctness\n  Use C-level communication\n  Don’t form full sentences, use keywords\n  Only answer what I ask you\n  Only include words that significantly contribute to the meaning\n  Don’t paraphrase my ask. No intros or explanations, just the answer.\n    Writing\n    Language\n  \n  Use simple and direct English.\n  Use common everyday words\n  Use active voice.\n  Avoid adjectives and adverbs.\n  Avoid repetition\n    Style\n  \n  Start broad with the top 3 or 5 points.\n  Be direct and concise.\n  Don’t be off-topic. Only answer what is asked.\n  Expand abbreviations at least once\n    Formatting\n  \n  Return valid markdown\n  Use numbered lists when the order is important\n  Use tables to compare or contrast things\n    Your Skills\n    Coding\n  \n  Write correct, idiomatic, readable code with clear naming\n  If user asks to change your code, reply with the changed part only. Don’t repeat the unchanged code\n  Max 30 lines and 3 params per function\n  Directly return your code. No intro, no explanation.\n    Teaching\n  \n  Teach through examples\n  Start broad, go deeper only when asked\n  List tradeoffs, use cases, related topics, etc.\n  Skip basics, explain at graduate level\n  Include medium and advanced concepts\n    Summarizing\n  \n  Skip the author, title, intro, topics, etc.\n  Mention all important points\n  Retain numbers and units\n  Retain tables\n  Retain all examples\n\n"
        },
  
      {
        "title"    : "Machine Learning",
        "url"      : "/machine-learning/",
        "content"  : "Machine Learning  - Google for Developers\n"
        },
  
      {
        "title"    : "NLP",
        "url"      : "/nlp/",
        "content"  : "encoder - decoder\n\ntext -&gt; encoder -&gt; embedding vectors (also called hidden state or context)\n\nfixed length vs all encoder state\n\nattention\n\nencoder creates a series of states instead of a single hidden state. Using all the states would be a huge input for decoder. Instead, decoder assigns a different importance, weight, attention to each of encoder  states.\n\nThis is much better but still sequential. Transformers make it parallel.\n\nBut how?\n\nSelf attention\n\ntransfer learning\n"
        },
  
      {
        "title"    : "Ozlang",
        "url"      : "/ozlang/",
        "content"  : "Oz is a pseudocode format for c#.  Stripped down to bare essentials to focus on the core data types, methods, and relations. Here’s an example\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\nenum State\n\tInProgress\n\tActive\n\tFailed\n\t\ninterface IExample{\n    Task&lt;ReturnType&gt; CreateAsync(\n        CreateCapabilityArtifactRequest, \n        string AuthToken\n    ) \n    Get()\n}\n\nclass Example: IExample\n{\n\tGuid Id\n\tstring? Name \n}\n\n**Turn the c# code snippets I’ll give to you to ozlang **\n\n  use c# type system\n  no comments, just code\n  skip namespaces\n  don’t add anything new, only modify or remove\n    method signatures\n  \n  if variable name is the same as type, list the type only. for example, Instead of writing Method(CapabilityManifest capabilityManifest,  Guid id), just  Method(CapabilityManifest, Guid id) Otherwise keep parameters intact.\n  drop CancellationTokens\n  delete constructors\n  delete private methods\n  delete modifiers like public, static etc.\n\n\n"
        },
  
      {
        "title"    : "Prompt Engineering",
        "url"      : "/prompt-engineering/",
        "content"  : "clear\n\nspecific\n\nincremental\n\ntypes\n\ncontext\n\ncommand\n\nexample\n\ntechniques\n\nrole playing\n\nchain of thought\n\n0 shot, 1 shot, few shot\n\nlinks\n\nPrompt Engineering: How to Think Like an AI - tim bornholdt\n\n"
        },
  
      {
        "title"    : "Algorithms",
        "url"      : "/algorithms/",
        "content"  : "Think about the data structures and their relationships. Then algorithms flows naturally.\n\nBooks\n\nGrokking Algorithms An Illustrated Guide For Programmers and Other Curious People\n\nAlgorithms to Live By: What Computers Can Teach Us About Solving Human Problems\n"
        },
  
      {
        "title"    : "Approximation",
        "url"      : "/approximation/",
        "content"  : "Sometimes the exact solution takes too much time\n\nLike the set covering problem or traveling salesman\n\nGreedy helps here\n\n"
        },
  
      {
        "title"    : "Backtrack",
        "url"      : "/backtrack/",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\nbacktrack(current, args):\n    if done:\n        add to results\n        return \n    if go this way:\n        backtrack(current + x, updated args)\n    elif go that way:\n        backtrack(current + y, updated args)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\"\"\"\nn=3\n[\n  \"((()))\",\n  \"(()())\",\n  \"(())()\",\n  \"()(())\",\n  \"()()()\"\n]\nWe can start an opening bracket if we still have one (of n) left to place. \nAnd we can start a closing bracket if it would not exceed the number of opening brackets.\n\"\"\"\ndef generateParenthesis(self, N):\n    ans = []\n    def backtrack(S = '', left = 0, right = 0):\n        if len(S) == 2 * N:\n            ans.append(S)\n            return\n        if left &lt; N:\n            backtrack(S+'(', left+1, right)\n        if right &lt; left:\n            backtrack(S+')', left, right+1)\n\n    backtrack()\n    return ans\n\nassert generateParenthesis(3) == [\"((()))\", \"(()())\", \"(())()\", \"()(())\", \"()()()\"]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n\"\"\"\nfind all unique combinations in candidates where the candidate numbers sums to target.\nInput: candidates = [2,3,6,7], target = 7,\nA solution set is:\n[\n  [7],\n  [2,2,3]\n]\nInput: candidates = [2,3,5], target = 8,\nA solution set is:\n[\n  [2,2,2,2],\n  [2,3,3],\n  [3,5]\n]\n\"\"\"\n\ndef combinationSum(self, candidates: List[int], target: int) -&gt; List[List[int]]:\n\n    def backtrack(target, comb, idx):\n        if target == 0: # found a valid combination\n            res.append(comb)\n        for i, val in enumerate(candidates[idx:]):\n            if val &gt; target: break # dead end \n            backtrack(target-val, comb + [val], idx + i)\n\n    res = []\n    candidates.sort()\n    backtrack(target, [], 0)\n\n    return res \n\n\nSubsets\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\nsubsets(nums):\n  start with empty set \n\n  for num in nums:\n    newseen = []\n    for set in seen:\n      add (set + num) to newseen\n\n    merge newseen with seen\n\n\n"
        },
  
      {
        "title"    : "Bit",
        "url"      : "/bit/",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n// Get \nnum &amp; 1&lt;&lt;i \n\n// Set \nnum | 1&lt;&lt;i\n\n// Clear \nnum &amp; ~(1&lt;&lt;i)\n\n// masks\n(1&lt;&lt;i)-1 // 0100 - 0001 = 0011 \n\n-1 &lt;&lt; (i+1) // 1111 &lt;&lt; 2 = 1100 \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\nfunc reverseBits(num uint32) uint32 {\n    /*\n    Reverse bits of a given 32 bits unsigned integer.\n\n    Input: 00000010100101000001111010011100\n    Output: 00111001011110000010100101000000\n    */\n    res := uint32(0)\n    power := uint32(31)\n    for num != 0 {\n        res += (num &amp; 1) &lt;&lt; power\n        num = num &gt;&gt; 1\n        power -= 1\n    }\n    return res\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\ndef readBinaryWatch(num: int) -&gt; List[str]:    \n    \"\"\"\n    Given a non-negative integer n \n    which represents the number of LEDs that are currently on, \n    return all possible times a binary watch could represent.\n    \n    Example:\n    Input: n = 1\n    Return: [\"1:00\", \"2:00\", \"4:00\", \"8:00\", \"0:01\", \"0:02\", \"0:04\", \"0:08\", \"0:16\", \"0:32\"]\n    \"\"\"\n\n    res = []\n    for h in range(12):\n        for m in range(60):\n            if (bin(h) + bin(m)).count('1') == num:\n                time = '%d:%02d' % (h, m)\n    return res\n\n\n"
        },
  
      {
        "title"    : "Easy",
        "url"      : "/easy/",
        "content"  : "\n"
        },
  
      {
        "title"    : "Greedy",
        "url"      : "/greedy/",
        "content"  : "Pick the optimal move at each step\n\n\n\nTHE CLASSROOM SCHEDULING PROBLEM\n\nSuppose you have a classroom and want to hold as many classes here as possible. You get a list of classes. Yet some classes overlap.\n\nSounds like a hard problem, right? Actually, the algorithm is so easy, it might surprise you. Here’s how it works:\n\n\n  Pick the class that ends the soonest. This is the first class you’ll hold in this classroom.\n  Now, you have to pick a class that starts after the first class. Again, pick the class that ends the soonest. This is the second class you’ll hold.\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\"\"\"\nInput: [ [1,4],[4,5] ]\nOutput: [ [1,5] ]\nExplanation: Intervals [1,4] and [4,5] are considered overlapping.\n\"\"\"\n\ndef mergeIntervals(self, intervals):\n    intervals.sort(key=lambda x: x.start)\n\n    merged = []\n    for interval in intervals:\n        # if the list of merged intervals is empty or if the current\n        # interval does not overlap with the previous, simply append it.\n        if not merged or merged[-1].end &lt; interval.start:\n            merged.append(interval)\n        else:\n            # otherwise, there is overlap, so we merge the current and previous\n            # intervals.\n            merged[-1].end = max(merged[-1].end, interval.end)\n\n    return merged\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n\"\"\"\nInput: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\nOutput: 8\nExplanation: \nA -&gt; B -&gt; idle -&gt; A -&gt; B -&gt; idle -&gt; A -&gt; B\nThere is at least 2 units of time between any two same tasks.\n\n\nInput: tasks = [\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"], n = 2\nOutput: 16\nExplanation: \nOne possible solution is\nA -&gt; B -&gt; C -&gt; A -&gt; D -&gt; E -&gt; A -&gt; F -&gt; G -&gt; A -&gt; idle -&gt; idle -&gt; A -&gt; idle -&gt; idle -&gt; A\n\"\"\"\nimport collections \n\ndef leastInterval(self, tasks: List[str], n: int) -&gt; int:        \n\n    # tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"]\n    # n = 2 \n\n    counts = list(collections.Counter(tasks).values()) # [3,3]\n    max_count = max(counts) # 3\n    num_of_chars_with_max_count = counts.count(max_count) # 2, A and B\n\n    num_of_chunks_with_idles = max_count-1 # 2  -&gt; A  A  A\n\n    # either a task will fill an empty place or the place stays idle, \n    # either way the chunk size stays the same  \n    length_of_a_chunk_with_idle = n+1  # 3 -&gt; A _ _ A _ _ A \n\n    # on the final chunk, there will only be most frequent letters \n    length_of_the_final_chunk = num_of_chars_with_max_count  # 2  \n\n    length_of_all_chunks = (num_of_chunks_with_idles*length_of_a_chunk_with_idle) + length_of_the_final_chunk # 2*3 + 2 = 8 \n    # -&gt; A B _ A B _ A B \n\n    return max(len(tasks), length_of_all_chunks)\n\nassert leastInterval([\"A\", \"A\", \"A\", \"B\", \"B\", \"B\"], 2) == 8\n# A -&gt; B -&gt; idle -&gt; A -&gt; B -&gt; idle -&gt; A -&gt; B\n# There is at least 2 units of time between any two same tasks.\n\nassert (\n    leastInterval([\"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\"], n=2)\n    == 16\n)\n# One possible solution is\n# A -&gt; B -&gt; C -&gt; A -&gt; D -&gt; E -&gt; A -&gt; F -&gt; G -&gt; A -&gt; idle -&gt; idle -&gt; A -&gt; idle -&gt; idle -&gt; A\n\n\n"
        },
  
      {
        "title"    : "Hard",
        "url"      : "/hard/",
        "content"  : "\n"
        },
  
      {
        "title"    : "Local Maximum",
        "url"      : "/local-maximum/",
        "content"  : "\n\nFrom https://cdixon.org/2009/09/19/climbing-the-wrong-hill\n\nA classic problem in computer science is hill climbing. Imagine you are dropped at a random spot on a hilly terrain, where you can only see a few feet in each direction (assume it’s foggy or something). The goal is to get to the highest hill.\n\n\n\nConsider the simplest algorithm. At any given moment, take a step in the direction that takes you higher. The risk with this method is if you happen to start near the lower hill, you’ll end up at the top of that lower hill, not the top of the tallest hill.\n\nA more sophisticated version of this algorithm adds some randomness to your walk. You start with a lot of randomness and reduce the amount of randomness over time.  This gives you a better chance of meandering near the bigger hill before you start your focused, non-random climb.\n\nA better algorithm has you repeatedly drop yourself in random parts of the terrain, do simple hill climbing, and then after many such attempts step back and decide which of the hills were highest.\n\n"
        },
  
      {
        "title"    : "Medium",
        "url"      : "/mid/",
        "content"  : "\n"
        },
  
      {
        "title"    : "Parallel Programming",
        "url"      : "/parallel-programming/",
        "content"  : "\n"
        },
  
      {
        "title"    : "Rabin Karp",
        "url"      : "/rabin-karp/",
        "content"  : "Sometimes we need to search for a small string in a big string,\n\nb = “nature does not hurry”\n\ns = “ur”\n\nIs s in b?\n\nYes, in two places\n\nUsing a naive string search is O(sb) time, where s and b are the lengths of small and big strings\n\nRabin-Karp optimizes this by applying a rolling hash function and comparing substrings with matching hashes\n\nIt takes O(b+s) time to compute hashes,\n\nnumber of comparisons depends on the number of matches\n\nWorst case O(bs), mostly O(b+s)\n\n\n\nRabin fingerprint is a rolling hash function,\n\nH(str) = A^(n-1) + … + A^0\n\nWhere A is the alphabet size and n is the string length\n\nFor ASCII, A=128 possible chars\n\nH(ur) =  128^1 * code(u) + 128^0 * code(r)\n\n"
        },
  
      {
        "title"    : "Sort",
        "url"      : "/sort/",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\ndef quick_sort(data):\n    # base case\n    if len(data) &lt; 2:\n        return data\n    # recursion\n    else:\n        less = list()\n        greater = list()\n        equal = list()\n        pivot = data[int(len(data)/2)]\n        for i in data:\n            if i &lt; pivot:\n                less.append(i)\n            elif i == pivot:\n                equal.append(i)\n            else:\n                greater.append(i)\n\n        return quick_sort(less) + equal + quick_sort(greater)\n\n\nif __name__ == \"__main__\":\n    print(quick_sort([9, 7, 5, 4, 6, 8, 12, 1, 26, 1, 1]))\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\ndef selection_sort(data):\n    sorted_list = list()\n    for i in range(len(data)):\n        smallest_index = data.index(min(data))\n        sorted_list.append(data.pop(smallest_index))\n    return sorted_list\n\nif __name__ == \"__main__\":\n    print(selection_sort([9, 7, 5, 4, 6, 8, 12, 1, 26, 1, 1]))\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\nfunction findUnsortedSubarray(nums){\n  return nums.slice()\n    .sort((a, b) =&gt; a - b)\n    .reduce((acc, curr, idx) =&gt; acc + (curr === nums[idx] ? ' ' : 'x'), '')\n    .trim().length;\n}\n\nlet ans = findUnsortedSubarray([2, 6, 4, 8, 10, 9, 15])\nconsole.log(ans)\n// answer is 5 \n// it's enough to sort [6, 4, 8, 10, 9] to make all sorted \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\ndef findUnsortedSubarray(nums) -&gt; int:\n    is_same = [a == b for a, b in zip(nums, sorted(nums))]\n    if all(is_same):\n        return 0\n    else:\n        first_index = is_same.index(False)\n        last_index = len(nums) - is_same[::-1].index(False)\n        return last_index - first_index\n\n\n\"\"\"\n[2, 6, 4, 8, 10, 9, 15]\n[t,f,... f,t]\n0,1, .. 5,6\nfalse starts at index 1, ends at 5 \n\"\"\"\n\nassert findUnsortedSubarray([2, 6, 4, 8, 10, 9, 15]) == 5\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\nfrom heapq import heappush, heappop\n\n\ndef heapsort(iterable):\n    h = []\n    for val in iterable:\n        heappush(h, val)\n    # or just h = heapify(iterable)\n    return [heappop(h) for i in range(len(h))]\n\n\nassert heapsort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n"
        },
  
      {
        "title"    : "Tree Balancing",
        "url"      : "/tree-balancing/",
        "content"  : "Balancing a tree ensures optimal performance for operations such as insertion, deletion, and searching. An unbalanced tree can degrade to a linked list, leading to worst-case time complexities for these operations. Balanced trees maintain logarithmic height, which guarantees efficient performance by keeping operations close to logarithmic time complexity. This improves both search speed and insertion/deletion efficiency.\n\nB Trees\n\n"
        },
  
      {
        "title"    : "Vector Search",
        "url"      : "/vector-search/",
        "content"  : "Approximate Nearest Neighbors ANN\n\nHierarchical Navigable Small World (HNSW)\n"
        },
  
      {
        "title"    : "APIs",
        "url"      : "/api/",
        "content"  : "Define\n\nOpenAPI\n\nMS api lang?\n"
        },
  
      {
        "title"    : "Array Rotate",
        "url"      : "/array-rotate/",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n/*\nleft rotate a size n array by d  \n\n5 4\n1 2 3 4 5\n\n5 1 2 3 4\n\n*/\n\npackage main\n\nimport \"fmt\"\n\nfunc reverse(nums []int) {\n    for i, j := 0, len(nums)-1; i &lt; j; i, j = i+1, j-1 {\n        nums[i], nums[j] = nums[j], nums[i]\n    }\n}\n\nfunc leftRotateBySwapping(arr []int, d int) []int {\n\tn := len(arr)\n\td %= n // Handle cases where d is greater than n\n\n\t// Reverse the first part of the array (0 to d-1)\n\treverse(arr[:d])\n\n\t// Reverse the second part of the array (d to n-1)\n\treverse(arr[d:])\n\n\t// Reverse the entire array to obtain the final rotated array\n\treverse(arr)\n\n\treturn arr\n}\n\nfunc leftRotateDirect(arr []int, d int) []int {\n\tn := len(arr)\n\tresult := make([]int, n)\n\n\tfor i := 0; i &lt; n; i++ {\n\t\t// Calculate the new index after left rotation \n\t\tand store the element in the result slice\n\t\tresult[(i+n-d)%n] = arr[i]\n\t}\n\n\treturn result\n}\n\nfunc main() {\n\t// Example usage of the leftRotateBySwapping function\n\tarray := []int{1, 2, 3, 4, 5}\n\td := 2\n\trotatedArray := leftRotateBySwapping(array, d)\n\n\tfmt.Println(rotatedArray) // Print the rotated array\n}\n\n\n"
        },
  
      {
        "title"    : "Bfs Dfs Topo",
        "url"      : "/bfs-dfs-topo/",
        "content"  : "BFS\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\nfrom collections import deque\n\ndef bfs(graph, node):\n    q = deque([node])\n    res = []\n    seen = set()\n\n    while q:\n        n = q.popleft()\n        if n not in seen:\n            seen.add(n)\n            res.append(n)\n            q += graph.get(n, [])\n\n    return result\n\n\nDFS\n\nrecursive or stack\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\ndef dfs(graph, node, seen=None, res=None):\n    if not seen:\n        seen = set()\n    if not res: \n        stack = []\n\n    if node not in seen:\n        seen.add(node)\n        stack.append(node)\n        for n in graph.get(node, []):\n            dfs(graph, n, seen, stack)\n\n    return stack\n\n\nToposort\n\n\n  modify dfs to neighbors-first(add a node dfs result after its neighbors)\n  call dfs for all nodes\n  reverse the result\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\ndef topological_sort(graph):\n    def dfs(graph, node, seen=None, res=None):\n        if not seen:\n            seen = set()\n        if not res: \n            stack = []\n\n        if node not in seen:\n            seen.add(node)\n            for n in graph.get(node, []):\n                dfs(graph, n, seen, res)\n            stack.append(node) # after neighbors\n\n        return res\n\n    seen = set()\n    stack = []\n\n    for node in graph:\n        dfs(node)\n\n    # The topological sort is the reverse of the stack\n    return stack[::-1]\n\n\ndef test():\n    graph1 = {\n        1: [2, 3],\n        2: [4, 5],\n        3: [6],\n    }\n\n    assert bfs(graph1, 1) == [1, 2, 3, 4, 5, 6]\n    assert dfs(graph1, 1) == [1, 2, 4, 5, 3, 6]\n    assert toposort(graph1) == [1, 3, 6, 2, 5, 4]\n\n    graph2 = {\n        6: [4, 5],\n        5: [2, 0],\n        4: [0, 1],\n        2: [3],\n        3: [1],\n    }\n\n    assert bfs(graph2, 6) == [6, 4, 5, 0, 1, 2, 3]\n    assert dfs(graph2, 6) == [6, 4, 0, 1, 5, 2, 3]\n    assert toposort(graph2) == [6, 5, 2, 3, 4, 1, 0]\n\n\nif __name__ == \"__main__\":\n    test()\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\npackage main\n\nimport \"fmt\"\n\nfunc bfs(graph map[string][]string, name string) []string {\n\n\tvar searchQueue []string\n\tsearchQueue = append(searchQueue, graph[name]...)\n\tsearched := make(map[string]bool)\n\n\tres := []string{}\n\n\tfor len(searchQueue) &gt; 0 {\n\t\tvar person = searchQueue[0]\n\t\tsearchQueue = searchQueue[1:]\n\t\tpersonAlreadySearched := searched[person]\n\n\t\tif !personAlreadySearched {\n\t\t\tres = append(res, person)\n\t\t\tsearchQueue = append(searchQueue, graph[person]...)\n\t\t\tsearched[person] = true\n\t\t}\n\n\t}\n\treturn res\n\n}\n\nfunc dfs(graph map[string][]string, start_node string, visited map[string]bool) []string {\n\tif _, ok := visited[start_node]; !ok {\n\t\tvisited[start_node] = true\n\t\tfor _, node := range graph[start_node] {\n\t\t\tdfs(graph, node, visited)\n\t\t}\n\t}\n\n\tkeys := make([]string, 0, len(visited))\n\tfor k := range visited {\n\t\tkeys = append(keys, k)\n\t}\n\n\treturn keys\n\n}\n\nfunc main() {\n\tgraph := make(map[string][]string)\n\tgraph[\"you\"] = []string{\"alice\", \"bob\", \"claire\"}\n\tgraph[\"bob\"] = []string{\"anuj\", \"peggy\"}\n\tgraph[\"alice\"] = []string{\"peggy\"}\n\tgraph[\"claire\"] = []string{\"thom\", \"jonny\"}\n\tgraph[\"anuj\"] = []string{}\n\tgraph[\"peggy\"] = []string{}\n\tgraph[\"thom\"] = []string{}\n\tgraph[\"jonny\"] = []string{}\n\n\tfmt.Println(bfs(graph, \"you\"))\n\t// [alice bob claire peggy anuj thom jonny]\n\n\tfmt.Println(dfs(graph, \"you\", make(map[string]bool)))\n\t// [you alice peggy bob anuj claire thom jonny]\n\n}\n\n"
        },
  
      {
        "title"    : "Binary Search",
        "url"      : "/binary-search/",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\ndef binary_search(nums, target)-&gt;int:\n    while low &lt;= high:\n        if target at mid:\n            return mid \n        if nums[mid] &lt; target:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return -1\n\n"
        },
  
      {
        "title"    : "Binary Search Tree",
        "url"      : "/bst/",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\ndef sorted_list_to_bst(nums):\n    if not nums:\n        return None\n    \n    # Find the middle index of the list\n    mid = len(nums) // 2\n    \n    # Create a TreeNode with the middle element as the root\n    root = TreeNode(nums[mid])\n    \n    # Recursively build the left and right subtrees\n    root.left = sorted_list_to_bst(nums[:mid])\n    root.right = sorted_list_to_bst(nums[mid+1:])\n    \n    return root\n\n\n"
        },
  
      {
        "title"    : "Check Brackets",
        "url"      : "/check-brackets/",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\ndef check_brackets(expression):\n    stack = []\n    brackets = {'(': ')', '{': '}', '[': ']'}\n\n    for char in expression:\n        if char in brackets.keys():  # Opening bracket\n            stack.append(char)\n        elif char in brackets.values():  # Closing bracket\n            if not stack or brackets[stack.pop()] != char:\n                return False\n\n    return len(stack) == 0\n\n\n"
        },
  
      {
        "title"    : "Climb Stairs",
        "url"      : "/climb-stairs/",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\nfunc climbStairs(n int) int {\n    memo := map[int]int{\n        1:1,\n        2:2,\n    }\n    var climb func(n int) int\n\n    climb = func (n int) int {\n        _, ok := memo[n];\n        if !ok {\n            memo[n] = climb(n-1) + climb(n-2)\n        }\n        return memo[n] \n    }\n    return climb(n)\n}\n\n// or \n\nfunc minCostClimbingStairs(cost []int) int {\n    c1,c2 := cost[0], cost[1]\n    var min = func(a int,b int) int {\n        if a&lt;b{\n            return a\n        }\n        return b \n    }\n    \n    for i:=2; i&lt;len(cost); i++{\n        c1, c2 = c2, cost[i] + min(c1,c2)\n    }\n            \n    return min(c1,c2)         \n}\n\n"
        },
  
      {
        "title"    : "Code",
        "url"      : "/code/",
        "content"  : "\n"
        },
  
      {
        "title"    : "Coin Change",
        "url"      : "/coin-change/",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\ndef minimumCoinsRequired(coins: list[int], amount: int) -&gt; int:\n    # coinChange([1,2,5],11) == 3\n\n    # Initialize a list to store \n\t# the minimum number of coins needed for each amount.\n    min_coins = [0] + [float('inf')] * amount\n    \n    # Iterate through each sub-amount from 1 to 'amount'.\n    for sub_amount in range(1, amount + 1):\n        # Consider each coin denomination.\n        for coin in coins:\n            if coin &lt;= sub_amount:\n                # Update the minimum number of coins needed for the current sub-amount.\n                min_coins[sub_amount] = min(min_coins[sub_amount], min_coins[sub_amount - coin] + 1)\n    \n    # If it's not possible to make up the amount, return -1. \n\t# Otherwise, return the minimum count.\n    if min_coins[amount] == float('inf'):\n        return -1\n    else:\n        return min_coins[amount]\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\nfunc coinChange(coins []int, amount int) int {\n\t// Initialize a slice to store \n\t// the minimum number of coins needed for each amount.\n\tminCoins := make([]int, amount+1)\n\tfor i := 1; i &lt;= amount; i++ {\n\t\tminCoins[i] = math.MaxInt32\n\t}\n\n\t// Iterate through each sub-amount from 1 to 'amount'.\n\tfor subAmount := 1; subAmount &lt;= amount; subAmount++ {\n\t\t// Consider each coin denomination.\n\t\tfor _, coin := range coins {\n\t\t\tif coin &lt;= subAmount {\n\t\t\t\t// Update the minimum number of coins needed for the current sub-amount.\n\t\t\t\tif minCoins[subAmount-coin]+1 &lt; minCoins[subAmount] {\n\t\t\t\t\tminCoins[subAmount] = minCoins[subAmount-coin] + 1\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// If it's not possible to make up the amount, return -1. \n\t# Otherwise, return the minimum count.\n\tif minCoins[amount] == math.MaxInt32 {\n\t\treturn -1\n\t}\n\treturn minCoins[amount]\n}\n\nfunc main() {\n\tcoins := []int{1, 2, 5}\n\tamount := 11\n\tresult := coinChange(coins, amount)\n\tfmt.Println(result) // Output: 3\n}\n\n\n"
        },
  
      {
        "title"    : "Count Primes",
        "url"      : "/count-primes/",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\ndef countPrimes(self, n: int) -&gt; int:\n    \"\"\"\n    Mark non-primes, \n    2s, 3s, 5s\n    \"\"\"\n    primes = [True] * n\n    \n    for i in range(2, int(sqrt(n))+1):\n        if primes[i] is False: \n            continue \n        for j in range(i*i, n, i):\n            primes[j] = False\n            \n    return sum(1 if primes[i] else 0 for i in range(2,n))\n\n"
        },
  
      {
        "title"    : "Days Until Warmer Temperature",
        "url"      : "/days-until-warmer-temperature/",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\ndef dailyTemperatures(temps:list):\n    \"\"\"\n    how many days you would have to wait until a warmer temperature ? \n    \"\"\"\n    \n    stack = []  # Stack to store indices of temperatures\n    result = [0] * len(temps)  # Initialize the result list with zeros\n\n    for current_day in range(len(temps)):\n        # Check if the current day's temperature is warmer \n        # than temperatures in the stack\n        while stack and temps[current_day] &gt; temps[stack[-1]]:\n            # Get the index of the previous day\n            previous_day = stack.pop()  \n            result[previous_day] = current_day - previous_day  \n\n        # Push the current day's index onto the stack\n        stack.append(current_day)\n\n    return result\n\n\nt = [73, 74, 75, 71, 69, 72, 76, 73]\nassert dailyTemperatures(t) ==  [1, 1, 4, 2, 1, 1, 0, 0]\n\n"
        },
  
      {
        "title"    : "Decode String",
        "url"      : "/decode-string/",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\ndef decodeString(self, s):\n    \"\"\"\n    s = \"3[a]2[bc]\", return \"aaabcbc\".\n    s = \"3[a2[c]]\", return \"accaccacc\".\n    s = \"2[abc]3[cd]ef\", return \"abcabccdcdcdef\".\n    \"\"\"\n\n    stack = []\n    coeff = 0\n    current_str = \"\"\n\n    for c in s:\n        if c.isdigit():\n            coeff = coeff * 10 + int(c)\n        elif c == \"[\":\n            stack.append((current_str, coeff))\n            current_str = \"\"\n            coeff = 0\n        elif c == \"]\":\n            prev_str, coeff = stack.pop()\n            current_str = prevString + num * current_str\n        else:\n            current_str += c\n\n    return current_str\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\npublic class Solution {\n    public string DecodeString(string s) {\n        Stack&lt;(string, int)&gt; stack = new Stack&lt;(string, int)&gt;();\n        int coeff = 0;\n        string currentStr = \"\";\n\n        foreach (char c in s) {\n            if (char.IsDigit(c)) {\n                coeff = coeff * 10 + (c - '0');\n            } else if (c == '[') {\n                stack.Push((currentStr, coeff));\n                currentStr = \"\";\n                coeff = 0;\n            } else if (c == ']') {\n                var (prevStr, num) = stack.Pop();\n                var repeated = Enumerable.Repeat(currentStr, num)\n                currentStr = prevStr + string.Concat(repeated);\n            } else {\n                currentStr += c;\n            }\n        }\n\n        return currentStr;\n    }\n}\n\n"
        },
  
      {
        "title"    : "Dedup Game",
        "url"      : "/dedup-game/",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\nfrom typing import NamedTuple\n\nclass CharCount(NamedTuple):\n    char: str\n    count: int\n\ndef dedup_k(s: str, k: int) -&gt; str:\n    # Repeatedly dedup adjacent K letters until no longer can.\n\n    stack: list[CharCount] = []  \n    for c in s:\n        top = stack[-1]\n        if stack and top.char == c:\n            top.count += 1\n            if top.count == k:\n                stack.pop()\n        else:\n            stack.append(Charcount(c,1))\n\n    return \"\".join(c.char * c.count for c in stack)\n\n\nassert dedup_k(\"deeedbbcccbdaa\", 3) == \"aa\"\n\n\n"
        },
  
      {
        "title"    : "Delete Tree Node",
        "url"      : "/delete-tree-node/",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n\"\"\"\nroot = [5,3,6,2,4,null,7]\nkey = 3\n    5\n   / \\\n  3   6\n / \\   \\\n2   4   7\nGiven key to delete is 3. So we find the node with value 3 and delete it.\nOne valid answer is [5,4,6,2,null,null,7], shown in the following BST.\n    5\n   / \\\n  4   6\n /     \\\n2       7\nAnother valid answer is [5,2,6,null,4,null,7].\n    5\n   / \\\n  2   6\n   \\   \\\n    4   7\n\"\"\"\n    \ndef deleteNode(self, root, key):\n\n    if not root:\n        return\n\n    if key &gt; root.val:\n        root.right = self.deleteNode(root.right, key)\n\n    elif key &lt; root.val:\n        root.left = self.deleteNode(root.left, key)\n\n    # now the key is the root of a subtree\n    else:\n        # if the subtree does not have a left child, we just return its right child\n        # to its parent, and they will be connected on the higher level recursion.\n        if not root.left:\n            return root.right\n\n        # if it has a left child, we want to find the max val on the left subtree\n        # to replace the node we want to delete.\n        else:\n            # find the max value on the left subtree\n            tmp = root.left\n            while tmp.right:\n                tmp = tmp.right\n            root.val = tmp.val\n            root.left = self.deleteNode(root.left, tmp.val)\n        \n        return root\n\n"
        },
  
      {
        "title"    : "Diamater Of Binary Tree",
        "url"      : "/diamater-of-binary-tree/",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\nfunc diameterOfBinaryTree(root *TreeNode) int {\n    dia := 0\n    \n    var walk func(root *TreeNode) int\n\n    walk = func(root *TreeNode) int {\n        if root == nil{\n            return 0 \n        }\n        \n        var leftDepth = walk(root.Left)\n        \n        var rightDepth = walk(root.Right)\n                \n        maxDia = max(dia, leftDepth+rightDepth)\n\n        return max(leftDepth,rightDepth) + 1\n  \n    }\n    \n    walk(root)\n    \n    return maxDia \n    \n}\n\n\n"
        },
  
      {
        "title"    : "Dijkstra",
        "url"      : "/dijkstra/",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\nfrom collections import defaultdict\nfrom dataclasses import dataclass, field\nimport heapq\n\nCost = int\nNode = str\n\n@dataclass\nclass Edge:\n    source: Node\n    target: Node\n    cost: Cost\n\n@dataclass\nclass Graph:\n    # represent graph as an edge list \n    edges: defaultdict[Node, list[Edge]] = field(\n        default_factory=lambda: defaultdict(list)\n    )\n\n    def add_edge(self, edge: Edge):\n        self.edges[edge.source].append(edge)\n\n    def get_shortest_path(self, start: Node, finish: Node):\n        # dijkstra\n\n        costs: dict[Node, Cost] = {\n            node: float(\"infinity\") for node in self.edges\n        }\n        costs[start] = 0\n        parents: dict[Node, Node] = {}\n\n        priority_queue = [(0, start)]\n\n        while priority_queue:\n            current_distance, current_node = heapq.heappop(priority_queue)\n            if current_distance &gt; costs[current_node]:\n                continue\n            for edge in self.edges[current_node]:\n                cost_to_target = current_distance + edge.cost\n                if cost_to_target &lt; costs[edge.target]:\n                    costs[edge.target] = cost_to_target\n                    parents[edge.target] = current_node\n                    heapq.heappush(priority_queue, (cost_to_target, edge.target))\n\n        print(\"parents:\", parents)\n        print(\"minimum distances:\", costs)\n\n        path = [finish]\n        parent = parents.get(finish)\n        while parent:\n            path.append(parent)\n            if parent == start:\n                break\n            parent = parents.get(parent)\n\n        shortest_path = list(reversed(path))\n        print(\"shortest_path:\", shortest_path)\n        return shortest_path\n\n\ndef test_dijkstra():\n    cities = Graph()\n    edges = [\n        (\"ankara\", \"istanbul\", 6),\n        (\"ankara\", \"eskisehir\", 2),\n        (\"eskisehir\", \"istanbul\", 3),\n        (\"eskisehir\", \"izmir\", 12),\n        (\"istanbul\", \"izmir\", 8),\n    ]\n\n    for start, finish, distance in edges:\n        cities.add_edge(Edge(start, finish, distance))\n        cities.add_edge(Edge(finish, start, distance))\n\n    shortest_path = cities.get_shortest_path(\"ankara\", \"izmir\")\n    assert shortest_path == [\"ankara\", \"eskisehir\", \"istanbul\", \"izmir\"]\n\n\nif __name__ == \"__main__\":\n    test_dijkstra()\n\n"
        },
  
      {
        "title"    : "Dynamic",
        "url"      : "/dynamic/",
        "content"  : "It’s useful when you try to optimize something given a constraint\n\nIt only works if you can split the problem into discrete subproblems\n\nDiscrete is important here, if some subproblems are dependent, DP doesnt work\n\nCould be bottom-up or top-down\n\nTop down uses recursion and memoization\n\nBottom up iterates up from the base case\n\nGenerally top-down is easier because you don’t have to precisely define the order of subproblems\n\nBottom-up could be more performant because it doesn’t use a recursive call stack and it might not need to keep the whole recursion tree in memory\n\n1\n2\n3\n4\n5\n6\n7\n8\ndef dynamic(n):\n    if base case:\n        return  \n\n    if n not in memo:\n        memo[n] = recurrence relation \n    \n    return memo[n]\n\n\n1\n2\n3\n4\n5\n6\ndef fibonacci(n):\n    if n &lt; 2:\n        return n\n    if n not in memo.keys():\n        memo[n] = fib(n - 1) + fib(n - 2)\n    return memo.get(n)\n\n"
        },
  
      {
        "title"    : "Edit Distance",
        "url"      : "/edit-distance/",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\nimport \"fmt\"\n\ntype key struct {\n    x,y int \n}\n\nfunc dist(word1 string, word2 string, table map[key]int, i int, j int ) int {\n    if j == 0 {\n        return i\n    }\n    if i == 0 {\n        return j\n    }\n    \n    if val, ok := table[key{i,j}]; ok{\n        return val \n    }\n        \n    if word1[i-1] == word2[j-1] {\n        return dist(word1,word2,table, i-1, j-1)\n    } \n    \n    ins := dist(word1,word2,table, i-1, j ) + 1\n    del := dist(word1,word2,table, i, j-1 ) + 1\n    rep := dist(word1,word2,table, i-1, j-1 ) + 1\n\n    ans := min(del, ins ,rep)   \n    table[key{i,j}] = ans\n    return ans \n}\n\nfunc minDistance(word1 string, word2 string) int {\n    i, j := len(word1), len(word2)\n    table := map[key]int{}\n    return dist(word1,word2,table, i, j )\n}\n\n"
        },
  
      {
        "title"    : "Generate N Grams",
        "url"      : "/generate-n-grams/",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\ndef generate_ngrams(s, n):\n    # Convert to lowercases\n    s = s.lower()\n\n    # Replace all none alphanumeric characters with spaces\n    s = re.sub(r\"[^a-zA-Z0-9\\s]\", \" \", s)\n\n    # Break sentence in the token, remove empty tokens\n    tokens = [token for token in s.split(\" \") if token != \"\"]\n\n    n_grams = []\n\n    for i in range(len(tokens)):\n        n_gram = \" \".join(tokens[i : i + n])\n        n_grams.append(n_gram)\n\n    return n_grams\n\n"
        },
  
      {
        "title"    : "Generate Pascals Triangle",
        "url"      : "/generate-pascals-triangle/",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\"\"\"\nInput: 5\nOutput:\n[\n     [1],\n    [1,1],\n   [1,2,1],\n  [1,3,3,1],\n [1,4,6,4,1]\n]\n\"\"\"\n\ndef generate_pascals_triangle(self, numRows: int) -&gt; List[List[int]]:\n    pascal = list()\n\n    for i in range(1,numRows+1):\n        new_row = [1] * i\n        pascal.append(new_row)\n        for j in range(1,i-1):\n            pascal[i-1][j] = pascal[i-2][j-1] + pascal[i-2][j]\n\n    return pascal\n\nassert generate_pascals_triangle(5) == [\n    [1],\n    [1, 1],\n    [1, 2, 1],\n    [1, 3, 3, 1],\n    [1, 4, 6, 4, 1],\n]\n\n"
        },
  
      {
        "title"    : "Group Anagrams",
        "url"      : "/group-anagrams/",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\"\"\"\nInput: [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"],\nOutput:\n[\n  [\"ate\",\"eat\",\"tea\"],\n  [\"nat\",\"tan\"],\n  [\"bat\"]\n]\n\"\"\"\ndef groupAnagrams(self, strs: List[str]) -&gt; List[List[str]]:\n    ans = collections.defaultdict(list)\n    for s in strs:\n        count = [0]*26\n        for c in s:\n            count[ord(c)-ord(\"a\")] +=1\n\n        ans[tuple(count)].append(s)\n\n    return ans.values()\n\n"
        },
  
      {
        "title"    : "House Robber",
        "url"      : "/house-robber/",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\ndef rob(nums: List[int]) -&gt; int:\n    # max robbery, no adjacent homes\n    if not nums:\n        return 0\n\n    dp = {}\n    n = len(nums)\n\n    def decide(i):\n        if i &lt; 2:\n            return max(nums[: i + 1])\n\n        if i not in dp:\n            rob = decide(i - 2) + nums[i]\n            skip = decide(i - 1)\n            dp[i] = max(rob, skip)\n            \n        return dp[i]\n\n\n    return decide(n - 1)\n\n# since we use only last 2, it could be optimized to \ndef rob():\n    for num in nums:\n        prev1, prev2 = max(prev2+num, prev1), prev1\n\ndef rob_circular(nums: List[int]) -&gt; int:\n\n    return max of (0 to n-2) vs (1 to n-1) homes\n\ndef rob_tree(nums: List[int]) -&gt; int:\n    node.rob = node.val + left.skip + right.skip\n    node.skip = max(left.rob, left.skip) + max(right.rob, right.skip)\n\n\n"
        },
  
      {
        "title"    : "Invert Binary Tree",
        "url"      : "/invert-binary-tree/",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n\n\"\"\"\nInvert a binary tree.\nExample:\nInput:\n     4\n   /   \\\n  2     7\n / \\   / \\\n1   3 6   9\nOutput:\n     4\n   /   \\\n  7     2\n / \\   / \\\n9   6 3   1\n'''\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\n\"\"\"\n\ndef invertTree(self, root):\n    \"\"\"\n    :type root: TreeNode\n    :rtype: TreeNode\n    \"\"\"\n    if not root:\n        return None\n\n    right = self.invertTree(root.right)\n    left = self.invertTree(root.left)\n\n    root.right = left\n    root.left = right\n\n    return root\n\n\n"
        },
  
      {
        "title"    : "Is Mirror Tree",
        "url"      : "/is-mirror-tree/",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n/*\n    1\n   / \\\n  2   2\n / \\ / \\\n3  4 4  3\n*/\npublic boolean isSymmetric(TreeNode root) {\n    return isMirror(root, root);\n}\n\npublic boolean isMirror(TreeNode t1, TreeNode t2) {\n    if (t1 == null &amp;&amp; t2 == null) return true;\n    if (t1 == null || t2 == null) return false;\n    return (t1.val == t2.val)\n        &amp;&amp; isMirror(t1.right, t2.left)\n        &amp;&amp; isMirror(t1.left, t2.right);\n}\n\n\n\n"
        },
  
      {
        "title"    : "Least Num Of Perfect Squares",
        "url"      : "/least-num-of-perfect-squares/",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n/*\nGiven a positive integer n, \nfind the least number of perfect square numbers which sum to n.\n(for example, 1, 4, 9, 16, ...)\n\nExample 1:\n\nInput: n = 12\nOutput: 3 \nExplanation: 12 = 4 + 4 + 4.\n\n\nExample 2:\n\nInput: n = 13\nOutput: 2\nExplanation: 13 = 4 + 9.\n*/\n\nfunc numSquares(n int) int {\n    var perfect_squares []int\n    for i:= 1; i*i&lt;=n; i++{\n        if i*i == n{\n            return 1\n        }\n        perfect_squares = append(perfect_squares, i*i)\n    }\n    \n    ans := 0 \n    queue := []int{n}\n    \n    for len(queue) != 0  {\n        /*\n        ans 1, queue is [12] \n        ans 2, the paths are 1,4,9 -&gt; queue becomes [11 8 3], \n        following the paths 1,4,9, the new level becomes [10 7 2 7 4 2]\n        ans = 3, it returns at 4, the shortest path to 0 turns out to be 12 -&gt; 8 -&gt; 4 -&gt; 0 \n        */\n        ans += 1\n        var next_level []int\n        for _, num := range(queue){\n            for _, perf := range(perfect_squares){\n                if num == perf{\n                    return ans\n                }\n                if num&lt;perf{\n                    break\n                }\n                next_level = append(next_level, num-perf)\n            } \n            \n        }\n        queue = next_level \n    }\n    return ans \n}\n\n"
        },
  
      {
        "title"    : "Longest increasing subsequence",
        "url"      : "/lengthOfLIS/",
        "content"  : "https://leetcode.com/problems/longest-increasing-subsequence/\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n/*\nGiven an unsorted array of integers, find the length of longest increasing subsequence.\n\nExample:\n\nInput: [10,9,2,5,3,7,101,18]\nOutput: 4 \nExplanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4. \nNote:\n\nThere may be more than one LIS combination, it is only necessary for you to return the length.\nYour algorithm should run in O(n2) complexity.\nFollow up: Could you improve it to O(n log n) time complexity?\n*/\n\n\nfunc lengthOfLIS(nums []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    \n    lis := make([]int, len(nums)) // lis[i] holds the length of max LIS up to the index i \n\n    lis[0]=1 // there is number itself, so it starts from 1 \n    ans := 1 \n    \n    for i:=1; i&lt;len(nums); i++{\n        gt := 0 \n        for j:=0; j&lt;i; j++{\n            if nums[i]&gt;nums[j]{\n                // when you are greater than a previous number\n                // your sequence is at least as long as theirs or longer \n                gt = max(gt, lis[j]) \n            } \n        }\n        lis[i] = gt + 1 // the current number is bigger than gt numbers before, including \n        ans = max(ans,lis[i])\n    }\n    return ans \n}\n\n"
        },
  
      {
        "title"    : "Level Order",
        "url"      : "/level-order/",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\ndef levelOrder(self, root: \"TreeNode\") -&gt; \"List[List[int]]\":\n    levelorder = list()\n\n    current_level = [root]\n\n    while root and current_level:\n        next_level = list()\n        current_vals = list()\n\n        for node in current_level:\n            current_vals.append(node.val)\n\n            if node.left:\n                next_level.append(node.left)\n\n            if node.right:\n                next_level.append(node.right)\n\n        levelorder.append(current_vals)\n        current_level = next_level\n\n    return levelorder\n\n\n"
        },
  
      {
        "title"    : "Longest Common Prefix",
        "url"      : "/longest-common-prefix/",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\ndef longest_common_prefix(words) -&gt; \"str\":\n    if not words:\n        return \"\"\n\n    shortest_word = min(words, key=len)\n\n    for i, letter in enumerate(shortest_word):\n        for s in words:\n            if s[i] != letter:\n                return shortest_word[:i]\n\n    return shortest_word\n\n\nassert longest_common_prefix([\"flower\", \"flow\", \"flight\"]) == \"fl\"\n\n\n"
        },
  
      {
        "title"    : "Longest Common Subsequence",
        "url"      : "/longest-common-subsequence/",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\nExample 1:\n\nInput: text1 = \"abcde\", text2 = \"ace\" \nOutput: 3  \nExplanation: The longest common subsequence is \"ace\" and its length is 3.\nExample 2:\n\nInput: text1 = \"abc\", text2 = \"abc\"\nOutput: 3\nExplanation: The longest common subsequence is \"abc\" and its length is 3.\nExample 3:\n\nInput: text1 = \"abc\", text2 = \"def\"\nOutput: 0\nExplanation: There is no such common subsequence, so the result is 0.\n \n\nConstraints:\n\n1 &lt;= text1.length, text2.length &lt;= 1000\ntext1 and text2 consist of only lowercase English characters.\n\n\nimagine looong strings\n\nabncsdgs…..fsfsd   vs asfdagfd….fasdfas\n\nlets look at the last letters\n\nif I knew the common length up until there, i could just add 1 if the last letters are the same or add 0 if different\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\nfunc longestCommonSubsequence(word1, word2 string) int {\n\treturn lcsHelper(word1, word2, len(word1), len(word2))\n}\n\nfunc lcsHelper(word1, word2 string, m, n int) int {\n\t// Base case: If either of the words is empty, LCS is 0.\n\tif m == 0 || n == 0 {\n\t\treturn 0\n\t}\n\n\t// If the characters match, include them in the LCS.\n\tif word1[m-1] == word2[n-1] {\n\t\treturn 1 + lcsHelper(word1, word2, m-1, n-1)\n\t}\n\n\t// If characters don't match, take the maximum LCS from the previous states.\n\treturn max(lcsHelper(word1, word2, m-1, n), lcsHelper(word1, word2, m, n-1))\n}\n\nfunc max(a, b int) int {\n\tif a &gt; b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n\nhere we can save some calls by remembering the result of a previous call\n\nfor example look at the lcsHelper(word1, word2, m-1, n-1) call\n\nmaybe it’s called with the same args multiple times\n\nwhat if we save the result of this call to an array and look up if we need it again\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\nfunc longestCommonSubsequence(text1 string, text2 string) int {\n\tm, n := len(text1), len(text2)\n\tdp := make([][]int, m+1)\n\tfor i := range dp {\n\t\tdp[i] = make([]int, n+1)\n\t}\n\n\tfor i := 1; i &lt;= m; i++ {\n\t\tfor j := 1; j &lt;= n; j++ {\n\t\t\tif text1[i-1] == text2[j-1] {\n\t\t\t\tdp[i][j] = dp[i-1][j-1] + 1 \n\t\t\t} else {\n\t\t\t\tdp[i][j] = max(dp[i][j-1], dp[i-1][j])\n\t\t\t}\n\t\t}\n\t}\n\n\treturn dp[m][n]\n\n}\n\nfunc max(a, b int) int {\n\tif a &gt; b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n\n\nhere dp[i-1][j-1] keeps the result of lcsHelper(word1, word2, m-1, n-1) call\n\nwe can also follow dp a table\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\niterate the first row\n\ns vs e \n0 common  \n\n   |    s  e  a\n---|------------\n   | 0  0  0  0\ne  | 0  **0**  0  0\na  | 0  0  0  0\nt  | 0  0  0  0\n\n\nse vs e 1\n\n   |    s  e  a\n---|------------\n   | 0  0  0  0\ne  | 0  0  1  0\na  | 0  0  0  0\nt  | 0  0  0  0\n\nsea vs e 1\n\n   |    s  e  a\n---|------------\n   | 0  0  0  0\ne  | 0  0  1  1\na  | 0  0  0  0\nt  | 0  0  0  0\n\n\n2nd row \n\ns vs ea 0 \n\n   |    s  e  a\n---|------------\n   | 0  0  0  0\ne  | 0  0  1  0\na  | 0  0  0  0\nt  | 0  0  0  0\n\nse vs ea 1 \n   |    s  e  a\n---|------------\n   | 0  0  0  0\ne  | 0  0  1  0\na  | 0  0  1  0\nt  | 0  0  0  0\n\nsea vs ea 2 common\n   |    s  e  a\n---|------------\n   | 0  0  0  0\ne  | 0  0  1  0\na  | 0  0  1  2\nt  | 0  0  0  0\n\n3rd row \n\ns vs eat 0 \n   |    s  e  a\n---|------------\n   | 0  0  0  0\ne  | 0  0  1  0\na  | 0  0  1  2\nt  | 0  0  0  0\n\nse vs eat \n   |    s  e  a\n---|------------\n   | 0  0  0  0\ne  | 0  0  1  0\na  | 0  0  1  2\nt  | 0  0  1  0\n\nsea vs eat \n\n   |    s  e  a\n---|------------\n   | 0  0  0  0\ne  | 0  0  1  0\na  | 0  0  1  2\nt  | 0  0  1  2\n\n\n\nat each step, it’s enough to know the results of 3 prev calls\n\ndp[i-1][j-1], dp[i][j-1], dp[i-1][j]\n\nIt means we don’t have remember all the table\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\nfunc longestCommonSubsequence(word1, word2 string) int {\n\tm, n := len(word1), len(word2)\n\n\t// Ensure m is the smaller of the two lengths for space optimization.\n\tif m &gt; n {\n\t\tword1, word2 = word2, word1\n\t\tm, n = n, m\n\t}\n\n\t// Use a 1D DP slice to store the current row.\n\tdp := make([]int, n+1)\n\n\tfor i := 1; i &lt;= m; i++ {\n\t\tprev := 0 // Store the value from the previous row and column.\n\t\tfor j := 1; j &lt;= n; j++ {\n\t\t\ttemp := dp[j] // Store the current value in dp[j].\n\t\t\tif word1[i-1] == word2[j-1] {\n\t\t\t\tdp[j] = prev + 1\n\t\t\t} else {\n\t\t\t\tdp[j] = max(dp[j], dp[j-1])\n\t\t\t}\n\t\t\tprev = temp // Update prev with the stored value.\n\t\t}\n\t}\n\n\treturn dp[n]\n}\n\n\n\n"
        },
  
      {
        "title"    : "Longest Consecutive",
        "url"      : "/longest-consecutive/",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\ndef longestConsecutive(nums: List[int]) -&gt; int:\n    \"\"\"\n    for each num:\n        if num-1 in set, continue\n        check the streak \n    \"\"\"\n    numset = set(nums)\n    ans = 0\n\n    def streak(num):\n        streak = 1\n\n        while num + 1 in numset:\n            streak += 1\n            num += 1\n\n        return streak\n\n    for num in nums:\n        if num - 1 in numset:\n            continue\n        ans = max(ans, streak(num))\n\n    return ans\n\n\nassert longestConsecutive([100, 4, 200, 1, 3, 2]) == 4  # 1,2,3,4\n\n\n"
        },
  
      {
        "title"    : "Longest Diverse Str",
        "url"      : "/longest-diverse-str/",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\nimport heapq\nfrom heapq import heappush, heappop, heapify\n\ndef longestDiverseString(a: int, b: int, c: int) -&gt; str:\n    \n    ans = 0\n    \n    # get 2 from max, 1 from min \n    \n    minh = [a,b,c]\n    maxh = [a,b,c]\n\n    heapify(minh)\n    heapq._heapify_max(maxh)\n    \n    \n    maxnum = heappop(maxh)\n    minnum = heappop(minh)\n\n\n    while maxnum or minnum:\n        if maxnum:\n            print(\"maxh\",maxh)\n\n            if maxnum &gt; 1:\n                heappush(maxh, maxnum-2)\n                ans += 2\n            \n\n            else:\n                ans += 1\n            \n            if maxh:\n                maxnum = heappop(maxh)\n                \n        if minnum:\n            print(\"minh\",minh)\n            if minnum &gt; 0:\n                ans += 1\n                heappush(minh, minnum-1)\n\n                minnum = heappop(minh)\n\n    print(ans)\n    return ans \n\n\nlongestDiverseString(7,1,1)\n\n\n"
        },
  
      {
        "title"    : "Longest Valid Paranthesis",
        "url"      : "/longest-valid-paranthesis/",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\ndef longestValidParentheses(self, s: str) -&gt; int:\n    maxlen = 0\n\n    l = r = 0\n\n    for c in s:\n        if c == \"(\":\n            l += 1\n        else:\n            r += 1\n\n        if l == r:\n            maxlen = max(maxlen, 2 * l)\n        elif r &gt; l:\n            l = r = 0\n\n    l = r = 0\n\n    for c in reversed(s):\n        if c == \")\":\n            l += 1\n        else:\n            r += 1\n\n        if l == r:\n            maxlen = max(maxlen, 2 * l)\n        elif r &gt; l:\n            l = r = 0\n\n    return maxlen\n\n\nassert longestValidParentheses(\"()()())\") == 4\nassert longestValidParentheses(\"(()\") == 2\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n/*\nInput: \")()())\"\nOutput: 4\nExplanation: The longest valid parentheses substring is \"()()\"\n*/\n\n// stack, linear time and space \npublic int longestValidParentheses(String s) {\n    int maxans = 0;\n    Stack&lt;Integer&gt; stack = new Stack&lt;&gt;();\n    stack.push(-1);\n    for (int i = 0; i &lt; s.length(); i++) {\n        if (s.charAt(i) == '(') {\n            stack.push(i);\n        } else {\n            stack.pop();\n            if (stack.empty()) {\n                stack.push(i);\n            } else {\n                maxans = Math.max(maxans, i - stack.peek());\n            }\n        }\n    }\n    return maxans;\n}\n\n"
        },
  
      {
        "title"    : "Lowest Common Ancestor",
        "url"      : "/lowest-common-ancestor/",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n func lowestCommonAncestor(root, p, q *TreeNode) *TreeNode {\n     if root == nil || root == p || root == q {\n         return root \n     }\n     left := lowestCommonAncestor(root.Left,p,q)\n     right := lowestCommonAncestor(root.Right,p,q)\n     if left != nil &amp;&amp; right != nil {\n         return root \n     }\n     if left != nil{\n         return left \n     } else{\n         return right \n     }\n}\n\n"
        },
  
      {
        "title"    : "Max Path Sum",
        "url"      : "/max-path-sum/",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\ndef maxPathSum(self, root: TreeNode) -&gt; int:\n    \"\"\"\n       1\n      / \\\n     2   3\n\n    Output: 6\n\n    -10\n    / \\\n    9  20\n        /  \\\n    15   7\n\n    Output: 42\n\n\n    \"\"\"\n    max_sum = float(\"-inf\")\n\n    def walk(node):\n        if not node:\n            return 0\n\n        left = max(0, walk(node.left))\n        right = max(0, walk(node.right))\n\n        max_sum = max(max_sum, node.val + left + right)\n\n        return max(left, right) + node.val\n\n    walk(root)\n\n    return max_sum\n\n"
        },
  
      {
        "title"    : "Max Tree Depth",
        "url"      : "/max-tree-depth/",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\n\"\"\"\n   3\n   / \\\n  9  20\n    /  \\\n   15   7\n \nreturn : 3\n\"\"\"\n\ndef maxDepth(self, root: 'TreeNode') -&gt; 'int':\n    if not root:\n        return 0\n    left = self.maxDepth(root.left)\n    right =  self.maxDepth(root.right)\n\n    return max(left,right)+1\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    int maxDepth(TreeNode* root) {\n        if(!root){\n            return 0;\n        }\n        int left = maxDepth(root-&gt;left);\n        int right = maxDepth(root-&gt;right);\n        \n        return max(left,right)+1;\n\n    }\n};\n\n\n\n"
        },
  
      {
        "title"    : "Max Water",
        "url"      : "/max-water/",
        "content"  : "1\n2\nmax water among sticks:\n    move the shorter line\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\"\"\"\nInput: height = [1,8,6,2,5,4,8,3,7]\nOutput: 49\nExplanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. \nIn this case, the max area of water (blue section) the container can contain is 49.\n\"\"\"\ndef maxArea(self, height: List[int]) -&gt; int:\n    def area(l,r):\n        h = min(height[l],height[r])\n        w = r-l\n        return h*w\n\n    l = 0\n    r = len(height)-1\n    max_area = 0 \n\n    while l&lt;r:\n        max_area = max(max_area, area(l,r))\n        # move the shorter line \n        if height[l]&lt;height[r]:\n            l += 1\n        else:\n            r -= 1\n\n    return max_area \n\n"
        },
  
      {
        "title"    : "Maximal Square",
        "url"      : "/maximal-square/",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n\"\"\"\nGiven a 2D binary matrix filled with 0's and 1's, \nfind the largest square containing only 1's and return its area.\n1 0 1 0 0\n1 0 1 1 1\n1 1 1 1 1\n1 0 0 1 0\nOutput: 4\n\"\"\"\n\n\ndef maximalSquare(self, matrix: List[List[str]]) -&gt; int:\n    rows = len(matrix)\n    if rows:\n        cols = len(matrix[0])\n    else:\n        cols = 0\n\n    dp = [0] * (cols + 1)\n    maxsq = 0\n    prev = 0\n\n    for i in range(1, rows + 1):\n        for j in range(1, cols + 1):\n            temp = dp[j]\n            if matrix[i - 1][j - 1] == \"1\":\n                min_prev = min(dp[j - 1], prev)\n                min_cur = min(min_prev, dp[j])\n                dp[j] = min_cur + 1\n                maxsq = max(maxsq, dp[j])\n            else:\n                dp[j] = 0\n\n            prev = temp\n\n    return maxsq * maxsq\n\n\n"
        },
  
      {
        "title"    : "Min Covering Window",
        "url"      : "/min-covering-window/",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\ndef minWindow(self,s, t):\n    \"\"\"\n    Given a string S and a string T, \n    find the minimum window in S which will contain\n    all the characters in T in complexity O(n).\n\n    Input: S = \"ADOBECODEBANC\", T = \"ABC\"\n    Output: \"BANC\"\n\n    1. Use two pointers: start and end to represent a window.\n    2. Move end to find a valid window.\n    3. When a valid window is found, move start to find a smaller window.\n    \"\"\"\n    need = collections.Counter(t)            \n    missing = len(t)                         \n    start, end = 0, 0\n    left = 0\n    for right, char in enumerate(s, 1):       \n        #index j from 1\n        if need[char] &gt; 0:\n            missing -= 1\n        need[char] -= 1\n\n        # we found a window \n        if missing == 0:                  \n\n            # remove un-target chars from the start to find the real start\n            while left &lt; right and need[s[left]] &lt; 0: \n                need[s[left]] += 1\n                left += 1\n\n\n            if end == 0 or right-left &lt; end-start: \n                # update window\n                start, end = left, right \n\n            # we will move the left pointer, \n            # and the first char is a target, \n            # so we will need to find another one \n            need[s[left]] += 1   \n            missing += 1   \n\n            # update i to start+1 for next window\n            left += 1                         \n    return s[start:end]\n\nassert minWindow(\"ADOBECODEBANC\", \"ABC\") == \"BANC\"\n\n"
        },
  
      {
        "title"    : "Min Edit Distance",
        "url"      : "/min-edit-distance/",
        "content"  : "Longest Common Subsequence\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n/*\nInput: word1 = \"sea\", word2 = \"eat\"\nOutput: 2\nExplanation: You need one step to make \"sea\" to \"ea\" \nand another step to make \"eat\" to \"ea\".\n\nInput: word1 = \"leetcode\", word2 = \"etco\"\nOutput: 4\n*/\nfunc minSteps(word1 string, word2 string):\n    lcs_length = longestCommonSubsequence(word1, word2)\n    steps1 = len(word1) - lcs_length\n    steps2 = len(word2) - lcs_length\n    return steps1 + steps2\n\n"
        },
  
      {
        "title"    : "Min Path Sum",
        "url"      : "/min-path-sum/",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\nfunc minPathSum(grid [][]int) int {\n\t/*\n\tInput: grid = [ [1,3,1],[1,5,1],[4,2,1] ]\n\tOutput: 7\n\tExplanation: Because the path 1 → 3 → 1 → 1 → 1 minimizes the sum.\n\t*/\n    rows := len(grid)\n    cols := len(grid[0])\n    \n    // sum top row\n    for j := 1; j &lt; cols; j++ {\n        grid[0][j] += grid[0][j-1]\n    }\n    \n    // sum left column\n    for j := 1; j &lt; rows; j++ {\n        grid[j][0] += grid[j-1][0]\n    }\n    \n    for i := 1; i &lt; rows; i++ {\n        for j := 1; j &lt; cols; j++ {\n            grid[i][j] += min(grid[i-1][j],grid[i][j-1])\n        }\n    }\n    \n    return grid[rows-1][cols-1]\n}\n\n"
        },
  
      {
        "title"    : "Min Steps Notepad",
        "url"      : "/min-steps-notepad/",
        "content"  : "Min steps notepad\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n/*\nInitially on a notepad only one character 'A' is present. \n\nYou can perform two operations on this notepad for each step:\n\nCopy All: You can copy all the characters present on the notepad (partial copy is not allowed).\n\nPaste: You can paste the characters which are copied last time.\n \nGiven a number n. You have to get exactly n 'A' on the notepad \nby performing the minimum number of steps permitted. \n\nOutput the minimum number of steps to get n 'A'.\n\nExample:\nInput: 3\nOutput: 3\n\nExplanation:\nIntitally, we have one character 'A'.\nIn step 1, we use Copy All operation.\nIn step 2, we use Paste operation to get 'AA'.\nIn step 3, we use Paste operation to get 'AAA'.\n*/\n\nfunc minSteps(n int) int {\n    dp := make(map[int]int)\n    // the key insight is that it is always better to multiply\n    for i := 2; i&lt;=n; i++ {\n        dp[i] = i\n        // find the biggest factor of i\n        // then just copy it and paste it (i/j)-1 times \n        for j:= i/2; j&gt;1; j-- {\n            if i%j == 0 {\n                dp[i] = dp[j] + i/j // 1 copy + (i/j)-1 paste\n                break // we don't need a smaller factor \n            }\n        }\n    }\n    return dp[n]\n}\n\n\n"
        },
  
      {
        "title"    : "Partition Labels",
        "url"      : "/partition-labels/",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n\"\"\"\nA string S of lowercase English letters is given.\n\n We want to partition this string into as many parts as possible \n \n so that each letter appears in at most one part, \n \n and return a list of integers representing the size of these parts.\n\nInput: S = \"ababcbacadefegdehijhklij\"\n\nOutput: [9,7,8]\n\nExplanation:\n\nThe partition is \"ababcbaca\", \"defegde\", \"hijhklij\".\n\nThis is a partition so that each letter appears in at most one part.\n\nA partition like \"ababcbacadefegde\", \"hijhklij\" is incorrect, because it splits S into less parts.\n\"\"\"\n\ndef partitionLabels(self, S: str) -&gt; List[int]:\n    res = []\n\n    # Figure out the rightmost index for each letter \n    # and use it to separate sections\n    maxright = {c:i for i, c in enumerate(S) }\n\n    l = r = 0 \n    for i, c in enumerate(S):\n        r = max(r, maxright[c])\n        if r == i:\n            res.append(r-l+1)\n            # Reset the left pointer at the start of each new section.\n            l = i+1\n\n    return res \n\n"
        },
  
      {
        "title"    : "Pivot Index",
        "url"      : "/pivot-index/",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\"\"\"\nInput: \nnums = [1, 7, 3, 6, 5, 6]\nOutput: 3\nExplanation: \nThe sum of the numbers to the left of index 3 \n(nums[3] = 6) is equal to the sum of numbers to the right of index 3.\nAlso, 3 is the first index where this occurs.\n\"\"\"\n\n\ndef pivot_index(self, nums) -&gt; int:\n    n = len(nums)\n\n    total = sum(nums)\n    left = 0\n    right = total\n\n    for i in range(n):\n        right -= nums[i]\n        if right == left:\n            return i\n        left += nums[i]\n\n    return -1\n\n"
        },
  
      {
        "title"    : "Plus One",
        "url"      : "/plus-one/",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\nfunc plusOne(digits []int) []int {\n  /*\n  Given a non-empty array of digits representing a non-negative integer, plus one to the integer.\n  The digits are stored such that the most significant digit is at the head of the list, and each element in the array contain a single digit.\n  You may assume the integer does not contain any leading zero, except the number 0 itself.\n  Example 1:\n  Input: [1,2,3]\n  Output: [1,2,4]\n  Explanation: The array represents the integer 123.\n  Example 2:\n  Input: [4,3,2,1]\n  Output: [4,3,2,2]\n  Explanation: The array represents the integer 4321.\n  */\n    for i:= len(digits)-1; i&gt;=0; i-- {\n        if digits[i]&lt;9{\n            digits[i]++\n            return digits\n        }\n        digits[i] = 0\n    }\n    \n    //  cases like 100..   \n    newDigits := make([]int, len(digits)+1)\n    newDigits[0] = 1\n    return newDigits   \n}\n\n"
        },
  
      {
        "title"    : "Possible Morse",
        "url"      : "/possible-morse/",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n// UniqueMorseRepresentations returns number of possible morse codes\nfunc UniqueMorseRepresentations(words []string) int {\n    morse := []string{\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\n              \"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\n              \".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\n              \"--..\"}\n    tf := make(map[string]bool)\n    \n    for _, word := range words {\n        rep := \"\"\n        for _, r := range word {\n            c := rune(r)\n            i := int(c)-97 // 97 is ascii for a\n            rep +=  morse[i]\n        }\n        tf[rep] = true\n    }\n    return len(tf)\n}\n\n"
        },
  
      {
        "title"    : "Post Order Go",
        "url"      : "/post-order-go/",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\nimport \"fmt\"\n\n\ntype Node struct {\n    Val int\n    Children []*Node\n}\n\nfunc reverse(numbers []int) {\n\tfor i, j := 0, len(numbers)-1; i &lt; j; i, j = i+1, j-1 {\n\t\tnumbers[i], numbers[j] = numbers[j], numbers[i]\n\t}\n}\n\nfunc postorder(root *Node) []int {\n    ans := []int{}\n    stack := []*Node{} \n    for root != nil || len(stack) != 0 {\n        if root != nil {\n            ans = append(ans, root.Val)\n            for _, node := range(root.Children){\n                stack = append(stack, node)\n            }\n            root = nil \n        } else {\n            n := len(stack)\n            root = stack[n-1]\n            stack = stack[:n-1]\n        }\n    }\n    \n    reverse(ans)\n    \n    return ans \n}\n\n"
        },
  
      {
        "title"    : "Producer Consumer Problem",
        "url"      : "/producer-consumer-problem/",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n#include &lt;assert.h&gt;\n#include &lt;pthread.h&gt;\n#include &lt;semaphore.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;unistd.h&gt;\n#include \"common.h\"\n#include \"common_threads.h\"\n\nint max;\nint loops;\nint *buffer; \n\nint use_ptr  = 0;\nint fill_ptr = 0;\nint num_full = 0;\n\npthread_cond_t empty  = PTHREAD_COND_INITIALIZER;\npthread_cond_t fill   = PTHREAD_COND_INITIALIZER;\npthread_mutex_t m     = PTHREAD_MUTEX_INITIALIZER;\n\nint consumers = 1;\nint verbose = 1;\n\n\nvoid do_fill(int value) {\n    buffer[fill_ptr] = value;\n    fill_ptr = (fill_ptr + 1) % max;\n    num_full++;\n}\n\nint do_get() {\n    int tmp = buffer[use_ptr];\n    use_ptr = (use_ptr + 1) % max;\n    num_full--;\n    return tmp;\n}\n\nvoid *producer(void *arg) {\n    int i;\n    for (i = 0; i &lt; loops; i++) {\n\tMutex_lock(&amp;m);            // p1\n\twhile (num_full == max)     // p2\n\t    Cond_wait(&amp;empty, &amp;m); // p3\n\tdo_fill(i);                // p4\n\tCond_signal(&amp;fill);        // p5\n\tMutex_unlock(&amp;m);          // p6\n    }\n\n    // end case: put an end-of-production marker (-1) \n    // into shared buffer, one per consumer\n    for (i = 0; i &lt; consumers; i++) {\n\tMutex_lock(&amp;m);\n\twhile (num_full == max) \n\t    Cond_wait(&amp;empty, &amp;m);\n\tdo_fill(-1);\n\tCond_signal(&amp;fill);\n\tMutex_unlock(&amp;m);\n    }\n\n    return NULL;\n}\n                                                                               \nvoid *consumer(void *arg) {\n    int tmp = 0;\n    // consumer: keep pulling data out of shared buffer\n    // until you receive a -1 (end-of-production marker)\n    while (tmp != -1) { \n\tMutex_lock(&amp;m);           // c1\n\twhile (num_full == 0)      // c2 \n\t    Cond_wait(&amp;fill, &amp;m); // c3\n\ttmp = do_get();           // c4\n\tCond_signal(&amp;empty);      // c5\n\tMutex_unlock(&amp;m);         // c6\n    }\n    return NULL;\n}\n\nint\nmain(int argc, char *argv[])\n{\n    if (argc != 4) {\n\tfprintf(stderr, \"usage: %s &lt;buffersize&gt; &lt;loops&gt; &lt;consumers&gt;\\n\", argv[0]);\n\texit(1);\n    }\n    max = atoi(argv[1]);\n    loops = atoi(argv[2]);\n    consumers = atoi(argv[3]);\n\n    buffer = (int *) malloc(max * sizeof(int));\n    assert(buffer != NULL);\n\n    int i;\n    for (i = 0; i &lt; max; i++) {\n\tbuffer[i] = 0;\n    }\n\n    pthread_t pid, cid[consumers];\n    Pthread_create(&amp;pid, NULL, producer, NULL); \n    for (i = 0; i &lt; consumers; i++) {\n\tPthread_create(&amp;cid[i], NULL, consumer, (void *) (long long int) i); \n    }\n    Pthread_join(pid, NULL); \n    for (i = 0; i &lt; consumers; i++) {\n\tPthread_join(cid[i], NULL); \n    }\n    return 0;\n}\n\n"
        },
  
      {
        "title"    : "Repeatedstringmatch",
        "url"      : "/repeatedStringMatch/",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\ndef repeatedStringMatch(A: str, B: str) -&gt; int:\n    \"\"\"\n    minimum number of times you should repeat string a,\n    so that string b is a substring of it.\n    \"\"\"\n    if set(B).difference(set(A)):\n        return -1 \n    \n    rep = \"\"\n    count = 0\n    while len(rep) &lt; 10000:\n        rep += A      \n        count += 1\n        if B in rep:\n            return count \n    \n    return -1 \n    \na = \"abcd\"\nb = \"cdabcdab\"\nassert repeatedStringMatch(a,b) == 3 \n\n"
        },
  
      {
        "title"    : "Reverse Letters Only",
        "url"      : "/reverse-letters-only/",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n# with 2 pointers\ndef reverseOnlyLetters(S: str) -&gt; str:\n    n = len(S)\n    left = 0\n    right = n - 1\n    res = list(S)\n\n    while right &gt; 0 and not res[right].isalpha():\n        right -= 1\n\n    while left &lt; right:\n        if res[left].isalpha():\n            res[left], res[right] = res[right], res[left]\n            right -= 1\n            while right &gt; 0 and not res[right].isalpha():\n                right -= 1\n\n        left += 1\n\n    return \"\".join(res)\n\n\n#  a simpler way\ndef reverseOnlyLetters(S: str) -&gt; str:\n    stack = [c for c in S if c.isalpha()]\n    ans = [stack.pop() if c.isalpha() else c for c in S]\n\n    return \"\".join(ans)\n\n\nassert reverseOnlyLetters(\"ab-cd\") == \"dc-ba\"\nassert reverseOnlyLetters(\"a-bC-dEf-ghIj\") == \"j-Ih-gfE-dCba\"\nassert reverseOnlyLetters(\"Test1ng-Leet=code-Q!\") == \"Qedo1ct-eeLg=ntse-T!\"\n\n"
        },
  
      {
        "title"    : "Sliding Window Max",
        "url"      : "/sliding-window-max/",
        "content"  : "https://leetcode.com/problems/sliding-window-maximum/\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n\n/*\nInput: nums = [1,3,-1,-3,5,3,6,7], k = 3\nOutput: [3,3,5,5,6,7]\nExplanation: \nWindow position                Max\n---------------               -----\n[1  3  -1] -3  5  3  6  7       3\n 1 [3  -1  -3] 5  3  6  7       3\n 1  3 [-1  -3  5] 3  6  7       5\n 1  3  -1 [-3  5  3] 6  7       5\n 1  3  -1  -3 [5  3  6] 7       6\n 1  3  -1  -3  5 [3  6  7]      7\n*/\n\nfunc max(nums ...int) int {\n    max := nums[0]\n    for _, i := range nums {\n        if i &gt; max {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc maxSlidingWindow2(nums []int, k int) []int {\n    ans := []int{}    \n    for i:=0; i&lt;len(nums)-k+1;i++{\n        ans = append(ans, max(nums[i:i+k]...))\n    }\n    return ans \n}\n\n\nfunc maxSlidingWindow(nums []int, k int) []int {\n\tans := []int{}\n\tq := make([]int, 0)\n\n\tfor i := 0; i &lt; len(nums); i++ {\n\t\t// if a queue element is less than the new number, pop it \n\t\tfor len(q) &gt; 0 &amp;&amp; nums[i] &gt; q[len(q)-1] {\n\t\t\tq = q[:len(q)-1]\n\t\t}\n\n\t\tq = append(q, nums[i])\n\n\t\tindex_to_exit := i-k+1 // this index will go out of window in the next iteration \n\t\tif index_to_exit &gt;= 0 {\n\t\t    ans = append(ans, q[0])\n\t\t    // If the greatest element in q is about to exit window, remove it from q\n\t\t    if nums[index_to_exit] == q[0] {\n\t\t\tq = q[1:]\n\t\t    }\n\t\t}\n\t}\n\treturn ans\n}\n\n"
        },
  
      {
        "title"    : "Stocks With Cooldown",
        "url"      : "/stocks-with-cooldown/",
        "content"  : "Stocks with 1 day cooldown\n\nhttps://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/submissions/\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\nfunc maxProfit(prices []int) int {\n    /*\n    it's a state machine with 3 states \n\n    can_buy, can_sell, cool_down\n\n    can_buy -&gt; (buy) -&gt; can_sell -&gt; (sell) -&gt; cool_down -&gt; can_buy\n    */\n    \n    // the game starts with can_buy, \n    can_buy := 0  \n\n    // can_sell and cool_down are minInt because they will be possible after buying \n    can_sell := math.MinInt32 \n    cool_down :=  math.MinInt32 \n    \n    for _, p := range(prices) {\n        // either all has to be in a single line or we need to remember a prev value  \n        can_sell_prev := can_sell\n        can_sell = max(can_sell, can_buy-p) \n        can_buy = max(can_buy, cool_down) \n        cool_down = can_sell_prev + p \n    }\n    \n    // the game should end with no stock at hand \n    return max(can_buy, cool_down)\n}\n\n"
        },
  
      {
        "title"    : "String Compression",
        "url"      : "/string-compression/",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\ndef string_compression(string):\n    counter = 0\n    compressed = \"\"\n    previous_letter = string[0]\n\n    for letter in string:\n        if letter != previous_letter:\n            compressed = compressed + previous_letter + str(counter)\n            counter = 0\n        counter += 1\n        previous_letter = letter\n\n    compressed = compressed + previous_letter + str(counter)\n\n    return compressed\n\n\nassert string_compression(\"aaaabbcccccaaabb\") == \"a4b2c5a3b2\"\n\n"
        },
  
      {
        "title"    : "Three Sum Closest",
        "url"      : "/three-sum-closest/",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n\"\"\"\nThree sum \n\nfind 3 integers summing closest to a target, \n\nreturn their sum \n\nInput: nums = [-1,2,1,-4], target = 1\nOutput: 2\nExplanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).\n\"\"\"\n\ndef threeSumClosest(self, nums: List[int], target: int) -&gt; int:\n    \"\"\"\n    sort the list \n\n    for each num:\n        start left and right pointers at 0 and n-1 \n\n        if left + right + num is target return \n        if the sum is closer, update the result \n\n        if less then sum, move left, else move right \n    \"\"\"\n    \n    n = len(nums)\n    \n    nums.sort()\n\n    res = None\n    \n    resdif = float(\"inf\")\n    \n\n    for i,num in enumerate(nums):\n\n        \n        # skip dups \n        if i&gt;0 and num==nums[i-1]: \n            continue\n\n        l = i+1\n        r = n-1\n        \n        while l&lt;r:\n\n            total = num + nums[l] + nums[r] \n\n            if total == target:\n                return target \n            \n            # update diff \n            diff = abs(total-target)\n            if diff &lt; resdif:\n                res = total\n                resdif = diff \n                \n            \n            if total &lt; target:\n                l += 1\n            else:\n                r -= 1\n\n    return res \n\n"
        },
  
      {
        "title"    : "Threesum",
        "url"      : "/threeSum/",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n\nfunc threeSum(nums []int) [][]int {\n    // Sort the array\n    sort.Ints(nums)\n    var res [][]int\n    // Loop through the array\n    for i := 0; i &lt; len(nums)-2; i++ {\n        // Skip duplicates\n        if i &gt; 0 &amp;&amp; nums[i] == nums[i-1] {\n            continue\n        }\n        // Set left and right pointers\n        l, r := i+1, len(nums)-1\n        // Loop through the array\n        for l &lt; r {\n            // Calculate sum of three numbers\n            sum := nums[i] + nums[l] + nums[r]\n            if sum &lt; 0 {\n                l++\n            } else if sum &gt; 0 {\n                r--\n            } else {\n                // Add triplet to result slice\n                res = append(res, []int{nums[i], nums[l], nums[r]})\n                // Skip duplicates\n                for l &lt; r &amp;&amp; nums[l] == nums[l+1] {\n                    l++\n                }\n                for l &lt; r &amp;&amp; nums[r] == nums[r-1] {\n                    r--\n                }\n                // Move pointers\n                l++\n                r--\n            }\n        }\n    }\n    return res\n}\n\n\n"
        },
  
      {
        "title"    : "Tree Codec Py",
        "url"      : "/tree-codec-py/",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\nclass Codec:\n\n    def serialize(self, root):\n        \"\"\"Encodes a tree to a single string.\n        \n        :type root: TreeNode\n        :rtype: str\n        \"\"\"\n        def preorder(root):\n            vals = list()\n            def go(node):\n                if node:\n                    vals.append(str(node.val))\n                    go(node.left)\n                    go(node.right)\n                else:\n                    vals.append(\"#\")\n            \n            go(root)\n            return vals\n        \n        vals = preorder(root)\n        return \" \".join(vals)      \n                \n    def deserialize(self, data):\n        \"\"\"Decodes your encoded data to tree.\n        \n        :type data: str\n        :rtype: TreeNode\n        \"\"\"\n                \n        def construct():\n            val = next(vals)\n            if val == \"#\":\n                return None\n            node = TreeNode(int(val))\n            node.left= construct()\n            node.right= construct()\n            \n            return node\n\n        vals = iter(data.split())\n        root = construct()\n        \n        return root\n\n\n"
        },
  
      {
        "title"    : "Tree Traversals",
        "url"      : "/tree-traversals/",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\ninorder(root):\n\n    walk(node):\n        if node:\n            walk(left)\n            visit node \n            walk(right)\n\n    walk(root)\n\n\ninorder(root):\n    # return left, root, right\n\n    stack = []\n\n    while stack or root:\n        if root:\n             add root to stack \n             go left\n\n        else:\n            get node from stack \n            visit node \n            go right \n\n\npreorder(root):\n    # return root, left, right\n\n    stack = []\n\n    while stack or root:\n        if root:\n            add root to stack \n            visit node \n            go left \n\n        else:\n            get node from stack \n            go right\n\npostorder(root):\n    # return left, right, root \n    # visit in reverse \n\n    stack = []\n\n    while stack or root:\n        if root:\n            add root to stack \n             visit node \n             go right \n\n        else:\n            get node from stack \n            go left\n\n    return reverse visited\n\n\n"
        },
  
      {
        "title"    : "Trie Py",
        "url"      : "/trie-py/",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\nclass Trie:\n    \"\"\" or prefix tree \"\"\"\n    def __init__(self):\n        \"\"\"\n        a child of a Trie is a Trie        \n        \"\"\"\n        self.trie = {}\n        \n    def insert(self, word: str) -&gt; None:\n        \"\"\"\n        Inserts a word into the trie.\n        \"\"\"\n        t = self.trie\n        for letter in word:\n            if letter not in t:\n                t[letter] = {}\n            t = t[letter]\n        t[\"#\"] = \"#\"  \n\n    def search(self, word: str) -&gt; bool:\n        \"\"\"\n        Returns if the word is in the trie.\n        \"\"\"\n        return self.startsWith(word + '#')\n        \n\n    def startsWith(self, prefix: str) -&gt; bool:\n        \"\"\"\n        Returns if there is any word in the trie that starts with the given prefix.\n        \"\"\"\n        t = self.trie \n        for letter in prefix:\n            if letter not in t:\n                return False\n            t = t[letter]\n        return True\n\ndef test_trie():\n  trie = Trie()\n  trie.insert(\"apple\")\n  assert trie.search(\"apple\") is True\n  assert trie.search(\"app\") is False\n  assert trie.startsWith(\"app\") is True\n  trie.insert(\"app\")\n  assert trie.search(\"app\") is True\n\n"
        },
  
      {
        "title"    : "Unique Bst",
        "url"      : "/unique-bst/",
        "content"  : "https://leetcode.com/problems/unique-binary-search-trees\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\"\"\"\nInput: 3\nOutput: 5\nExplanation:\nGiven n = 3, there are a total of 5 unique BST's:\n\n   1         3     3      2      1\n    \\       /     /      / \\      \\\n     3     2     1      1   3      2\n    /     /       \\                 \\\n   2     1         2                 3\n\"\"\"\ndef numTrees(self, n: int) -&gt; int:  \n    dp = [0] * (n+1) # d[n] is the possible num of trees for n elements \n    dp[0] = dp[1] = 1 # there are only 1 possible tree for no element or 1 element \n\n    for i in range(2,n+1): # we know numTrees for 0 and 1 elements so we start from 2  \n        for j in range(1,i+1): \n            # eg. d2 = d1d1, d3= d2 + d1d1 + d2, d4 = d3 + d1d2+ d2d1 + d3\n            dp[i] += dp[j-1] * dp[i-j]\n\n    return dp[n]\n\n\n\n"
        },
  
      {
        "title"    : "Ways To Target Sum",
        "url"      : "/ways-to-target-sum/",
        "content"  : "Target Sum\n\nhttps://leetcode.com/problems/target-sum/\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n/*\nYou are given a list of non-negative integers, a1, a2, ..., an, and a target, S. Now you have 2 symbols + and -. For each integer, you should choose one from + and - as its new symbol.\n\nFind out how many ways to assign symbols to make sum of integers equal to target S.\n\nExample 1:\n\nInput: nums is [1, 1, 1, 1, 1], S is 3. \nOutput: 5\nExplanation: \n\n-1+1+1+1+1 = 3\n+1-1+1+1+1 = 3\n+1+1-1+1+1 = 3\n+1+1+1-1+1 = 3\n+1+1+1+1-1 = 3\n\nThere are 5 ways to assign symbols to make the sum of nums be target 3.\n*/\n\ntype pair struct {\n    x,y int \n}\n\nfunc calc(nums[]int, i int, current_sum int, S int, memo map[pair]int) int {\n    if count, ok := memo[pair{i,current_sum}]; ok{\n        return count\n    }\n    \n    if i == len(nums) {\n        if current_sum == S {\n            return 1\n        } else {\n            return 0 \n        }\n    }\n    \n    pos := calc(nums, i+1, current_sum+nums[i],S, memo)\n    neg := calc(nums, i+1, current_sum-nums[i],S, memo)\n    memo[pair{i,current_sum}] = pos + neg \n    return memo[pair{i,current_sum}]\n    }\n\n\nfunc findTargetSumWays(nums []int, S int) int {\n    memo := map[pair]int{}\n    return calc(nums, 0,0,S, memo)\n}\n\n\n"
        },
  
      {
        "title"    : "Word Break",
        "url"      : "/word-break/",
        "content"  : "Word Break\n\nhttps://leetcode.com/problems/word-break/\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n\"\"\"\nGiven a non-empty string s and a dictionary wordDict \n\ncontaining a list of non-empty words,\n\ndetermine if it can be segmented into \n\na space-separated sequence of one or more dictionary words.\n\nNote:\n\nThe same word in the dictionary may be reused multiple times in the segmentation.\n\nYou may assume the dictionary does not contain duplicate words.\n\nExample 1:\n\nInput: s = \"leetcode\", wordDict = [\"leet\", \"code\"]\nOutput: true\nExplanation: Return true because \"leetcode\" can be segmented as \"leet code\".\nExample 2:\n\nInput: s = \"applepenapple\", wordDict = [\"apple\", \"pen\"]\nOutput: true\nExplanation: Return true because \"applepenapple\" can be segmented as \"apple pen apple\".\n             Note that you are allowed to reuse a dictionary word.\nExample 3:\n\nInput: s = \"catsandog\", wordDict = [\"cats\", \"dog\", \"sand\", \"and\", \"cat\"]\nOutput: false\n\"\"\"\n\ndef wordBreak(self, s: str, wordDict: List[str]) -&gt; bool:\n    \"\"\"\n    this can be broken down to subproblems\n    if we know a string is ok up to the 42nd index, it's enough to check from there \n    a list can keep track of this, ok = []\n    if up to ith index of s is ok, ok[i] will be True \n    eg. \n    s=\"cars\" \n    wordDict = [car, ca, rs]\n    start walking from the start\n    ok = [t,f,f,f,f,f]\n    c, ca -&gt; yes ca in dict, so ok becomes [t,f,t,f,f]\n    a, ar, ars nope\n    r, rs -&gt; yes rs in dict, ok becomes [t,f,t,f,t]\n    \"\"\"\n\n    ok = [True] + [False] * (len(s))\n\n    for i in range(1,len(s)+1): \n        for j in range(i): # j is the start index\n            # start point has to be ok, \n            # otherwise starting from here does not make sense\n            if ok[j] and s[j:i] in wordDict: \n                    # we are ok up to index j \n                    ok[i] = True\n                    break \n    return ok[-1]\n\n"
        },
  
      {
        "title"    : "COM - Component Object Model",
        "url"      : "/com/",
        "content"  : "chap01.pdf (pearsoncmg.com)\n"
        },
  
      {
        "title"    : "Concurrency",
        "url"      : "/concurrency/",
        "content"  : "Parallelism includes multiple cores while concurrency is running multiple tasks simultaneously, not exactly at the same time but progressing one task a bit and switching to another\n\nActor model\n\nAn actor is an isolated process managed by the language runtime.\n\nErlang and Elixir natively implements them as distributed actors are core to the language design\n\nAkka tries to bring actor support to JVM\n\nCSP\n\nGo and Clojure use this model. Sequential processes can be OS processes but also threads or green-threads managed at the user-space\n\nGo routines communicating with channels\n\nIt works well but it’s limited to a single runtime, even the two go processes on the same machine cannot coordinate with this, let alone distributed machines\n\nIs Scala’s actors similar to Go’s coroutines? - Stack Overflow\n\nWhy you can have millions of Goroutines but only thousands of Java Threads (rcoh.me)\n\nConcurrent Programming — Erlang System Documentation v27.0.1\n\n"
        },
  
      {
        "title"    : "Array",
        "url"      : "/array/",
        "content"  : "\n"
        },
  
      {
        "title"    : "Bloom Filters",
        "url"      : "/bloom-filters/",
        "content"  : "\n"
        },
  
      {
        "title"    : "Data Structures",
        "url"      : "/data-structures/",
        "content"  : "Ask HN: What are some cool but obscure data structures you know about? - Hacker News (ycombinator.com)\n"
        },
  
      {
        "title"    : "Graph",
        "url"      : "/graph/",
        "content"  : "1\n2\n3\n4\n5\ndfs(node):\n    if node is not visited:\n        visit node \n        for n in neighbours:\n            dfs(n)\n\n\n1\n2\n3\n4\n5\n6\n7\nbfs(start_node):\n    add start_node to q \n    while q:\n        get a node from q\n        if node is not visited:\n            add neighbors to q \n            visit node \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\ntoposort(graph):  \n\n    tfs(node):\n        for n in neighbours:\n            if n is not seen:\n                tfs(n)\n\n        if node is not seen:\n            mark as seen \n            add to stack \n\n    for node in graph:\n        tfs(node) \n\n    return reversed stack \n\n\n"
        },
  
      {
        "title"    : "Hash Table",
        "url"      : "/hash-table/",
        "content"  : "\n  Chain with linked lists, O(n) worst-case lookup\n  Chain with binary search trees, O(log n) worst-case\n\n\n"
        },
  
      {
        "title"    : "Heap",
        "url"      : "/heap/",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\nimport heapq\n\n\nclass KthLargest:\n    \"\"\"\n    find the kth largest element in a stream.\n    in the sorted order, not the kth distinct element.\n    \"\"\"\n\n    def __init__(self, k: int, nums: List[int]):\n        self.pool = nums\n        self.k = k\n        heapq.heapify(self.pool)\n        while len(self.pool) &gt; k:\n            heapq.heappop(self.pool)\n\n    def add(self, val: int) -&gt; int:\n        if len(self.pool) &lt; self.k:\n            heapq.heappush(self.pool, val)\n        elif val &gt; self.pool[0]:\n            heapq.heapreplace(self.pool, val)\n        return self.pool[0]\n\n\nKthLargest(3, [4, 5, 8, 2])\nkthLargest.add(3)  # returns 4\nkthLargest.add(5)  # returns 5\nkthLargest.add(10)  # returns 5\nkthLargest.add(9)  # returns 8\nkthLargest.add(4)  # returns 8\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\npackage main\n\nimport (\n    \"fmt\"\n    \"sort\"\n)\n\ntype KthLargest struct {\n    k   int\n    pool []int\n}\n\nfunc NewKthLargest(k int, nums ...int) *KthLargest {\n    return &amp;KthLargest{\n        k:   k,\n        pool: make([]int, 0, k),\n    }\n}\n\nfunc (kl *KthLargest) Add(val int) int {\n    if len(kl.pool) &lt; kl.k {\n        heap.Push(&amp;kl.pool, val)\n    } else {\n        if val &gt; kl.pool[0] {\n            heap.Replace(&amp;kl.pool, val)\n        }\n    }\n    return kl.pool[0]\n}\n\nfunc (kl *KthLargest) Len() int {\n    return len(kl.pool)\n}\n\nfunc main() {\n    kl := NewKthLargest(3, 4, 5, 8, 2)\n    fmt.Println(kl.Add(3)) // prints 4\n    fmt.Println(kl.Add(5)) // prints 5\n    fmt.Println(kl.Add(10)) // prints 5\n    fmt.Println(kl.Add(9)) // prints 8\n    fmt.Println(kl.Add(4)) // prints 8\n}\n\n"
        },
  
      {
        "title"    : "Hyperloglog",
        "url"      : "/hyperloglog/",
        "content"  : "redis/src/hyperloglog.c at unstable · redis/redis (github.com)\n\n"
        },
  
      {
        "title"    : "Linked List",
        "url"      : "/linked-list/",
        "content"  : "Detect cycle: fast and slow pointers, if the fast finds the end then no cycle\n\nSort: find the middle with fast and slow pointers then merge\n\nGet intersection: iterate lists with two pointers, if one becomes null then set it to the head of the other list, This assumes there is an intersection. If not it will be an infinite loop so return after a few iterations.\n\nRemove nth from end: use two pointers, one is n steps ahead of the other. When the first pointer reaches the end, the second pointer will be at the nth from the end.\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\ndef has_cycle(head):\n    if not head:\n        return False\n    slow, fast = head, head.next\n    \n    while slow != fast:\n        if fast is None or fast.next is None:\n            return False\n        slow = slow.next\n        fast = fast.next.next\n    \n    return True\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\ndef find_middle(head):\n    if not head:\n        return None\n\n    slow = head\n    fast = head\n\n    while fast and fast.next:\n        slow = slow.next\n        fast = fast.next.next\n\n    return slow\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\ndef sorted_list_to_bst(head):\n    if not head:\n        return None\n\n    # Find the middle element of the linked list\n    middle = find_middle(head)\n\n    # Create a TreeNode using the middle element\n    root = TreeNode(middle.val)\n\n    # If there's only one element in the list, return the root\n    if middle == head:\n        return root\n\n    # Recursively construct the left and right subtrees\n    root.left = sorted_list_to_bst(head)\n    root.right = sorted_list_to_bst(middle.next)\n\n    return root\n\n\n1\n2\n3\n4\n5\n6\n7\n8\ndef getIntersectionNode(self, headA: ListNode, headB: ListNode) -&gt; ListNode:\n    p1, p2 = headA, headB\n\n    while p1 or p2:\n        if p1 is p2:\n            return p1 \n        p1 = headB if not p1 else p1.next\n        p2 = headA if not p2 else p2.next\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\"\"\"\nInput:  1-&gt;2-&gt;6-&gt;3-&gt;4-&gt;5-&gt;6, val = 6\nOutput: 1-&gt;2-&gt;3-&gt;4-&gt;5\n\"\"\"\n\ndef removeElements(self, head: ListNode, val: int) -&gt; ListNode:\n    \n    head, head.next = ListNode(0), head\n    p = head\n    \n    while p.next:\n        if p.next.val == val:\n            p.next = p.next.next\n        else:\n            p = p.next\n            \n    return head.next\n\n\n"
        },
  
      {
        "title"    : "Pointers",
        "url"      : "/pointers/",
        "content"  : "\n"
        },
  
      {
        "title"    : "Quad Tree",
        "url"      : "/quad-tree/",
        "content"  : "\n"
        },
  
      {
        "title"    : "Queue",
        "url"      : "/queue/",
        "content"  : "\n"
        },
  
      {
        "title"    : "R Tree",
        "url"      : "/r-tree/",
        "content"  : "\n"
        },
  
      {
        "title"    : "Skip Lists",
        "url"      : "/skiplists/",
        "content"  : "Searching sorted data is a common use case\n\nFor static data, you could simply use binary search over an array\n\nFor dynamic data, one way is to balance a tree as you insert new elements.\n\nA simpler alternative is a skip list. It has multiple linked lists and it balances probabilistically.\n\nA skip list uses log-linear memory while a tree uses linear. Both have logarithmic search and insert time. But the former is simpler to implement, better for concurrent operations due to this simplicity, better for caching due to its linear structure\n\nExample\n\nData:\n\nConsider inserting the elements 10, 20, 30, 40, and 50 into a skip list.\n\nInitial Skip List (empty):\n\n1\n2\n3\n4\nLevel 3: None \nLevel 2: None \nLevel 1: None \nLevel 0: None\n\n\nInserting 10:\n\n\n  Randomly determine the level, e.g., level 1.\n\n\n1\n2\n3\n4\nLevel 3: None \nLevel 2: None \nLevel 1: [10] \nLevel 0: [10]\n\n\nInserting 20:\n\n\n  Randomly determine the level, e.g., level 0.\n\n\n1\n2\n3\n4\nLevel 3: None \nLevel 2: None \nLevel 1: [10] \nLevel 0: [10] -&gt; [20]\n\n\nInserting 30:\n\n\n  Randomly determine the level, e.g., level 2.\n\n\n1\n2\n3\n4\nLevel 3: None \nLevel 2: [30] \nLevel 1: [10] -&gt; [30] \nLevel 0: [10] -&gt; [20] -&gt; [30]\n\n\nInserting 40:\n\n\n  Randomly determine the level, e.g., level 0.\n\n\n1\n2\n3\n4\nLevel 3: None \nLevel 2: [30] \nLevel 1: [10] -&gt; [30] \nLevel 0: [10] -&gt; [20] -&gt; [30] -&gt; [40]\n\n\nInserting 50:\n\n\n  Randomly determine the \nlevel, e.g., \nlevel 1.\n\n\n1\n2\n3\n4\n5\n\nLevel 3: None \nLevel 2: [30] \nLevel 1: [10] -&gt; [30] -&gt; [50] \nLevel 0: [10] -&gt; [20] -&gt; [30] -&gt; [40] -&gt; [50]\n\n\nVisual Representation\n\nSkip List After All Insertions:\n\n1\n2\n3\n4\n5\n\nLevel 3: None \nLevel 2: [30] \nLevel 1: [10] -&gt; [30] -&gt; [50] \nLevel 0: [10] -&gt; [20] -&gt; [30] -&gt; [40] -&gt; [50]\n\n\nSearch Example\n\n\n  Search for 40:\n    \n      Start at the top level: Move to 30.\n      Move to Level 1: 30 -&gt; 50 (stop, greater than 40).\n      Move to Level 0: 30 -&gt; 40 (found).\n    \n  \n\n\n"
        },
  
      {
        "title"    : "Stack",
        "url"      : "/stack/",
        "content"  : "\n"
        },
  
      {
        "title"    : "String",
        "url"      : "/string/",
        "content"  : "\n"
        },
  
      {
        "title"    : "Discussion Topics",
        "url"      : "/discussion-topics/",
        "content"  : "Hardware\n\nCPU\n\nL1/L2 caches\n\nMemory\n\nDisk\n\nBytes\n\nFile\n\nObject\n\nSerialize/Deserialize\n\nFile formats\n\nUnicode/UTF8\n\nOS\n\nvirtualization\n\npersistence - file system\n\nConcurrency/parallelism\n\nsyscall\n\nsignals/hardware interrupts\n\nprocess/thread\n\ncode-data-stack-heap\n\nbash\n\nInter-process communication\n\nmessage passing, go channels, actor frameworks\n\nthread sync, locks, semaphores, mutexes, monitors\n\nLanguages\n\ncompiler/interpreter\n\nobject\n\nvalue vs reference\n\ngarbage collection\n\nDatabases\n\ntuples\n\nrelations \n1-1 \n1-n \nn-n\n\nB-tree\n\nLSM tree\n\nnormalization\n\nstar schema- fact and dimensions\n\nOLTP/OLAP\n\nSQL\n\nindexes\n\npartitioning\n\nreplication\n\nwrite-ahead log\n\ncolumnar, key-value, graph\n\nmessage queues, AMQP, Kafka\n\nDistributed systems\n\nLeader election\n\nTime, vector clocks\n\nNetworks\n\nsockets\n\nTCP/IP model\n\nWeb\n\nHTTP\n\n1.0 simple \n1.1 reuse connections \n2 binary+multiplex \n3 QUIC\n\nverbs\n\nheaders\n\nUDP/TCP\n\nWebsocket\n\nSecurity\n\nCSP\n\nXSS\n\nCSRF\n\nAuth\n\nCORS\n\nPublic-key cryptography\n\nHow to store passwords?\n\ncookies\n\ncertificates\n\nData Engineering\n\nSQL\n\nETL\n\nData flow\n\nData Science\n\nStatistics\n\nHypothesis testing\n\nML\n\nregression\n\nclassification\n\nBayes\n\nSWE\n\nObservability\n\nLogging vs telemetry\n\nMonitoring\n\nSystem Design\n\nOOP\n\nDDD\n\nSOLID\n\nTesting\n\ntypes\n\ndependency injection\n\ntools\n\nPackaging\n\ndependency management\n\ncontainers\n\norchestrators\n\nCI/CD\n\n"
        },
  
      {
        "title"    : "The fine line between easy and very hard",
        "url"      : "/easy-vs-hard-in-cs/",
        "content"  : "\n\n\n\n"
        },
  
      {
        "title"    : "Encodings",
        "url"      : "/encodings/",
        "content"  : "language-specific\n\neg. python pickle\n\nrestricted to one language and they have poor back/forward compatibility\n\ntext\n\neg. json, csv\n\nMore generic, better human-readable, better compatibility than the former\n\nbinary\n\neg. protobuf, thrift\n\nmore compact\n\nneed to be decoded to be human readable\n\nPaths\n\n  via DBs\n  via services, eg. REST, RPC\n  via message passing, eg. brokers, actors\n\n\nUnicode\n"
        },
  
      {
        "title"    : "For New Programmers",
        "url"      : "/for-new-programmers/",
        "content"  : "Crash Course Computer Science and Harvard CS50 are great introductions to fundamental concepts.\n\nI think the best algorithms book for new programmers is:\nGrokking Algorithms, An Illustrated Guide For Programmers and Other Curious People\n\nHave a central repository to keep a record of things you do, your writings, your code, diagrams, .. So you can refine your ideas as you go along\n\nSee also\n\n\n  \n    Computers from scratch\n  \n  \n    Teach Yourself Computer Science\n  \n  \n    History of the Internet - Wikipedia\n  \n  \n    Zen Of Python\n  \n  \n    https://regexlearn.com/\n  \n  \n    System Design Fundamentals\n  \n  \n    Web design in 4 minutes\n  \n  \n    Interactive SQL lessons\n  \n  \n    What every computer science major should know\n  \n  \n    Avoid Working Alone – Letters To A New Developer\n  \n  \n    Being a Professional Programmer - Matthias Endler\n  \n  \n    The Essence of Information - Matthias Endler\n  \n  \n    Three Tribes Of Programming\n  \n  \n    How to implement one-to-one, one-to-many and many-to-many relationships while designing tables?\n  \n  \n    https://github.com/kdeldycke/awesome-falsehood\n  \n  \n    Teach Yourself Programming in Ten Years\n  \n\n\n\n\n\n"
        },
  
      {
        "title"    : "C",
        "url"      : "/c/",
        "content"  : "\n"
        },
  
      {
        "title"    : "Clojure",
        "url"      : "/clojure/",
        "content"  : "Try Clojure\n\n"
        },
  
      {
        "title"    : "Cpp",
        "url"      : "/cpp/",
        "content"  : "\n"
        },
  
      {
        "title"    : "C#",
        "url"      : "/csharp/",
        "content"  : "Types\n\nValue types\n\nbyte 8 bit\n\nint 32 bit\n\nlong 64 bit\n\nshort 64 bit\n\nuint, ulong, ushort, sbyte\n\nfloat 32 bit\n\ndouble 64 bit\n\ndecimal 128 bit\n\nstruct custom value type\n\nchar 16 bit unicode char\n\nReference types\n\nObject, String, Array, Class\n\nDelegate : Type-safe function pointer (e.g., delegate void MyDelegate(string message);)\n\nInterface : Defines a contract that implementing classes must follow (e.g., interface IShape { void Draw(); })\n\nThe size of primitive types is fixed by the language specification and does not change based on the machine architecture.\n\nPointers and Addresses: Pointer types (IntPtr, UIntPtr) can vary in size. For example, IntPtr is 32-bit on a 32-bit system and 64-bit on a 64-bit system.\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\nusing System;\n\nclass LanguageTour{\n    \n    static void Main(){\n\n    }\n\n    public static bool And(bool left, bool right) =&gt;\n    (left, right) switch\n    {\n        (true, true) =&gt; true,\n        (_, _) =&gt; false,\n    };\n\n    public static bool Or(bool left, bool right) =&gt;\n    (left, right) switch\n    {\n        (false, false) =&gt; false,\n        (_, _) =&gt; true,\n    };\n}\n\n\nC# docs - get started, tutorials, reference. - Microsoft Learn\n\nTutorial: Build algorithms with pattern matching - C# - Microsoft Learn\n\nHighest scored ‘c#’ questions - Stack Overflow\n\nc# - Proper use of the IDisposable interface - Stack Overflow\n"
        },
  
      {
        "title"    : "Elixir",
        "url"      : "/elixir/",
        "content"  : "\n"
        },
  
      {
        "title"    : "Erlang",
        "url"      : "/erlang/",
        "content"  : "\n"
        },
  
      {
        "title"    : "Functional Programming",
        "url"      : "/functional-programming/",
        "content"  : "immutable data\n\npure functions, only depend on your input, do not modify anything out of your scope\n\nfunction composition\n\nfunctional core, imperative shell\n\npython\n\nitertools\n\nlist comprehensions\n\n"
        },
  
      {
        "title"    : "Go",
        "url"      : "/go/",
        "content"  : "Gopherize.me - A Gopher pic that’s as unique as you\n\n\n\nFast builds, single binary\n\nSimple, clean\n\nComplete toolchain, from formatting and linting to testing and documentation to publishing\n\nComposition over inheritance\nStart with defining your types and data structures, write simple functions that do one thing well, and compose them to achieve higher level goals\n"
        },
  
      {
        "title"    : "Haskell",
        "url"      : "/haskell/",
        "content"  : "\n"
        },
  
      {
        "title"    : "Java",
        "url"      : "/java/",
        "content"  : "\n"
        },
  
      {
        "title"    : "Lisp",
        "url"      : "/lisp/",
        "content"  : "\n"
        },
  
      {
        "title"    : "Programming Languages",
        "url"      : "/programming-languages/",
        "content"  : "\n"
        },
  
      {
        "title"    : "Call C code from Python",
        "url"      : "/c-and-python/",
        "content"  : "You can use ctypes or cffi to call C code from Python.\n\nUsing ctypes\n\n\n  \n    Create a C Library\n\n    1\n2\n3\n4\n5\n6\n// example.c\n#include &lt;stdio.h&gt;\n\nvoid hello() {\n    printf(\"Hello from C!\\n\");\n}\n    \n  \n  \n    Compile to Shared Library\n\n    1\ngcc -shared -o libexample.so -fPIC example.c\n    \n  \n  \n    Use in Python\n\n    1\n2\n3\n4\n5\n6\n7\nimport ctypes\n\n# Load the shared library\nlib = ctypes.CDLL('./libexample.so')\n\n# Call the function\nlib.hello()\n    \n  \n\n\nUsing cffi\n\n\n  \n    Create a C Library\n\n    Same as above.\n  \n  \n    Compile to Shared Library\n\n    Same as above.\n  \n  \n    Use in Python\n\n    1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\nfrom cffi import FFI\n\nffi = FFI()\n\n# Load the shared library\nlib = ffi.dlopen('./libexample.so')\n\n# Define the function prototype\nffi.cdef('void hello();')\n\n# Call the function\nlib.hello()\n    \n  \n\n"
        },
  
      {
        "title"    : "Python Data Structures",
        "url"      : "/python-data-structures/",
        "content"  : "collections\n\n1\n2\n3\n4\ndict\nlist\nset\ntuple\n\n\n1\n2\ndef tree():\n    return collections.defaultdict(tree)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\nfrom enum import Enum\n\n# class syntax\nclass Color(Enum):\n    RED = 1\n    GREEN = 2\n    BLUE = 3\n\n# functional syntax\nColor = Enum('Color', ['RED', 'GREEN', 'BLUE'])\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\nfrom collections import deque\n\nd = deque()\n\nfor i in range(10):\n    d.append(i)\n\nd.pop() # 9\n\nd.popleft() # 0\n\n\n1\n2\n3\n4\n5\n6\n7\nfrom heapq import heappush, heappop\n\ndef heapsort(iterable):\n    h = []\n    for value in iterable:\n        heappush(h, value)\n    return [heappop(h) for i in range(len(h))]\n\n"
        },
  
      {
        "title"    : "Python Packages",
        "url"      : "/python-packages/",
        "content"  : "dependencies and packaging\npoetry - Python dependency management and packaging made easy.\n\nlogging\nloguru - Library which aims to bring enjoyable logging in Python.\n\nstatic type check\nmypy\n\ntesting\n\nunittest\n\npytest - A mature full-featured Python testing tool.\n\nhypothesis -  property based testing library.\n\ncoverage\n\nlinters\n\nautoflake\n\nautopep8\n\nflake8\n\npylint\n\nformatting\n\nblack\n\nprofiling\n\nmemory-profiler\n\npre-commit checks\n\npre-commit\n\nweb\n\nflask\n\ndjango\n\nfastapi\n\nwebsockets - A library for building WebSocket servers and clients with a focus on correctness and simplicity.\n\ntask queues\n\ndramatiq - A fast and reliable background task processing library for Python 3.\n\nrq - Simple job queues for Python.\n"
        },
  
      {
        "title"    : "Python",
        "url"      : "/python/",
        "content"  : "A pragmatic language, values your time over the machine’s time and it makes sense for many kind of problems\n\nIts a tool just like other tools but a tool I enjoy to use\n\nIt gets out of your way and enables you to express yourself comfortably\n\nAfter a while it starts to feel like speaking plain English\n\nThere is a drawback with flexible and expressive languages like Python, Ruby, or Lisp, they don’t enforce rules and structure so its easy to do things in clever and convoluted ways\n\nSo it requires self discipline from the team to keep a project well organized, readable, and maintainable\n\nFor example list comprehensions brings great expressive power, but power comes with responsibility, and in a large enough team, if the language is not enforcing responsibility, you will see people writing unnecessarily complicated list comprehensions\n\nStatic type checking with mypy made it easier to build larger projects with Python, \nalso the tooling is good for formatting the style, linting, sorting imports, etc.\n\nstandard library\n\n"
        },
  
      {
        "title"    : "Zen Of Python",
        "url"      : "/zen-of-python/",
        "content"  : "I like how Python have a philosophy of elegance. Software should be easy to understand, easy to explain.\n\nLike in the great Lynyrd Skynyrd song “Simple Man”, be something you love and understand\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n&gt; python \n&gt;&gt;&gt; import this \nSimple is better than complex.\nComplex is better than complicated.\nFlat is better than nested.\nSparse is better than dense.\nReadability counts.\nSpecial cases aren't special enough to break the rules.\nAlthough practicality beats purity.\nErrors should never pass silently.\nUnless explicitly silenced.\nIn the face of ambiguity, refuse the temptation to guess.\nThere should be one-- and preferably only one --obvious way to do it.\nAlthough that way may not be obvious at first unless you're Dutch.\nNow is better than never.\nAlthough never is often better than *right* now.\nIf the implementation is hard to explain, it's a bad idea.\nIf the implementation is easy to explain, it may be a good idea.\nNamespaces are one honking great idea -- let's do more of those!\n\n"
        },
  
      {
        "title"    : "Rust",
        "url"      : "/rust/",
        "content"  : "\n"
        },
  
      {
        "title"    : "Scala",
        "url"      : "/scala/",
        "content"  : "\n"
        },
  
      {
        "title"    : "Typing",
        "url"      : "/typing/",
        "content"  : "static vs dynamic\n\nstrong vs weak\n"
        },
  
      {
        "title"    : "Programming",
        "url"      : "/programming/",
        "content"  : "\n"
        },
  
      {
        "title"    : "Unicode",
        "url"      : "/unicode/",
        "content"  : "Unicode is a standard for consistent encoding, representation, and handling of text from various writing systems and languages around the world.\n\n“U+” followed by a series of hexadecimal digits represents a Unicode code point. For example, “U+0041” represents the Unicode code point for the Latin letter ‘A’. The “U+” prefix is used to denote that the following digits represent a Unicode code point in hexadecimal notation.\n\n\n  Latin letter ‘A’: U+0041\n  Arabic numeral ‘5’: U+0035\n  Greek letter ‘α’ (alpha): U+03B1\n  Chinese character ‘汉’ (han): U+6C49\n  Mathematical symbol ‘Σ’ (sigma): U+03A3\n  Emoji ‘😊’ (smiling face with smiling eyes): U+1F60A\n\n\nUTF-8\n\nUTF stands for Unicode Transformation Format. The ‘8’ means it uses 8-bit blocks to represent a character. The number of blocks needed to represent a character varies from 1 to 4.\n\nUTF-8 is a compromise character encoding that can be as compact as ASCII (if the file is just plain English text) but can also contain any unicode characters (with some increase in file size).\n\nOne of the really nice features of UTF-8 is that it is compatible with null-terminated strings. No character will have a null (0) byte when encoded. This means that C code that deals with char[] will “just work”.\n\nBinary format of bytes in sequence\n\n\n  \n    \n      1st Byte\n      2nd Byte\n      3rd Byte\n      4th Byte\n      Number of Free Bits\n      Maximum Expressible Unicode Value\n    \n  \n  \n    \n      0xxxxxxx\n       \n       \n       \n      7\n      007F hex (127)\n    \n    \n      110xxxxx\n      10xxxxxx\n       \n       \n      (5+6)=11\n      07FF hex (2047)\n    \n    \n      1110xxxx\n      10xxxxxx\n      10xxxxxx\n       \n      (4+6+6)=16\n      FFFF hex (65535)\n    \n    \n      11110xxx\n      10xxxxxx\n      10xxxxxx\n      10xxxxxx\n      (3+6+6+6)=21\n      10FFFF hex (1,114,111)\n    \n  \n\n\nhttps://www.fileformat.info/info/unicode/utf8.htm\n\n"
        },
  
      {
        "title"    : "An async web crawler from scratch",
        "url"      : "/async-crawler/",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n\"\"\"\nCreate a sitemap by following links and processing concurrently\n\"\"\"\n\nimport asyncio\nimport aiohttp\n\nimport logging\nimport collections\nimport urllib.parse\n\nfrom pprint import pprint\nimport bs4\n\n\nclass AsyncCrawler:\n    \"\"\" a concurrent web crawler \"\"\"\n\n    def __init__(self, max_concurrency=None):\n        self.start_url = None\n        self.root_netloc = None\n        self.session = None\n\n        self.todo = set()\n        self.busy = set()\n        self.done = set()\n\n        if max_concurrency is None:\n            max_concurrency = 400\n        self.sem = asyncio.Semaphore(max_concurrency)\n\n        self.timeout = 16  # seconds\n\n        self.sitemap = collections.defaultdict(set)\n\n    async def fetch(self, url):\n        async with self.session.get(url) as response:\n            if response.status == 200:\n                return await response.content.read()\n\n    async def parse(self, data, url):\n        soup = bs4.BeautifulSoup(data, features=\"html.parser\")\n        links = set(a.get(\"href\") for a in soup.find_all(\"a\", href=True))\n        for link in links:\n            asyncio.create_task(self.filter_url(link, url))\n\n    async def crawl(self, url):\n        self.todo.remove(url)\n        self.busy.add(url)\n        try:\n            data = await self.fetch(url)\n            if data:\n                await self.parse(data, url)\n        except aiohttp.client_exceptions.ClientError as e:\n            logging.info(f\"{url}, 'has error', {repr(str(e))}\")\n        finally:\n            self.busy.remove(url)\n            self.done.add(url)\n            print(\n                f\"{len(self.todo)} todo, {len(self.busy)} pending, {len(self.done)} done\"\n            )\n            self.sem.release()\n\n    async def filter_url(self, url, parent_url):\n        \"\"\" Crawl all links to a domain and its sub-domains \"\"\"\n        url = urllib.parse.urljoin(parent_url, url)\n        url, frag = urllib.parse.urldefrag(url)\n        parsed_link = urllib.parse.urlparse(url)\n        is_same_domain = self.root_netloc in parsed_link.netloc\n        is_relevant_url = (\n                is_same_domain\n                and url not in self.todo\n                and url not in self.busy\n                and url not in self.done\n        )\n        if is_relevant_url:\n            self.sitemap[parsed_link.netloc].add(parsed_link.path)\n            await self.add_url(url)\n\n    async def add_url(self, url):\n        self.todo.add(url)\n        await self.sem.acquire()\n        asyncio.create_task(self.crawl(url))\n\n    async def run(self):\n        timeout = aiohttp.ClientTimeout(total=self.timeout)\n        # ClientSession is for connection pooling and HTTP keep-alives\n        self.session = aiohttp.ClientSession(timeout=timeout)\n        crawl = asyncio.create_task(self.add_url(self.start_url))\n        await asyncio.sleep(1)\n        while self.busy:\n            await asyncio.sleep(1)\n        await crawl\n        await self.session.close()\n\n    def start(self, start_url):\n        loop = asyncio.get_event_loop()\n        self.start_url = start_url\n        self.root_netloc = urllib.parse.urlparse(start_url).netloc\n        loop.run_until_complete(asyncio.gather(self.run()))\n        return self.sitemap\n\n\ndef test_crawler():\n    start_url = \"https://example.com\"\n    c = AsyncCrawler()\n    sitemap = c.start(start_url)\n    pprint(sitemap)\n\n\nif __name__ == \"__main__\":\n    test_crawler()\n\n\n"
        },
  
      {
        "title"    : "A hash table in C from scratch",
        "url"      : "/c-hashmap/",
        "content"  : "a hash map implementation in C, inspired by https://github.com/jamesroutley/write-a-hash-table\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;math.h&gt;\n\ntypedef struct {\n    char* key;\n    char* value;\n} key_value_pair;\n\ntypedef struct {\n    int size;\n    int count;\n    key_value_pair** pairs;\n} hash_map;\n\nstatic key_value_pair DELETED_PAIR = {NULL, NULL};\n\nconst int PRIME_1 = 151;\nconst int PRIME_2 = 163;\n\nvoid set(hash_map* ht, const char* key, const char* value);\nchar* get(hash_map* ht, const char* key);\nvoid delete(hash_map* ht, const char* key);\n\nstatic key_value_pair* create_new_key_value_pair(const char* k, const char* v) {\n    key_value_pair* pair = malloc(sizeof(pair));\n    pair-&gt;key = strdup(k);\n    pair-&gt;value = strdup(v);\n    return pair;\n}\n\nhash_map* create_new_hash_map() {\n    hash_map* hm = malloc(sizeof(hash_map));\n    hm-&gt;size = 42;\n    hm-&gt;count = 0;\n    hm-&gt;pairs = calloc((size_t)hm-&gt;size, sizeof(key_value_pair*));\n    return hm;\n}\n\n\nstatic void delete_pair(key_value_pair* p) {\n    free(p-&gt;key);\n    free(p-&gt;value);\n    free(p);\n}\n\n\nstatic int create_hash(const char* s, const int a, const int m) {\n    long hash = 0;\n    const int len_s = strlen(s);\n    for (int i = 0; i &lt; len_s; i++) {\n        hash += (long)pow(a, len_s - (i+1)) * s[i];\n        hash = hash % m;\n    }\n    return (int)hash;\n}\n\n\nstatic int get_hash(\n    const char* s, const int num_buckets, const int attempt\n) {\n    const int hash_a = create_hash(s, PRIME_1, num_buckets);\n    const int hash_b = create_hash(s, PRIME_2, num_buckets);\n    return (hash_a + (attempt * (hash_b + 1))) % num_buckets;\n}\n\n\nvoid set(hash_map* hm, const char* key, const char* value) {\n    key_value_pair* new_pair = create_new_key_value_pair(key, value);\n    int index = get_hash(new_pair-&gt;key, hm-&gt;size, 0);\n    key_value_pair* cur_item = hm-&gt;pairs[index];\n    int i = 1;\n    while (cur_item != NULL) {\n        if (cur_item != &amp;DELETED_PAIR) {\n            // update value, overwrite if key found \n            if (strcmp(cur_item-&gt;key, key) == 0) {\n                delete_pair(cur_item);\n                hm-&gt;pairs[index] = new_pair;\n                return;\n            }\n        }\n        index = get_hash(new_pair-&gt;key, hm-&gt;size, i);\n        cur_item = hm-&gt;pairs[index];\n        i++;\n    } \n    hm-&gt;pairs[index] = new_pair;\n    hm-&gt;count++;\n}\n\n\n\nchar* get(hash_map* hm, const char* key) {\n    int index = get_hash(key, hm-&gt;size, 0);\n    key_value_pair* pair = hm-&gt;pairs[index];\n    int i = 1;\n    while (pair != NULL) {\n        if (pair != &amp;DELETED_PAIR) { \n            if (strcmp(pair-&gt;key, key) == 0) {\n                return pair-&gt;value;\n            }\n            index = get_hash(key, hm-&gt;size, i);\n            pair = hm-&gt;pairs[index];\n            i++;\n        } \n    }\n    return NULL;\n}\n\n\nvoid delete(hash_map* hm, const char* key) {\n    int index = get_hash(key, hm-&gt;size, 0);\n    key_value_pair* pair  = hm-&gt;pairs[index];\n    int i = 1;\n    while (pair != NULL) {\n        if (pair != &amp;DELETED_PAIR) {\n            if (strcmp(pair-&gt;key, key) == 0) {\n                delete_pair(pair);\n                hm-&gt;pairs[index] = &amp;DELETED_PAIR;\n            }\n        }\n        index = get_hash(key, hm-&gt;size, i);\n        pair = hm-&gt;pairs[index];\n        i++;\n    } \n    hm-&gt;count--;\n}\n\n\nvoid delete_all(hash_map* hm) {\n    for (int i = 0; i &lt; hm-&gt;size; i++) {\n        key_value_pair* p = hm-&gt;pairs[i];\n        if (p != NULL) {\n            delete_pair(p);\n        }\n    }\n    free(hm-&gt;pairs);\n    free(hm);\n}\n\nint main() {\n    hash_map* hm = create_new_hash_map();\n    set(hm, \"ans\",\"42\");\n    assert(get(hm, \"ans\") == 42);\n    remove_key(hm, \"ans\");\n    assert(get(hm, \"ans\") == NULL);\n    delete_all(hm);\n}\n\n"
        },
  
      {
        "title"    : "Let&#39;s write a compiler",
        "url"      : "/compiler/",
        "content"  : "Both an interpreter and a compiler translate one language to another, normally a higher-level one to a lower-level one.\n\nIn the end, every program must be compiled down to the assembly, CPU instructions, and finally electric pulses on transistors of logic gates\n\nIn the An interpreter in Python post, we built a mini interpreter, visiting the nodes and executing them, the flow looked like\n\nSource Code -&gt; TOKENIZER -&gt; tokens \n-&gt; PARSER -&gt; Abstract Syntax Tree -&gt; EVALUATOR -&gt; Executes in another language like C -&gt; COMPILER -&gt; machine code\n\nFor a compiler, it would look like\n\nSource Code -&gt; TOKENIZER -&gt; tokens \n-&gt; PARSER -&gt; Abstract Syntax Tree \n-&gt; COMPILER -&gt; byte code -&gt; VM -&gt; COMPILER for the VM language -&gt; Assembler -&gt; machine code\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\nfrom enum import Enum, auto\nfrom dataclasses import dataclass\n\n# Enum to represent different token types\nclass TokenType(Enum):\n    ILLEGAL = \"ILLEGAL\"\n    EOF = \"EOF\"\n\n    # Identifiers + literals\n    IDENT = \"IDENT\"  # add, foobar, x, y, ...\n    INT = \"INT\"      # 1343456\n    STRING = \"STRING\"  # \"foobar\"\n\n    # Operators\n    ASSIGN = \"=\"\n    PLUS = \"+\"\n    MINUS = \"-\"\n    BANG = \"!\"\n    ASTERISK = \"*\"\n    SLASH = \"/\"\n\n    LT = \"&lt;\"\n    GT = \"&gt;\"\n\n    EQ = \"==\"\n    NOT_EQ = \"!=\"\n\n    # Delimiters\n    COMMA = \",\"\n    SEMICOLON = \";\"\n    COLON = \":\"\n\n    LPAREN = \"(\"\n    RPAREN = \")\"\n    LBRACE = \"{\"\n    RBRACE = \"}\"\n    LBRACKET = \"[\"\n    RBRACKET = \"]\"\n\n    # Keywords\n    FUNCTION = \"FUNCTION\"\n    LET = \"LET\"\n    TRUE = \"TRUE\"\n    FALSE = \"FALSE\"\n    IF = \"IF\"\n    ELSE = \"ELSE\"\n    RETURN = \"RETURN\"\n\n@dataclass\nclass Token:\n    Type: TokenType\n    Literal: str\n\nkeywords = {\n    \"fn\": TokenType.FUNCTION,\n    \"let\": TokenType.LET,\n    \"true\": TokenType.TRUE,\n    \"false\": TokenType.FALSE,\n    \"if\": TokenType.IF,\n    \"else\": TokenType.ELSE,\n    \"return\": TokenType.RETURN,\n}\n\nsingle_char_tokens = {\n    '=': TokenType.ASSIGN,\n    '+': TokenType.PLUS,\n    '-': TokenType.MINUS,\n    '!': TokenType.BANG,\n    '/': TokenType.SLASH,\n    '*': TokenType.ASTERISK,\n    '&lt;': TokenType.LT,\n    '&gt;': TokenType.GT,\n    ';': TokenType.SEMICOLON,\n    ':': TokenType.COLON,\n    ',': TokenType.COMMA,\n    '{': TokenType.LBRACE,\n    '}': TokenType.RBRACE,\n    '(': TokenType.LPAREN,\n    ')': TokenType.RPAREN,\n}\n\ndef lookup_ident(ident: str) -&gt; TokenType:\n    return keywords.get(ident, TokenType.IDENT)\n\n\n\nNow we have the tokens, let’s define what we expect from the tokenizer\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\nfrom tokenizer import Tokenizer\nfrom token import TokenType\n\ndef test_next_token():\n    input_text = \"\"\"\n    let five = 5;\n    let ten = 10;\n\n    let add = fn(x, y) {\n        x + y;\n    };\n\n    let result = add(five, ten);\n    !-/*5;\n    5 &lt; 10 &gt; 5;\n\n    if (5 &lt; 10) {\n        return true;\n    } else {\n        return false;\n    }\n\n    10 == 10;\n    10 != 9;\n    \"foobar\"\n    \"foo bar\"\n    [1, 2];\n    {\"foo\": \"bar\"}\n    \"\"\"\n\n    tests = [\n        (TokenType.LET, \"let\"),\n        (TokenType.IDENT, \"five\"),\n        (TokenType.ASSIGN, \"=\"),\n        (TokenType.INT, \"5\"),\n        (TokenType.SEMICOLON, \";\"),\n        (TokenType.LET, \"let\"),\n        (TokenType.IDENT, \"ten\"),\n        (TokenType.ASSIGN, \"=\"),\n        (TokenType.INT, \"10\"),\n        (TokenType.SEMICOLON, \";\"),\n        (TokenType.LET, \"let\"),\n        (TokenType.IDENT, \"add\"),\n        (TokenType.ASSIGN, \"=\"),\n        (TokenType.FUNCTION, \"fn\"),\n        (TokenType.LPAREN, \"(\"),\n        (TokenType.IDENT, \"x\"),\n        (TokenType.COMMA, \",\"),\n        (TokenType.IDENT, \"y\"),\n        (TokenType.RPAREN, \")\"),\n        (TokenType.LBRACE, \"{\"),\n        (TokenType.IDENT, \"x\"),\n        (TokenType.PLUS, \"+\"),\n        (TokenType.IDENT, \"y\"),\n        (TokenType.SEMICOLON, \";\"),\n        (TokenType.RBRACE, \"}\"),\n        (TokenType.SEMICOLON, \";\"),\n        (TokenType.LET, \"let\"),\n        (TokenType.IDENT, \"result\"),\n        (TokenType.ASSIGN, \"=\"),\n        (TokenType.IDENT, \"add\"),\n        (TokenType.LPAREN, \"(\"),\n        (TokenType.IDENT, \"five\"),\n        (TokenType.COMMA, \",\"),\n        (TokenType.IDENT, \"ten\"),\n        (TokenType.RPAREN, \")\"),\n        (TokenType.SEMICOLON, \";\"),\n        (TokenType.BANG, \"!\"),\n        (TokenType.MINUS, \"-\"),\n        (TokenType.SLASH, \"/\"),\n        (TokenType.ASTERISK, \"*\"),\n        (TokenType.INT, \"5\"),\n        (TokenType.SEMICOLON, \";\"),\n        (TokenType.INT, \"5\"),\n        (TokenType.LT, \"&lt;\"),\n        (TokenType.INT, \"10\"),\n        (TokenType.GT, \"&gt;\"),\n        (TokenType.INT, \"5\"),\n        (TokenType.SEMICOLON, \";\"),\n        (TokenType.IF, \"if\"),\n        (TokenType.LPAREN, \"(\"),\n        (TokenType.INT, \"5\"),\n        (TokenType.LT, \"&lt;\"),\n        (TokenType.INT, \"10\"),\n        (TokenType.RPAREN, \")\"),\n        (TokenType.LBRACE, \"{\"),\n        (TokenType.RETURN, \"return\"),\n        (TokenType.TRUE, \"true\"),\n        (TokenType.SEMICOLON, \";\"),\n        (TokenType.RBRACE, \"}\"),\n        (TokenType.ELSE, \"else\"),\n        (TokenType.LBRACE, \"{\"),\n        (TokenType.RETURN, \"return\"),\n        (TokenType.FALSE, \"false\"),\n        (TokenType.SEMICOLON, \";\"),\n        (TokenType.RBRACE, \"}\"),\n        (TokenType.INT, \"10\"),\n        (TokenType.EQ, \"==\"),\n        (TokenType.INT, \"10\"),\n        (TokenType.SEMICOLON, \";\"),\n        (TokenType.INT, \"10\"),\n        (TokenType.NOT_EQ, \"!=\"),\n        (TokenType.INT, \"9\"),\n        (TokenType.SEMICOLON, \";\"),\n        (TokenType.STRING, \"foobar\"),\n        (TokenType.STRING, \"foo bar\"),\n        (TokenType.LBRACKET, \"[\"),\n        (TokenType.INT, \"1\"),\n        (TokenType.COMMA, \",\"),\n        (TokenType.INT, \"2\"),\n        (TokenType.RBRACKET, \"]\"),\n        (TokenType.SEMICOLON, \";\"),\n        (TokenType.LBRACE, \"{\"),\n        (TokenType.STRING, \"foo\"),\n        (TokenType.COLON, \":\"),\n        (TokenType.STRING, \"bar\"),\n        (TokenType.RBRACE, \"}\"),\n        (TokenType.EOF, \"\"),\n    ]\n\n    tokenizer = Tokenizer(input_text)\n\n    for i, (expected_type, expected_literal) in enumerate(tests):\n        tok = tokenizer.next_token()\n\n        assert tok.type == expected_type, f\"tests[{i}] - tokentype wrong. expected={expected_type}, got={tok.type}\"\n        assert tok.literal == expected_literal, f\"tests[{i}] - literal wrong. expected={expected_literal}, got={tok.literal}\"\n\n    print(\"Tokenizer tests passed!\")\n\nif __name__ == \"__main__\":\n    test_next_token()\n\n\n\nNow let’s implement the tokenizer\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n\nfrom token import Token, TokenType, single_char_tokens\nfrom typing import Optional\n\nclass Tokenizer:\n    def __init__(self, input: str):\n        self.input = input\n        self.position = 0\n        self.read_position = 0\n        self.ch: Optional[str] = None\n        self.read_char()\n\n    def __post_init__(self):\n        self.read_char()\n\n    def read_char(self):\n        if self.read_position &gt;= len(self.input):\n            self.ch = None\n        else:\n            self.ch = self.input[self.read_position]\n        self.position = self.read_position\n        self.read_position += 1\n\n    def peek_char(self):\n        if self.read_position &gt;= len(self.input):\n            return None\n        else:\n            return self.input[self.read_position]\n\n    def read_identifier(self):\n        position = self.position\n        while self.ch is not None and (self.ch.isalpha() or self.ch == '_'):\n            self.read_char()\n        return self.input[position:self.position]\n\n    def read_number(self):\n        position = self.position\n        while self.ch is not None and self.ch.isdigit():\n            self.read_char()\n        return self.input[position:self.position]\n\n    def read_string(self):\n        position = self.position + 1\n        while self.ch != '\"' and self.ch is not None:\n            self.read_char()\n        return self.input[position:self.position]\n\n    def skip_whitespace(self):\n        while self.ch is not None and self.ch.isspace():\n            self.read_char()\n\n\n    def next_token(self):\n        self.skip_whitespace()\n\n        if self.ch is None:\n            return Token(TokenType.EOF, \"\")\n\n        if self.ch in single_char_tokens:\n            tok_type = single_char_tokens[self.ch]\n            tok_literal = self.ch\n            self.read_char()\n            return Token(tok_type, tok_literal)\n\n        if self.ch == '\"':\n            tok_type = TokenType.STRING\n            tok_literal = self.read_string()\n            return Token(tok_type, tok_literal)\n\n        if self.ch.isdigit():\n            tok_type = TokenType.INT\n            tok_literal = self.read_number()\n            return Token(tok_type, tok_literal)\n\n        if self.ch.isalpha() or self.ch == '_':\n            tok_literal = self.read_identifier()\n            tok_type = TokenType(t)\n            return Token(tok_type, tok_literal)\n\n        return Token(TokenType.ILLEGAL, self.ch)\n\n\nNow let’s define the AST,\n\na program is a list of statements\n\neach statement is a node in AST\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\nfrom token import Token, TokenType\nfrom typing import List, Optional\nfrom dataclasses import dataclass\n\n# The base Node interface\n@dataclass\nclass Node:\n    def token_literal(self) -&gt; str:\n        raise NotImplementedError\n\n    def __str__(self) -&gt; str:\n        raise NotImplementedError\n\n# All statement nodes implement this\n@dataclass\nclass Statement(Node):\n    def token_literal(self) -&gt; str:\n        raise NotImplementedError\n\n# All expression nodes implement this\n@dataclass\nclass Expression(Node):\n    def token_literal(self) -&gt; str:\n        raise NotImplementedError\n\n@dataclass\nclass Program(Node):\n    statements: List[Statement]\n\n    def token_literal(self) -&gt; str:\n        if self.statements:\n            return self.statements[0].token_literal()\n        return \"\"\n\n    def __str__(self) -&gt; str:\n        return \"\".join(str(stmt) for stmt in self.statements)\n\n@dataclass\nclass LetStatement(Statement):\n    token: Token\n    name: Expression\n    value: Expression\n\n    def token_literal(self) -&gt; str:\n        return self.token.literal\n\n    def __str__(self) -&gt; str:\n        return f\"{self.token_literal()} {self.name} = {self.value};\"\n\n@dataclass\nclass ReturnStatement(Statement):\n    token: Token\n    return_value: Optional[Expression]\n\n    def token_literal(self) -&gt; str:\n        return self.token.literal\n\n    def __str__(self) -&gt; str:\n        if self.return_value is not None:\n            return f\"{self.token_literal()} {self.return_value};\"\n        return f\"{self.token_literal()};\"\n\n@dataclass\nclass ExpressionStatement(Statement):\n    token: Token\n    expression: Optional[Expression]\n\n    def token_literal(self) -&gt; str:\n        return self.token.literal\n\n    def __str__(self) -&gt; str:\n        if self.expression is not None:\n            return str(self.expression)\n        return \"\"\n\n@dataclass\nclass BlockStatement(Statement):\n    token: Token\n    statements: List[Statement]\n\n    def token_literal(self) -&gt; str:\n        return self.token.literal\n\n    def __str__(self) -&gt; str:\n        return \"\".join(str(stmt) for stmt in self.statements)\n\n@dataclass\nclass Identifier(Expression):\n    token: Token\n    value: str\n\n    def token_literal(self) -&gt; str:\n        return self.token.literal\n\n    def __str__(self) -&gt; str:\n        return self.value\n\n@dataclass\nclass Boolean(Expression):\n    token: Token\n    value: bool\n\n    def token_literal(self) -&gt; str:\n        return self.token.literal\n\n    def __str__(self) -&gt; str:\n        return self.token.literal\n\n@dataclass\nclass IntegerLiteral(Expression):\n    token: Token\n    value: int\n\n    def token_literal(self) -&gt; str:\n        return self.token.literal\n\n    def __str__(self) -&gt; str:\n        return self.token.literal\n\n@dataclass\nclass PrefixExpression(Expression):\n    token: Token\n    operator: str\n    right: Expression\n\n    def token_literal(self) -&gt; str:\n        return self.token.literal\n\n    def __str__(self) -&gt; str:\n        return f\"({self.operator}{self.right})\"\n\n@dataclass\nclass InfixExpression(Expression):\n    token: Token\n    left: Expression\n    operator: str\n    right: Expression\n\n    def token_literal(self) -&gt; str:\n        return self.token.literal\n\n    def __str__(self) -&gt; str:\n        return f\"({self.left} {self.operator} {self.right})\"\n\n@dataclass\nclass IfExpression(Expression):\n    token: Token\n    condition: Expression\n    consequence: BlockStatement\n    alternative: Optional[BlockStatement]\n\n    def token_literal(self) -&gt; str:\n        return self.token.literal\n\n    def __str__(self) -&gt; str:\n        result = f\"if {self.condition} {self.consequence}\"\n        if self.alternative:\n            result += f\" else {self.alternative}\"\n        return result\n\n@dataclass\nclass FunctionLiteral(Expression):\n    token: Token\n    parameters: List[Identifier]\n    body: BlockStatement\n\n    def token_literal(self) -&gt; str:\n        return self.token.literal\n\n    def __str__(self) -&gt; str:\n        params = \", \".join(str(param) for param in self.parameters)\n        return f\"{self.token_literal()}({params}) {self.body}\"\n\n@dataclass\nclass CallExpression(Expression):\n    token: Token\n    function: Expression\n    arguments: List[Expression]\n\n    def token_literal(self) -&gt; str:\n        return self.token.literal\n\n    def __str__(self) -&gt; str:\n        args = \", \".join(str(arg) for arg in self.arguments)\n        return f\"{self.function}({args})\"\n\n@dataclass\nclass StringLiteral(Expression):\n    token: Token\n    value: str\n\n    def token_literal(self) -&gt; str:\n        return self.token.literal\n\n    def __str__(self) -&gt; str:\n        return self.token.literal\n\n@dataclass\nclass ArrayLiteral(Expression):\n    token: Token\n    elements: List[Expression]\n\n    def token_literal(self) -&gt; str:\n        return self.token.literal\n\n    def __str__(self) -&gt; str:\n        elements = \", \".join(str(elem) for elem in self.elements)\n        return f\"[{elements}]\"\n\n@dataclass\nclass IndexExpression(Expression):\n    token: Token\n    left: Expression\n    index: Expression\n\n    def token_literal(self) -&gt; str:\n        return self.token.literal\n\n    def __str__(self) -&gt; str:\n        return f\"({self.left}[{self.index}])\"\n\n@dataclass\nclass HashLiteral(Expression):\n    token: Token\n    pairs: Dict[Expression, Expression]\n\n    def token_literal(self) -&gt; str:\n        return self.token.literal\n\n    def __str__(self) -&gt; str:\n        pairs = \", \".join(f\"{key}: {value}\" for key, value in self.pairs.items())\n        return f\"\"\n\n\n\nTo be continued..\n"
        },
  
      {
        "title"    : "A garbage collector in C from scratch",
        "url"      : "/garbage-collector-in-c/",
        "content"  : "a garbage collector, replicating https://github.com/munificent/mark-sweep step by step\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\n#define STACK_MAX 256\n\ntypedef enum\n{\n    OBJ_INT,\n    OBJ_PAIR\n} ObjectType;\n\ntypedef struct sObject\n{\n    ObjectType type;\n    unsigned char marked;\n\n    /* The next object in the linked list of heap allocated objects. */\n    struct sObject *next;\n\n    union {\n        /* OBJ_INT */\n        int value;\n\n        /* OBJ_PAIR */\n        struct\n        {\n            struct sObject *head;\n            struct sObject *tail;\n        };\n    };\n} Object;\n\ntypedef struct\n{\n    Object *stack[STACK_MAX];\n    int stackSize;\n\n    /* The first object in the linked list of all objects on the heap. */\n    Object *firstObject;\n\n    /* The total number of currently allocated objects. */\n    int numObjects;\n\n    /* The number of objects required to trigger a GC. */\n    int maxObjects;\n} VM;\n\n\nVM *newVM();\nvoid push(VM *vm, Object *value);\nObject *pop(VM *vm);\n\nvoid mark(Object *object);\nvoid markAll(VM *vm);\nvoid sweep(VM *vm);\nvoid gc(VM *vm);\nvoid freeVM(VM *vm);\n\nObject *newObject(VM *vm, ObjectType type);\nvoid pushInt(VM *vm, int intValue);\nObject *pushPair(VM *vm);\n\n\nvoid assert(int condition, const char *message)\n{\n    if (!condition)\n    {\n        printf(\"%s\\n\", message);\n        exit(1);\n    }\n}\n\nVM *newVM()\n{\n    VM *vm = malloc(sizeof(VM));\n    vm-&gt;stackSize = 0;\n    vm-&gt;firstObject = NULL;\n    vm-&gt;numObjects = 0;\n    vm-&gt;maxObjects = 8;\n    return vm;\n}\n\nvoid push(VM *vm, Object *value)\n{\n    assert(vm-&gt;stackSize &lt; STACK_MAX, \"Stack overflow!\");\n    vm-&gt;stack[vm-&gt;stackSize++] = value;\n}\n\nObject *pop(VM *vm)\n{\n    assert(vm-&gt;stackSize &gt; 0, \"Stack underflow!\");\n    return vm-&gt;stack[--vm-&gt;stackSize];\n}\n\nvoid mark(Object *object)\n{\n    /* If already marked, we're done. Check this first to avoid recursing\n     on cycles in the object graph. */\n    if (object-&gt;marked)\n        return;\n\n    object-&gt;marked = 1;\n\n    if (object-&gt;type == OBJ_PAIR)\n    {\n        mark(object-&gt;head);\n        mark(object-&gt;tail);\n    }\n}\n\nvoid markAll(VM *vm)\n{\n    for (int i = 0; i &lt; vm-&gt;stackSize; i++)\n    {\n        mark(vm-&gt;stack[i]);\n    }\n}\n\nvoid sweep(VM *vm)\n{\n    Object **object = &amp;vm-&gt;firstObject;\n    printf(\"*vm %d , vm-&gt;first %d,  &amp;vm-&gt;firstObject %d \\n\", vm, vm-&gt;firstObject, &amp;vm-&gt;firstObject);\n\n    while (*object)\n    {\n        if (!(*object)-&gt;marked)\n        {\n            /* This object wasn't reached, so remove it from the list and free it. */\n            Object *unreached = *object;\n\n            *object = unreached-&gt;next;\n            free(unreached);\n\n            vm-&gt;numObjects--;\n        }\n        else\n        {\n            /* This object was reached, so unmark it (for the next GC) and move on to\n       the next. */\n            (*object)-&gt;marked = 0;\n            object = &amp;(*object)-&gt;next;\n\n            // printf(\"object %d, &amp;object %d, (*object) %d \\n\", object, &amp;object,  (*object));\n        }\n    }\n}\n\n\nvoid gc(VM *vm)\n{\n    int numObjects = vm-&gt;numObjects;\n\n    markAll(vm);\n    sweep(vm);\n\n    vm-&gt;maxObjects = vm-&gt;numObjects * 2;\n\n    printf(\"Collected %d objects, %d remaining.\\n\", numObjects - vm-&gt;numObjects,\n           vm-&gt;numObjects);\n}\n\nvoid freeVM(VM *vm)\n{\n    vm-&gt;stackSize = 0;\n    gc(vm);\n    free(vm);\n}\n\nObject *newObject(VM *vm, ObjectType type)\n{\n    if (vm-&gt;numObjects == vm-&gt;maxObjects)\n        gc(vm);\n\n    Object *object = malloc(sizeof(Object));\n    object-&gt;type = type;\n    object-&gt;next = vm-&gt;firstObject;\n    vm-&gt;firstObject = object;\n    object-&gt;marked = 0;\n\n    vm-&gt;numObjects++;\n\n    return object;\n}\n\nvoid pushInt(VM *vm, int intValue)\n{\n    Object *object = newObject(vm, OBJ_INT);\n    object-&gt;value = intValue;\n\n    push(vm, object);\n}\n\nObject *pushPair(VM *vm)\n{\n    Object *object = newObject(vm, OBJ_PAIR);\n    object-&gt;tail = pop(vm);\n    object-&gt;head = pop(vm);\n\n    push(vm, object);\n    return object;\n}\n\nvoid objectPrint(Object *object)\n{\n    switch (object-&gt;type)\n    {\n    case OBJ_INT:\n        printf(\"%d\", object-&gt;value);\n        break;\n\n    case OBJ_PAIR:\n        printf(\"(\");\n        objectPrint(object-&gt;head);\n        printf(\", \");\n        objectPrint(object-&gt;tail);\n        printf(\")\");\n        break;\n    }\n}\n\n\nvoid test1()\n{\n    printf(\"Test 1: Objects on stack are preserved.\\n\");\n    VM *vm = newVM();\n    pushInt(vm, 1);\n    pushInt(vm, 2);\n\n    gc(vm);\n    assert(vm-&gt;numObjects == 2, \"Should have preserved objects.\");\n    freeVM(vm);\n}\n\nvoid test2()\n{\n    printf(\"Test 2: Unreached objects are collected.\\n\");\n    VM *vm = newVM();\n    pushInt(vm, 1);\n    pushInt(vm, 2);\n    pop(vm);\n    pop(vm);\n\n    gc(vm);\n    assert(vm-&gt;numObjects == 0, \"Should have collected objects.\");\n    freeVM(vm);\n}\n\nvoid test3()\n{\n    printf(\"Test 3: Reach nested objects.\\n\");\n    VM *vm = newVM();\n    pushInt(vm, 1);\n    pushInt(vm, 2);\n    pushPair(vm);\n    pushInt(vm, 3);\n    pushInt(vm, 4);\n    pushPair(vm);\n    pushPair(vm);\n\n    gc(vm);\n    assert(vm-&gt;numObjects == 7, \"Should have reached objects.\");\n    freeVM(vm);\n}\n\nvoid test4()\n{\n    printf(\"Test 4: Handle cycles.\\n\");\n    VM *vm = newVM();\n    pushInt(vm, 1);\n    pushInt(vm, 2);\n    Object *a = pushPair(vm);\n    pushInt(vm, 3);\n    pushInt(vm, 4);\n    Object *b = pushPair(vm);\n\n    /* Set up a cycle, and also make 2 and 4 unreachable and collectible. */\n    a-&gt;tail = b;\n    b-&gt;tail = a;\n\n    gc(vm);\n    assert(vm-&gt;numObjects == 4, \"Should have collected objects.\");\n    freeVM(vm);\n}\n\nvoid perfTest()\n{\n    printf(\"Performance Test.\\n\");\n    VM *vm = newVM();\n\n    for (int i = 0; i &lt; 1000; i++)\n    {\n        for (int j = 0; j &lt; 20; j++)\n        {\n            pushInt(vm, i);\n        }\n\n        for (int k = 0; k &lt; 20; k++)\n        {\n            pop(vm);\n        }\n    }\n    freeVM(vm);\n}\n\nint main(int argc, const char *argv[])\n{\n    test1();\n    test2();\n    test3();\n    test4();\n    perfTest();\n\n    return 0;\n}\n\n"
        },
  
      {
        "title"    : "Links For Makers",
        "url"      : "/links-for-makers/",
        "content"  : "https://brennan.io/2015/01/16/write-a-shell-in-c/\n\nhttps://blog.carlosgaldino.com/writing-a-file-system-from-scratch-in-rust.html\n\nhttps://viewsourcecode.org/snaptoken/kilo/\n\nhttps://carltheperson.com/posts/10-things-linux/\nLists\n\n500 Lines or Less\n\ntuvtran/project-based-learning: Curated list of project-based tutorials\n\ndanistefanovic/build-your-own-x: 🤓 Build your own (insert technology here)\n\nChallenging projects every programmer should try\n\nweb\n\nHow do you create a video chat application?\n\nLet’s Build A Web Server. Part 1. - Ruslan’s Blog\n\nLet’s Build A Web Server. Part 3. - Ruslan’s Blog\n\nLet’s Create a Simple Load Balancer With Go - kasvith.me - a personal blog space\n\nhttp server\n\nIntroduction · Build web application with Golang\n\nWriting Web Applications - The Go Programming Language\n\nBuilding a Simple Chat App With Elixir and Phoenix - Sheharyar Naseer\n\nGet into http package · Build web application with Golang\n\nBuilding a BitTorrent client from the ground up in Go - Jesse Li\n\nThinking in React Hooks\n\ncontainers\n\nContainers the hard way: Gocker: A mini Docker written in Go - Unixism\n\nLinux containers in a few lines of code\n\nlanguages\n\nHow to write a (toy) JVM\n\nLet’s make a Teeny Tiny compiler, part 2 - Austin Z. Henley\n\nasyncio: We Did It Wrong – roguelynn\n\nBaby’s First Garbage Collector – journal.stuffwithstuff.com\n\ncompilers\n\nA crash course in compilers – Increment: Programming Languages\n\nMy First Language Frontend with LLVM Tutorial — LLVM 10 documentation\n\nKaleidoscope: Kaleidoscope Introduction and the Lexer — LLVM 10 documentation\n\nmal/impls/python at master · kanaka/mal\n\nCompiler Construction\n\nSo You Want to Be a (Compiler) Wizard // -dealloc\n\nNicole Orchard\n\nInterpreters\n\nkanaka/mal: mal - Make a Lisp\n\nA Map of the Territory · Crafting Interpreters\n\n(How to Write a (Lisp) Interpreter (in Python))\n\nLet’s Build A Simple Interpreter. Part 11. - Ruslan’s Blog\n\n(An ((Even Better) Lisp) Interpreter (in Python))\n\nrobpike/lisp: Toy Lisp 1.5 interpreter\n\nOS\n\nMiniOS/kernel at master · luisfmcalado/MiniOS\n\nWriting an OS in Rust\n\nWriting a Unix Shell - Part I – Cracking The Code\n\nnetwork\n\nsaminiir/level-ip: A hacker’s userspace TCP/IP stack\n\nReal time communication with WebRTC\n\ncomputer graphics\n\nssloy/tinyrenderer: A brief computer graphics / rendering course\n\nScratchapixel\n\n6 Useful Snippets\n\nsystems\n\nMemory Allocators 101 - Write a simple memory allocator - Arjun Sreedharan\n\nbrowser\n\nLet’s build a browser engine! Part 1: Getting started\n\ngit\n\nWrite yourself a Git!\n\ndatabases\n\nDatabase basics: writing a SQL database from scratch in Go - notes.eatonphil.com\n\nHow to Implement Search By Color When All You Have is A Good Coffee - Mike Alche\n\nNLP\n\nAdvanced NLP with spaCy · A free online course\n\nalgorithms\n\nhackerrank\n\ndevops\n\nsnori74/linuxupskillchallenge: Learn the skills required to sysadmin a remote Linux server from the commandline.\n\nother\n\nHow to Write a Spelling Corrector\n\nBuilding a search engine from scratch\n\nIndex of /en/500L\n\nEryb’s Space\n\nTorrent downloads and distributions for IP 78.175.225.36\n\nIndexing Billions of Text Vectors\n\nRecommendation System Series Part 2: The 10 Categories of Deep Recommendation Systems That Academic Researchers Should Pay Attention To — James Le\n\n"
        },
  
      {
        "title"    : "Logos, an operating system kernel from scratch",
        "url"      : "/logos-os/",
        "content"  : "https://github.com/selimslab/logos\n\nThis is a project to understand and replicate the great OS tutorial of Carlos Fenollosa\n\nLogos bootloads a kernel, connects to the keyboard and the screen, then starts a basic shell\n\nResources\n\nos-dev wiki\n\nOperating Systems: From 0 to 1\n\nWriting a Simple Operating System — from Scratch\n\nOperating Systems: Three Easy Pieces\n\n"
        },
  
      {
        "title"    : "A search engine with page rank, in 200 lines",
        "url"      : "/mini-search-engine/",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\nimport re\nimport math\nimport operator\nimport logging\nfrom collections import defaultdict, Counter\nimport numpy as np\n\n\nclass Tokenizer:\n    def __init__(self, stop_words, ):\n        self.stop_words = stop_words\n\n    def token_generator(self, s):\n        letters_and_digits_only = re.compile('[a-z0-9]+')\n        for token in letters_and_digits_only.findall(s.lower()):\n            if token not in self.stop_words:\n                yield token\n\n\nclass Scorer:\n    @staticmethod\n    def get_tf_idf(tf, number_of_pages, df):\n        weighted_tf = 1 + math.log10(tf)\n        idf = math.log10(number_of_pages / df)\n        return weighted_tf * idf\n\n\nclass Indexer:\n    def __init__(self, tokenizer, scorer):\n        self.tokenizer = tokenizer\n        self.scorer = scorer\n\n    def get_count_index(self, pages):\n        # count terms\n        count_index = defaultdict(list)\n        for url, content, links in pages:\n            counts = Counter(self.tokenizer.token_generator(content))\n            for token, count in counts.items():\n                count_index[token].append((url, count))\n        return count_index\n\n    def get_weighted_index(self, count_index, number_of_pages):\n        # add tf-idf weights\n        weighted_index = defaultdict(list)\n        for token, docs in count_index.items():\n            df = len(docs)\n            for url, count in docs:\n                weight = self.scorer.get_tf_idf(count, number_of_pages, df)\n                weighted_index[token].append((url, weight))\n        return weighted_index\n\n    def get_normalized_index(self, weighted_index):\n        # normalize tf-idf weights\n        weights_by_url = defaultdict(list)\n        for docs in weighted_index.values():\n            for url, weight in docs:\n                weights_by_url[url].append(weight)\n\n        normalized_index = defaultdict(list)\n        for term, docs in weighted_index.items():\n            for url, weight in docs:\n                doc_norm = np.linalg.norm(weights_by_url.get(url))\n                if doc_norm == 0:\n                    normalized_weight = weight\n                else:\n                    normalized_weight = round(weight / doc_norm, 3)\n                normalized_index[term].append((url, normalized_weight))\n\n        return normalized_index\n\n    def get_index(self, pages):\n        number_of_pages = len(pages)\n        count_index = self.get_count_index(pages)\n        weighted_index = self.get_weighted_index(count_index, number_of_pages)\n        normalized_index = self.get_normalized_index(weighted_index)\n        return normalized_index\n\n\nclass PageRank:\n    def __init__(self, scorer):\n        self.max_iterations = 10000\n        self.teleport_rate = 0.1\n        self.page_rank = None\n        self.scorer = scorer\n\n    def get_cosine_similarity_scores(self, index, number_of_pages, query):\n        query_terms = set(query.split())\n        related_terms = set(term for term in query_terms if term in index)\n\n        query_tf_idfs = {term: self.scorer.get_tf_idf(1, number_of_pages, len(index[term])) for term in related_terms}\n        query_vector_norm = np.linalg.norm(list(query_tf_idfs.values()))\n\n        scores = defaultdict(int)\n        for term in related_terms:\n            query_term_weight = query_tf_idfs.get(term) / query_vector_norm\n            for url, weight in index[term]:\n                scores[url] += weight * query_term_weight\n\n        return sorted(scores.items(), key=operator.itemgetter(1), reverse=True)\n\n    @staticmethod\n    def split_link_weight(number_of_pages, url, links):\n        if not links:\n            return 1 / number_of_pages\n        if url in links:\n            return 1 / len(links)\n        else:\n            return 0\n\n    def create_transition_matrix(self, pages):\n        urls = [url for url, content, links in pages]\n        number_of_pages = len(pages)\n        transition_probabilities = [\n            [\n                self.split_link_weight(number_of_pages, url, links) for url in urls\n            ]\n            for url, content, links in pages\n        ]\n        transition_matrix = np.matrix(transition_probabilities)\n        markov_transition_matrix = self.teleport(number_of_pages, transition_matrix)\n        return markov_transition_matrix\n\n    def teleport(self, number_of_pages, transition_matrix):\n        return transition_matrix * (1 - self.teleport_rate) + self.teleport_rate / number_of_pages\n\n    def power_method(self, number_of_pages, transition_matrix):\n        # initial ranking score is 1/N for every page\n        ranks = [1 / number_of_pages] * number_of_pages\n        for i in range(self.max_iterations):\n            new_ranks = ranks * transition_matrix\n            logging.debug(f\"step {i} {new_ranks}\")\n            if np.allclose(ranks, new_ranks):\n                break\n            ranks = new_ranks\n\n        return ranks.reshape(-1, ).tolist().pop()\n\n    def create_page_rank(self, pages):\n        transition_matrix = self.create_transition_matrix(pages)\n        logging.debug(f\"transition_matrix {transition_matrix}\")\n        ranks = self.power_method(len(pages), transition_matrix)\n        urls = [page[0] for page in pages]\n        page_rank = {\n            url: round(rank, 3)\n            for url, rank in zip(urls, ranks)\n        }\n        return page_rank\n\n\nclass SearchEngine():\n    def __init__(self, indexer, ranker):\n        self.indexer = indexer\n        self.ranker = ranker\n        self.index = self.page_rank = self.number_of_pages = None\n\n    def start(self, pages):\n        self.index = self.indexer.get_index(pages)\n        self.page_rank = self.ranker.create_page_rank(pages)\n        self.number_of_pages = len(pages)\n\n    def search(self, query):\n        cosine_similarity_scores = self.ranker.get_cosine_similarity_scores(self.index, self.number_of_pages, query)\n        logging.debug(f\"cosine_similarity_scores {cosine_similarity_scores}\")\n        final_scores = [(url, score * self.page_rank.get(url)) for url, score in cosine_similarity_scores]\n        results = sorted(final_scores, key=operator.itemgetter(1), reverse=True)\n        return results\n\n\ndef test_search_engine(pages):\n    stop_words = {\"the\", \"a\", \"an\", \"is\", \"this\", \"to\"}\n    tokenizer = Tokenizer(stop_words)\n    scorer = Scorer()\n    indexer = Indexer(tokenizer, scorer)\n    ranker = PageRank(scorer)\n    engine = SearchEngine(indexer, ranker)\n    engine.start(pages)\n    logging.debug(f\"page_rank {engine.page_rank}\")\n    logging.debug(engine.index)\n\n    while True:\n        query = input(\"search &gt; \")\n        if query:\n            results = engine.search(query)\n            if results:\n                print(results)\n            else:\n                print(\"no results\")\n\n\nif __name__ == \"__main__\":\n    pages = [\n        (\"a.com\", \"oh romeo wherefore art thou?\", [\"b.com\", \"d.com\", \"e.com\"]),\n        (\"b.com\", \"These Violent Delights Have Violent Ends\", [\"d.com\", \"c.com\"]),\n        (\"c.com\", \"The fool doth think he is wise, but the wise man knows himself to be a fool.\", [\"d.com\", \"b.com\"]),\n        (\"d.com\", \"Love all, trust a few, do wrong to none.\", [\"a.com\", \"b.com\"]),\n        (\"e.com\", \"Though this be madness, yet there is method in't.\", [\"c.com\", \"a.com\"]),\n    ]\n    logging.getLogger().setLevel(\"DEBUG\")\n    test_search_engine(pages)\n\n"
        },
  
      {
        "title"    : "A web server from scratch",
        "url"      : "/mini-web-server/",
        "content"  : "Inspired by Ruslan’s blog\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n# coding: utf-8\n\"\"\"\na simple concurrent web server\n\nsocket -&gt; bind -&gt; listen -&gt; accept -&gt; loop \n\"\"\"\nimport socket\nimport os \nimport time\nimport signal\nimport errno\n\n# Define socket host and port\nSERVER_HOST = '0.0.0.0'\nSERVER_PORT = 8000\n\n\"\"\"\nA socket is an abstraction of a communication endpoint \nand it allows your program to communicate with another program using file descriptors. \n\nThe socket pair for a TCP connection is a 4-tuple\nthat identifies two endpoints of the TCP connection: \nthe local IP address, local port, foreign IP address, and foreign port.\n\neg. (0.0.0.1:80, 0.0.0.2:6379) is a socket pair and 0.0.0.1:80 is a socket \n\"\"\"\n\ndef wait_for_children_process(signum, frame):\n    \"\"\"\n    If you don’t close duplicate descriptors, \n    the clients won’t terminate because the client connections won’t get closed.\n    \n    Moreover, your long-running server will eventually \n    run out of available file descriptors (max open files).\n\n    When you fork a child process and it exits \n    if the parent process doesn’t wait for it and doesn’t collect its termination status,\n    the child process becomes a zombie.\n\n    Zombies need to eat something and, in our case, it’s memory. \n\n    Your server will eventually run out of available processes (max user processes) \n    if it doesn’t take care of zombies.\n\n    You can’t kill a zombie, you need to wait for it.\n\n    If you fork a child and don’t wait for it, it becomes a zombie.\n    \"\"\"\n    while True:\n        try:\n            pid, status = os.waitpid(\n                -1,          # Wait for any child process\n                 os.WNOHANG  # Do not block and return EWOULDBLOCK error\n            )\n        except OSError:\n            return\n\n        if pid == 0:  # no more zombies\n            return\n\ndef serve():\n    # Create socket\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    # add socket options\n    server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    # bind -&gt; assign a local protocol address to the socket\n    server_socket.bind((SERVER_HOST, SERVER_PORT))\n    # listen -&gt; make the socket a listening socket\n    server_socket.listen(1)\n    print('Listening on port %s ...' % SERVER_PORT)\n\n    \"\"\"\n    Use the SIGCHLD event handler to asynchronously \n    wait for a terminated child to get its termination status\n\n    When using an event handler you need to keep in mind that\n    system calls might get interrupted \n    and you need to be prepared for that scenario\n    \"\"\"\n    signal.signal(signal.SIGCHLD, wait_for_children_process)\n\n    # accept and loop \n    while True:    \n        try:\n            # Wait for client connections\n            client_connection, client_address = server_socket.accept()\n        except IOError as e:\n            code, msg = e.args\n            # restart 'accept' if it was interrupted\n            if code == errno.EINTR:\n                continue\n            else:\n                raise\n\n        # Get the client request\n        request = client_connection.recv(1024).decode()\n\n        \"\"\"\n        The simplest way to write a concurrent server in Unix\n        is to use the fork() system call\n\n        When a process forks a new process,\n        it becomes a parent process to that newly forked child process.\n\n        Parent and child share the same file descriptors after the call to fork.\n\n        The kernel uses descriptor reference counts \n        to decide whether to close the file/socket or not\n\n        The role of a server parent process: \n        1. all it does now is accept a new connection from a client, \n        2. fork a child to handle the client request, \n        3. and loop over to accept a new client connection.\n        \"\"\"\n        pid = os.fork()\n        if pid == 0:  # child\n            server_socket.close()  # close child copy\n            print(f'Child PID: {pid=os.getpid()}. Parent PID {ppid=os.getppid()}')\n            response = \"HTTP/1.1 200 OK\\n\\nHello, World!\"\n            client_connection.sendall(response.encode())\n            client_connection.close()\n            os._exit(0)  # child exits here\n        else:  # parent\n            client_connection.close()\n\n\nif __name__ == '__main__':\n    serve()\n\n"
        },
  
      {
        "title"    : "A* path-finding algorithm for a robot",
        "url"      : "/minik-robot/",
        "content"  : "Path finding algorithm of a robot named “minik”, running The Robot Operating System (ROS)\n\nIt detects obstacles with its camera and takes the shortest route to its target, avoiding obstacles\n\nrosThread.h\n\n#include &lt;ros/ros.h&gt;\n#include &lt;tf/tf.h&gt;\n#include &lt;QDebug&gt;\n#include &lt;QVector&gt;\n#include &lt;QObject&gt;\n#include &lt;nav_msgs/Odometry.h&gt;\n#include &lt;geometry_msgs/Pose.h&gt;\n#include &lt;std_msgs/Float32MultiArray.h&gt;\n#include &lt;minik_ros_wrapper/minikSetVelocityMsg.h&gt;\n#include \"math.h\"\n\nusing namespace std;\n\nstruct Obstacle{\npublic:\n    double x;\n    double y;\n    double r;\n};\n\nclass RosThread:public QObject\n{\n    Q_OBJECT\n\npublic:\n    RosThread();\n    ~RosThread();\n\nprivate:\n    ros::NodeHandle n;\n    ros::Publisher velPub;\n    ros::Subscriber odomSub;\n    ros::Subscriber targetSub;\n    ros::Subscriber obstacleSub;\n\n    // Define the global variables and prototype functions here\n\n    static constexpr double wheelRad = 0.045; // in meters\n    static constexpr double robotRadius = 0.1; // in meters\n\n    double travelDistance; //total travelled distance\n\n    double robotX;  // in meters\n    double robotY;  // in meters\n    double robotTh; // in radians\n\n    double targetX; // in meters\n    double targetY; // in meters\n    double targetTh; // in radians\n    \n    int completed;\n\n    std::vector&lt;Obstacle&gt; obstacles;\n\n    void demoLoop();\n    void odomHandler(const nav_msgs::OdometryConstPtr &amp;odomMsg);\n    void targetHandler(const geometry_msgs::PoseConstPtr &amp;targetMsg);\n    void obstacleHandler(const std_msgs::Float32MultiArrayConstPtr &amp;obstacleMsg);\n\n    void sendVelocityCommand(double leftWheel, double rightWheel); // meters per second\n    static const int ticks_per_meter = 10610;\n\n    double _lastX;\n    double _lastY;\n\npublic slots:\n     void work();\n\n};\n\n\n\nrosThread.cpp\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n#include \"rosThread.h\"\n\n#include &lt;iostream&gt;\n\n#include &lt;cmath&gt;\n\n#include &lt;vector&gt;\n\n#include &lt;unistd.h&gt;\n\n#include &lt;math.h&gt;\n\n\nusing namespace std;\nRosThread::RosThread() {\n  robotX = 0;\n  robotY = 0;\n  robotTh = 0;\n\n  targetX = 3;\n  targetY = 3;\n\n  travelDistance = 0;\n\n  completed = 0;\n\n  Obstacle temp1;\n\n  temp1.x = 1;\n  temp1.y = 1;\n  temp1.r = 0.2;\n\n  obstacles.push_back(temp1);\n\n}\n\nRosThread::~RosThread() {}\n\nvoid RosThread::work() {\n\n  velPub = n.advertise &lt; minik_ros_wrapper::minikSetVelocityMsg &gt; (\"minik_ros_wrapper/minikSetVelocityMsg\", 1);\n  odomSub = n.subscribe(\"odom\", 1, &amp; RosThread::odomHandler, this);\n  targetSub = n.subscribe(\"target\", 1, &amp; RosThread::targetHandler, this);\n  obstacleSub = n.subscribe(\"obstacles\", 1, &amp; RosThread::obstacleHandler, this);\n\n  ros::Rate loop(10);\n  while (ros::ok()) {\n\n    demoLoop();\n    ros::spinOnce();\n    loop.sleep();\n  }\n\n  qDebug() &lt;&lt; \"Quitting\";\n  ros::shutdown();\n}\n\nvoid RosThread::demoLoop() {\n  sendVelocityCommand(0.2, -0.2);\n  cout &lt;&lt; \"X: \" &lt;&lt; robotX &lt;&lt; \" \\t Y: \" &lt;&lt; robotY &lt;&lt; \" \\t Theta: \" &lt;&lt; robotTh &lt;&lt; endl;\n  if (obstacles.size() &gt; 0) {\n    cout &lt;&lt; \"oX: \" &lt;&lt; obstacles[0].x &lt;&lt; \" \\t oY: \" &lt;&lt; obstacles[0].y &lt;&lt; \" \\t oR: \" &lt;&lt; obstacles[0].r &lt;&lt; endl;\n  }\n}\n\nvoid RosThread::odomHandler(const nav_msgs::OdometryConstPtr &amp; odomMsg) {\n\n  //  ^ Y\n  //  |\t\t\t\t&lt;-- Th\n  //  |\t\t\t      |\n  //   -----&gt; X   \t\n  robotX = odomMsg -&gt; pose.pose.position.x;\n  robotY = odomMsg -&gt; pose.pose.position.y;\n\n  tf::Quaternion q(odomMsg -&gt; pose.pose.orientation.x, odomMsg -&gt; pose.pose.orientation.y,\n    odomMsg -&gt; pose.pose.orientation.z, odomMsg -&gt; pose.pose.orientation.w);\n  tf::Matrix3x3 m(q);\n  double roll, pitch, yaw;\n  m.getRPY(roll, pitch, yaw);\n\n  robotTh = yaw;\n\n  travelDistance += sqrt(pow(robotX - _lastX, 2) + pow(robotY - _lastY, 2));\n  _lastX = robotX;\n  _lastY = robotY;\n}\n\nvoid RosThread::targetHandler(const geometry_msgs::PoseConstPtr &amp; targetMsg) {\n\n  targetX = targetMsg -&gt; position.x;\n  targetY = targetMsg -&gt; position.y;\n\n}\n\nvoid RosThread::obstacleHandler(const std_msgs::Float32MultiArrayConstPtr &amp; obstacleMsg) {\n\n  obstacles.clear();\n\n  for (int i = 0; i &lt; obstacleMsg -&gt; layout.dim[0].size; i++) {\n\n    Obstacle temp;\n\n    temp.x = obstacleMsg -&gt; data[i * 3];\n    temp.y = obstacleMsg -&gt; data[i * 3 + 1];\n    temp.r = obstacleMsg -&gt; data[i * 3 + 2];\n\n    obstacles.push_back(temp);\n  }\n\n}\n\nvoid RosThread::sendVelocityCommand(double leftWheel, double rightWheel) {\n  int leftTick = leftWheel * ticks_per_meter;\n  int rightTick = rightWheel * ticks_per_meter;\n\n  minik_ros_wrapper::minikSetVelocityMsg msg;\n\n  vector &lt; int &gt; motorID;\n  motorID.push_back(0);\n  motorID.push_back(1);\n  msg.motorID = motorID;\n\n  vector &lt; int &gt; velocity;\n  velocity.push_back(leftTick);\n  velocity.push_back(rightTick);\n  msg.velocity = velocity;\n\n  velPub.publish(msg);\n}\n\n\nRobot Controller\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n\n#include &lt;iostream&gt;\n\n#include &lt;tuple&gt;\n\n#include &lt;cmath&gt;\n\n\nconst double PI = 3.141592653589793238463;\n\nusing namespace std;\n\nclass RobotController {\n  float robotRadius = 0.1;\n\n  float obstacleRadius = 0.2;\n\n  float vMax = 0.2;\n  float wMax = PI / 2;\n\n  float epsilon = 0.01;\n  int initial_degree = 0;\n\n  float axleLength = 0.2;\n  float wheelRadius = 0.045;\n  float wheelCircumference = 2 * PI * wheelRadius;\n  float topViewRobotCircumference = PI * axleLength;\n\n  float obstaclePositions[3][3];\n  float robotPosition[3] = {\n    0,\n    0,\n    0\n  };\n  float robotOrientation[3];\n\n  bool leftCameraDetectedObstacle;\n  float distanceLeft;\n  float leftPosition[];\n\n  bool rightCameraDetectedObstacle;\n  float distanceRight;\n  float rightPosition[];\n\n  tuple &lt; float, float &gt; subtract_arrays(float x[], float y[]) {\n    float dx = x[0] - y[0];\n    float dy = x[1] - y[1];\n    return make_tuple(dx, dy);\n  }\n\n  float euclidean_distance(float dx, float dy) {\n    return dx * dx + dy * dy;\n  }\n\n  float get_distance(float currentPosition[], float distantPosition[]) {\n    float dx, dy;\n    tie(dx, dy) = subtract_arrays(currentPosition, distantPosition);\n    float distance = euclidean_distance(dx, dy);\n    return distance;\n  }\n\n  public: void go() {\n    bool is_first_obstacle = true;\n    if (initial_degree &lt; 360) {\n      setRobotSpeed(0, 3);\n      initial_degree = initial_degree + 6;\n\n      if (leftCameraDetectedObstacle == true and is_first_obstacle == true) {\n        obstaclePositions[0][0] = leftPosition[0] + robotPosition[0];\n        obstaclePositions[0][1] = leftPosition[1] + robotPosition[1];\n        obstaclePositions[0][2] = leftPosition[2] + robotPosition[2];\n\n        is_first_obstacle = false;\n      }\n\n    } else {\n\n      float robotTheta = robotOrientation[3] + PI / 2;\n\n      // Get from cameras\n      float goalPosition[3];\n      float obstaclePositions[3][3];\n\n      float distance_to_goal = get_distance(robotPosition, goalPosition);\n\n      float position_of_middle_of_obstacles[3];\n      float distance_from_middle_of_obstacles = get_distance(robotPosition, position_of_middle_of_obstacles);\n\n      bool any_obstacle = true;\n      float Fx, Fy;\n\n      if (any_obstacle == true) {\n        tie(Fx, Fy) = calculateGradient(position_of_middle_of_obstacles, robotPosition, obstaclePositions);\n\n      } else {\n        tie(Fx, Fy) = calculateGradient(goalPosition, robotPosition, obstaclePositions);\n      }\n\n      float v = 0;\n      float w = 0;\n\n      float Fmag = sqrt(Fx * Fx + Fy * Fy);\n      float Fth = atan2(Fy, Fx);\n\n      float th = Fth - robotTheta;\n\n      v = vMax * cos(th);\n      w = wMax * sin(th);\n\n      if (distance_from_middle_of_obstacles &lt; epsilon) {\n        any_obstacle = false;\n      }\n\n      if (distance_to_goal &lt; epsilon) {\n        setRobotSpeed(0, 0);\n      } else {\n        setRobotSpeed(v, w);\n      }\n\n    }\n\n  }\n\n  bool sign(int x) {\n    return (x &gt; 0 and 1) or(x &lt; 0 and - 1) or 0;\n  }\n\n  tuple &lt; float, float &gt; calculateGradient(float goalPosition[], float robotPosition[], float obstaclePositions[3][3]) {\n    float Fx = 0;\n    float Fy = 0;\n\n    float dgx, dgy, do1x, do1y, do2x, do2y, do3x, do3y;\n\n    tie(dgx, dgy) = subtract_arrays(robotPosition, goalPosition);\n\n    tie(do1x, do1y) = subtract_arrays(robotPosition, obstaclePositions[0]);\n\n    tie(do2x, do2y) = subtract_arrays(robotPosition, obstaclePositions[1]);\n\n    tie(do3x, do3y) = subtract_arrays(robotPosition, obstaclePositions[2]);\n\n    float gamma = dgx * dgx + dgy * dgy;\n\n    float B1 = do1x * do1x + do1y * do1y - (robotRadius + obstacleRadius) * (robotRadius + obstacleRadius);\n    float B2 = do2x * do2x + do2y * do2y - (robotRadius + obstacleRadius) * (robotRadius + obstacleRadius);\n    float B3 = do3x * do3x + do3y * do3y - (robotRadius + obstacleRadius) * (robotRadius + obstacleRadius);\n\n    float B = B1 * B2 * B3;\n\n    int k = 5;\n    Fx = (k * pow(gamma, k - 1) * 2 * dgx * B - pow(gamma, k) * (2 * do1x * B2 * B3 + 2 * do2x * B1 * B3 + 2 * do3x * B2 * B1)) / (B * B);\n    Fy = (k * pow(gamma, k - 1) * 2 * dgy * B - pow(gamma, k) * (2 * do1y * B2 * B3 + 2 * do2y * B1 * B3 + 2 * do3y * B2 * B1)) / (B * B);\n\n    return make_tuple(-Fx, -Fy);\n\n  }\n\n  void setRobotSpeed(float transVel, float rotVel) {\n    // Convert speed to rad/sec\n    transVel = transVel / wheelCircumference * 2 * PI;\n    rotVel = rotVel * (topViewRobotCircumference / wheelCircumference);\n\n    // Give speed to both left and right motor\n    float leftMotorSpeed = transVel - rotVel;\n    float rightMotorSpeed = -transVel - rotVel;\n\n    int tau_max = 5;\n\n    if (abs(leftMotorSpeed) &gt; tau_max) {\n      leftMotorSpeed = sign(leftMotorSpeed) * tau_max;\n    }\n\n    if (abs(rightMotorSpeed) &gt; tau_max) {\n      rightMotorSpeed = sign(rightMotorSpeed) * tau_max;\n    }\n  }\n\n};\n\nint main() {\n  std::cout &lt;&lt; \"Hello World!\\n\";\n  RobotController controller = RobotController();\n  controller.go();\n\n}\n\n"
        },
  
      {
        "title"    : "An interpreter in Python",
        "url"      : "/pascal-interpreter/",
        "content"  : "for a subset of PASCAL\n\nInspired by Peter Norvig’s (How to Write a (Lisp) Interpreter (in Python)) and Ruslan’s interpreter series\n\nView step by step at https://github.com/selimslab/mini/tree/master/pascal\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n\"\"\"\nA program is just some text. \nAn interpreter translates it into something that can be evaluated\n\nprogram text -&gt; Tokenizer -&gt; tokens -&gt; Parser -&gt; abstract syntax tree -&gt; Evaluator -&gt; result \n\nlet's say our program is 2 * 7 + 3\n\n1. First step is lexical analysis, a fancy term for tokenizing \n\nLexer creates tokens [2, *, 7, +, 3]\n\n2. Second is the syntax analysis or parsing \n\nParser takes the tokens and produces and intermediate representation or IR\n\nabstract syntax tree (AST) is an IR only values and operators, no metadata \n\nWhen we put operators between the literals like 1+2 it's infix notation \n\nTo create the graph, parser turns infix to prefix notation \n\nSo 2 * 7 + 3 becomes + 3 * 7 2 \n\nhere is the AST for 2 * 7 + 3\n\n     +\n    / \\\n   *   3\n  / \\\n 2   7\n\n3. Interpreter evaluates the AST \n\none way to implement an interpreter is visitor pattern \nsince it makes it easy to add new operations later \n\nVisit the nodes and execute operations\n\n\"\"\"\n\n\n\n# LEXER or Tokenizer\nfrom enum import Enum\n\n\nclass TokenType(Enum):\n    PLUS = '+'\n    MINUS = \"-\"\n    INTEGER = 'INTEGER'\n    EOF = 'EOF'\n    MUL = \"*\"\n    DIV = \"/\"\n    LPAREN = \"(\"\n    RPAREN = \")\"\n\n\n@dataclass \nclass Token:\n    type: TokenType\n    value: str\n\nclass LexerError(Exception):\n    pass\n\n\nclass Lexer:\n    \"\"\"\n    Tokenizer\n    it is also called a lexical analyzer or scanner\n    \"\"\"\n    def __init__(self, text):\n        self.text = text\n        self.pos = 0\n        self.current_char = self.text[self.pos]\n\n    def advance(self):\n        \"\"\"Advance the 'pos' pointer and set the 'current_char' variable.\"\"\"\n        self.pos += 1\n        if self.pos &gt; len(self.text) - 1:\n            self.current_char = None  # Indicates end of input\n        else:\n            self.current_char = self.text[self.pos]\n\n    def skip_whitespace(self):\n        while self.current_char is not None and self.current_char.isspace():\n            self.advance()\n\n    def multidigit(self):\n        \"\"\"Return a (multidigit) integer consumed from the input.\"\"\"\n        result = ''\n        while self.current_char is not None and self.current_char.isdigit():\n            result += self.current_char\n            self.advance()\n        return result\n\n    def get_next_token(self):\n        while self.current_char is not None:\n\n            if self.current_char.isspace():\n                self.skip_whitespace()\n                continue\n\n            if self.current_char.isdigit():\n                value = self.multidigit()\n                return Token(TokenType.INTEGER, int(value))\n\n            try:\n                # TokenType('+') --&gt; TokenType.PLUS\n                token_type = TokenType(self.current_char)\n                self.advance()\n                return Token(token_type, token_type.value)\n            except ValueError:\n                raise\n\n        return Token(TokenType.EOF, None)\n\n\n# AST \nclass ASTNode:\n    pass\n\nclass BinaryOperator(ASTNode):\n    def __init__(self, left, op, right):\n        self.left = left\n        self.token = self.op = op\n        self.right = right\n\n\nclass Integer(ASTNode):\n    def __init__(self, token):\n        self.token = token\n        self.value = token.value\n\n\n\n\n# PARSER \n\nclass ParserError(Exception):\n    pass\n\n\nclass Parser:\n    \"\"\"\n    \"\"\"\n    def __init__(self, tokenizer):\n        self.tokenizer = tokenizer\n        self.current_token = self.tokenizer.get_next_token()\n\n    def eat(self, token_type):\n        if self.current_token.type == token_type:\n            self.current_token = self.tokenizer.get_next_token()\n        else:\n            raise ParserError(f\"invalid input, {self.current_token.type, token_type}\")\n\n    def factor(self):\n        \"\"\"\n        factor : int or (expr)\n        \"\"\"\n        token = self.current_token\n\n        if token.type == TokenType.INTEGER:\n            self.eat(TokenType.INTEGER)\n            return Integer(token)\n        elif token.type == TokenType.LPAREN:\n            self.eat(TokenType.LPAREN)\n            node = self.expr()\n            self.eat(TokenType.RPAREN)\n            return node\n\n    def term(self):\n        \"\"\"\n        term   : factor (* or / factor)..\n        \"\"\"\n        node = self.factor()\n\n        while self.current_token.type in (TokenType.MUL, TokenType.DIV):\n            token = self.current_token\n            if token.type == TokenType.MUL:\n                self.eat(TokenType.MUL)\n            elif token.type == TokenType.DIV:\n                self.eat(TokenType.DIV)\n\n            node = BinaryOperator(left=node, op=token, right=self.factor())\n\n        return node\n\n    def expr(self):\n        \"\"\"\n        expr   : term ( + or - term)..\n        term   : factor (* or / factor)..\n        factor : int or (expr)\n        \"\"\"\n        node = self.term()\n\n        while self.current_token.type in (TokenType.PLUS, TokenType.MINUS):\n            token = self.current_token\n            if token.type == TokenType.PLUS:\n                self.eat(TokenType.PLUS)\n            elif token.type == TokenType.MINUS:\n                self.eat(TokenType.MINUS)\n\n            node = BinaryOperator(left=node, op=token, right=self.term())\n\n        return node\n\n    def program(self):\n        return self.expr()\n\n    def parse(self):\n        return self.program()\n\n\n\n\n# INTERPRETER\n\nclass NodeVisitorError(Exception):\n    pass\n\n\nclass InterpreterError(Exception):\n    pass\n\n\nclass NodeVisitor:\n    def visit(self, node):\n        method_name = 'visit_' + type(node).__name__\n        visitor = getattr(self, method_name, self.generic_visit)\n        return visitor(node)\n\n    def generic_visit(self, node):\n        raise NodeVisitorError(f'No method to visit {type(node).__name__}')\n\n\nclass Interpreter(NodeVisitor):\n    def __init__(self, parser):\n        self.parser = parser\n\n    def visit_BinaryOperator(self, node):\n        left = self.visit(node.left)\n        right = self.visit(node.right)\n        if node.op.type == TokenType.PLUS:\n            return left + right\n        elif node.op.type == TokenType.MINUS:\n            return left - right\n        elif node.op.type == TokenType.MUL:\n            return left * right\n        elif node.op.type == TokenType.DIV:\n            return left // right\n\n    def visit_Integer(self, node):\n        return node.value\n\n    def eval(self, ast:ASTNode):\n        return self.visit(ast)\n\n\ndef eval_program(program:str):\n    lexer = Lexer(program)\n    parser = Parser(lexer)\n    ast = parser.parse()\n    interpreter = Interpreter(parser)\n    result = interpreter.eval(ast)\n    return result\n\n\ndef repl():\n    while True:\n        program = input('repl&gt; ')\n        print(program)\n        if program:\n            try:\n                result = eval_program(program)\n                print(result)\n            except (ParserError, LexerError, NodeVisitorError) as e:\n                print(e)\n\n\ndef test_paspy():\n    test_cases = [\n        (\"2+2\",4),\n        (\" 23432 *   423 \", 9911736),\n        (\" (1024/16)+36*2 \", 136)\n\n    ]\n    for case, expected_answer in test_cases:\n        assert eval_program(case) == expected_answer\n\n    print(\"OK\")\n\n\nif __name__ == '__main__':\n    test_paspy()\n    repl()\n\n\n"
        },
  
      {
        "title"    : "Principal Component Analysis",
        "url"      : "/pca/",
        "content"  : "Sometimes a few dimensions explain most of the variability\n\nHere 96 dimensional feature vectors are generated by Gaussian distributions\n\nThen they are reduced to 3 dimensions using Principal Componenet Analysis\n\nThen they are visualized and classified\n\nclick to view the colab notebook\n"
        },
  
      {
        "title"    : "Pneumonia Detection",
        "url"      : "/pneumonia-detection/",
        "content"  : "My senior project\n\nAnalysis and Comparison of Machine Learning Techniques for Detecting Pneumonia Signs in Medical Images\n"
        },
  
      {
        "title"    : "Predict movie genres using ML classifiers",
        "url"      : "/predict-movie-genres/",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n\"\"\" \nMachine Learning model to predict the genres of a movie from its summary \n\"\"\"\nimport os\nimport pickle\nfrom io import StringIO\n\nfrom flask import Flask, request\n\nfrom sklearn.preprocessing import MultiLabelBinarizer\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.feature_extraction.text import TfidfTransformer\n\nfrom sklearn.ensemble import RandomForestClassifier\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.multiclass import OneVsRestClassifier\nfrom sklearn.pipeline import Pipeline\n\nimport nltk\nfrom nltk.corpus import stopwords\nfrom nltk.stem import PorterStemmer\n\nfrom joblib import dump, load\n\nimport numpy as np\nimport pandas as pd\n\n\napp = Flask(__name__)\n\nCLASSIFIER_PATH = \"clf.joblib\"\nBINARIZER_PATH = \"binary_classes.pickle\"\n\n\ndef clean(X):\n    nltk.download(\"stopwords\")\n    stop_words = stopwords.words(\"english\")\n    ps = PorterStemmer()\n\n    def stem_sentence(sentence):\n        return \" \".join(\n            [ps.stem(word) for word in sentence.split() if word not in stop_words]\n        )\n\n    X = [stem_sentence(sentence) for sentence in X]\n\n    return X\n\n\ndef bytes_to_df(bytes:bytes):\n    string_data = StringIO(str(bytes, \"utf-8\"))\n    df = pd.read_csv(string_data)\n    return df \n\ndef get_binarized_labels(df):\n    genres = df.genres.values\n    \n    genre_lists = [line.split() for line in genres]\n    \n    multilabel_binarizer = MultiLabelBinarizer().fit(genre_lists)\n    \n    binary_classes = multilabel_binarizer.classes_\n\n    with open(BINARIZER_PATH, \"wb\") as handle:\n        pickle.dump(binary_classes, handle, protocol=pickle.HIGHEST_PROTOCOL)\n\n    y_train = multilabel_binarizer.transform(genre_lists)\n\n    return y_train\n\ndef get_multi_label_clf():\n    rf = RandomForestClassifier()\n    multi_label_clf = Pipeline(\n        [\n            (\"vect\", CountVectorizer()),\n            (\"tfidf\", TfidfTransformer()),\n            (\"clf\", OneVsRestClassifier(rf)),\n        ]\n    )\n    return multi_label_clf\n\n\n@app.route(\"/genres/train\", methods=[\"POST\"])\ndef train():\n    \"\"\"\n    Post a CSV with header movie_id,synopsis,genres.\n\n    where genres is a space-separated list of movie genres.\n    :return:\n    Get the training result\n\n    \"\"\"\n    _train(request.data)\n\ndef _train(csv_bytes):\n    df = bytes_to_df(csv_bytes)\n\n    X_train = df.synopsis.values\n    y_train = get_binarized_labels(df)\n\n    multi_label_clf = get_multi_label_clf()\n    multi_label_clf.fit(X_train, y_train)\n    dump(multi_label_clf, CLASSIFIER_PATH)\n\n    return \"training successful!\"\n\n\n\n@app.route(\"/genres/predict\", methods=[\"POST\"])\ndef predict():\n    \"\"\"\n    Post a CSV with header movie_id,synopsis.\n\n    :return:\n    Get a CSV with header movie_id,predicted_genres,\n\n    where predicted_genres is a space-separated list of the top 5 movie genres.\n    \"\"\"\n    _predict(request.data)\n    return 200\n\n\ndef _predict(csv_bytes):\n    df = bytes_to_df(csv_bytes)\n\n    top_n_indexes = get_top_n_indexes(df, 5)\n\n    df[\"predicted_genres\"] = get_predicted_genres(top_n_indexes)\n\n    df = df.drop([\"synopsis\"], axis=1)\n\n    return df.to_csv(index=False)\n\n\ndef get_top_n_indexes(df, n):\n    X_test = df.synopsis.values\n\n    multi_label_clf = load(CLASSIFIER_PATH)\n    y_pred_prob = multi_label_clf.predict_proba(X_test)\n    top_n_indexes = np.argsort(y_pred_prob, axis=1)[:, -n:]\n\n    return top_n_indexes\n\ndef get_predicted_genres(top_n_indexes):\n    with open(BINARIZER_PATH, \"rb\") as handle:\n        binary_classes = pickle.load(handle)\n\n    top_n_classes = binary_classes[top_n_indexes]\n\n    predicted_genres = [\" \".join(reversed(row)) for row in top_n_classes]\n\n    return predicted_genres\n\n"
        },
  
      {
        "title"    : "Projects",
        "url"      : "/projects/",
        "content"  : "\n"
        },
  
      {
        "title"    : "VGA Driver",
        "url"      : "/vga-driver/",
        "content"  : "It’s for a game similar to Doodle Jump,\n\nTried on ARM Cortex A9 microcontroller\n\nWe will need some routines to draw boxes, display text etc.\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n/****************************************************************************************\n * Subroutine to send a string of text to the VGA monitor \n ****************************************************************************************/\nvoid VGA_text(int x, int y, char * text_ptr) {\n  int offset;\n  volatile char * character_buffer = (char * ) FPGA_CHAR_BASE; // VGA character buffer\n\n  /* assume that the text string fits on one line */\n  offset = (y &lt;&lt; 7) + x;\n  while ( * (text_ptr)) {\n    *(character_buffer + offset) = * (text_ptr); // write to the character buffer\n    ++text_ptr;\n    ++offset;\n  }\n}\n\n/****************************************************************************************\n * Draw a filled rectangle on the VGA monitor \n ****************************************************************************************/\nvoid VGA_box(int x1, int y1, int x2, int y2, short pixel_color) {\n  int pixel_ptr, row, col;\n\n  /* assume that the box coordinates are valid */\n  for (row = y1; row &lt;= y2; row++)\n    for (col = x1; col &lt;= x2; ++col) {\n      pixel_ptr = FPGA_ONCHIP_BASE + (row &lt;&lt; 10) + (col &lt;&lt; 1);\n      *(short * ) pixel_ptr = pixel_color; // set pixel color\n    }\n}\n\n/****************************************************************************************\n * Subroutine to show a string of HEX data on the HEX displays\n ****************************************************************************************/\nvoid HEX_PS2(char b1, char b2, char b3) {\n  volatile int * HEX3_HEX0_ptr = (int * ) HEX3_HEX0_BASE;\n  volatile int * HEX5_HEX4_ptr = (int * ) HEX5_HEX4_BASE;\n\n  /* SEVEN_SEGMENT_DECODE_TABLE gives the on/off settings for all segments in \n   * a single 7-seg display in the DE1-SoC Computer, for the hex digits 0 - F */\n  unsigned char seven_seg_decode_table[] = {\n    0x3F,\n    0x06,\n    0x5B,\n    0x4F,\n    0x66,\n    0x6D,\n    0x7C,\n    0x07,\n    0x7F,\n    0x67,\n    0x77,\n    0x7C,\n    0x39,\n    0x5E,\n    0x79,\n    0x71\n  };\n  unsigned char hex_segs[] = {\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0\n  };\n  unsigned int shift_buffer, nibble;\n  unsigned char code;\n  int i;\n\n  shift_buffer = (b1 &lt;&lt; 16) | (b2 &lt;&lt; 8) | b3;\n  for (i = 0; i &lt; 6; ++i) {\n    nibble = shift_buffer &amp; 0x0000000F; // character is in rightmost nibble\n    code = seven_seg_decode_table[nibble];\n    hex_segs[i] = code;\n    shift_buffer = shift_buffer &gt;&gt; 4;\n  }\n  /* drive the hex displays */\n  *(HEX3_HEX0_ptr) = * (int * )(hex_segs);\n  *(HEX5_HEX4_ptr) = * (int * )(hex_segs + 4);\n}\n\nint resample_rgb(int num_bits, int color) {\n  if (num_bits == 8) {\n    color = (((color &gt;&gt; 16) &amp; 0x000000E0) | ((color &gt;&gt; 11) &amp; 0x0000001C) |\n      ((color &gt;&gt; 6) &amp; 0x00000003));\n    color = (color &lt;&lt; 8) | color;\n  } else if (num_bits == 16) {\n    color = (((color &gt;&gt; 8) &amp; 0x0000F800) | ((color &gt;&gt; 5) &amp; 0x000007E0) |\n      ((color &gt;&gt; 3) &amp; 0x0000001F));\n  }\n  return color;\n}\n\n\n"
        },
  
      {
        "title"    : "Authentication",
        "url"      : "/authentication/",
        "content"  : "\n\nPractically, the auth info provided is either\n\n  something the user knows (like a password, PIN, or key)\n  something the user has (like a smart card or proof of possession of a smart phone)\n  something the user is (like the user’s fingerprint, voice, or face)\n\n\nKeys are more general, passwords are more specific\n\nFor example a million users of a website can verify the site with a single certificate, while each user have their own password\n\nSome auth good practices\n\nUse 2-factor\n\nAdd exponential delay to repeated login attempts\n\nLock account after repeated failed login attempts\n\nUse authorization levels.\n\nLeast privilege, never grant more access than required.\n\nSeparation of privileges, so your system is not all or nothing\n\nUse allow-lists, not block-lists\n\nMS auth\n\n\n  Manage redirect URIs:\n    \n      Own and update DNS records\n      Avoid wildcards in URIs\n      Ensure HTTPS for web app URIs\n      Use platform-specific or random URIs for public clients\n      Utilize specific URI for isolated web agents\n      Regularly review and remove unused URIs\n    \n  \n  Directory app registration:\n    \n      Minimize and manually monitor owners\n    \n  \n  OAuth2 implicit grant flow:\n    \n      Enable only when explicitly required\n    \n  \n  Avoid resource owner password credential flow (ROPC):\n    \n      Use more secure authentication flows\n      Consider specific scenarios like DevOps\n    \n  \n  Protect confidential app credentials:\n    \n      Prefer certificate credentials over passwords\n      Avoid manual setting of passwords\n      Use Azure Key Vault or managed identities for storage and rotation\n    \n  \n  Request least privilege permissions:\n    \n      Only request necessary permissions\n      Understand application vs delegated permissions\n    \n  \n  Secure API permissions\n    \n      Define permissions granularly\n      Admin consent for critical permissions\n      Validate expected permissions in tokens before authorization\n    \n  \n  Use modern authentication solutions (OAuth 2.0, OpenID Connect) for user sign-ins.\n  Leverage Microsoft Authentication Library (MSAL) instead of direct protocol programming.\n  Do not parse or rely on access tokens in client applications; use ID tokens for user-related information.\n  Migrate apps from Azure AD Authentication Library (ADAL) to MSAL for improved security and support.\n  Configure mobile apps with broker redirect URIs for single sign-on using Microsoft Authenticator or Company Portal.\n  Maintain one token cache per account in web apps and web APIs for efficient token management.\n  \n    Request data permissions through Microsoft Graph endpoint for integrated data access.\n  \n  Understand and configure consent prompts to inform end users and admins adequately.\n  Minimize user login prompts by using silent authentication wherever possible.\n  Avoid using “prompt=consent” unnecessarily; use it only when additional permissions are required.\n  Enrich application functionality with user data via Microsoft Graph API.\n  Register all necessary permissions for easy admin consent and use incremental consent for user understanding.\n  Implement a seamless single sign-out experience for privacy, security, and user satisfaction.\n\n"
        },
  
      {
        "title"    : "Authorization",
        "url"      : "/authorization/",
        "content"  : "Yes they are authenticated now, yet what they are authorized to do?\n\nFor example an OS sets different capabilities for different users\n\nOr a web app might have read/write permissions for each user\n\nAuthorization levels helps managing the permissions\n\n"
        },
  
      {
        "title"    : "Certificates",
        "url"      : "/certificates/",
        "content"  : "How do we know a public key really belongs to Alice?\n\nAnyone could come and claim they are Alice,\n\nWe need a mechanism to ensure that the public key really belongs to Alice\n\n\n\nIn reality, you trust some entity, and it trusts others\n\nFor example, imagine you visit a website claiming to be your bank, how can you trust it?\n\nYour browser or operating system comes with pre-configured certificate authorities (CA), they are your root certificates\n\n\n  a website shares its public key with a CA\n  CA verifies they are the bank indeed, and signs their public key\n  the website hands you the certificate\n\n\nYet how do you trust this is signed by the CA indeed?\n\nSomeone else signed the CAs public key, too\n\nYou keep checking the certificates until you reach a trusted root certificate at the bottom\n\nso its turtles all the way down\n"
        },
  
      {
        "title"    : "Cookies",
        "url"      : "/cookies/",
        "content"  : "They are mainly used for managing sessions, tracking, and personalization\n\nPrepend with __Host- to restrict cookie on a specific domain (no subdomains)\n\nPrepend cookies with __Secure- to prevent them from being overwritten.\n\n__Host- prefix is stricter than __Secure\n\nExpires set an expiration\n\nSecure header make cookies HTTPS\n\nHTTPOnly header to prevent JavaScript access\n\nSameSite to prevent sending the cookie via cross-origin requests\n\n1\ndocument.cookie = \"_Host-username=Jane; Secure; HttpOnly; Path=/; SameSite=Strict\";\n\n"
        },
  
      {
        "title"    : "Cross-origin Resource Sharing (CORS)",
        "url"      : "/cors/",
        "content"  : "an origin is a tuple of protocol:host:port\n\nAccess-Control-Allow-Origin: https://x.com:8081  only the specified origin can access\n\nAccess-Control-Allow-Origin: * every origin can access\n\nBy default, browser XMLHttpRequest or fetch APIs allows same-origin only\n\nUse Access-Control-Allow-Origin to manage CORS\n\nUse integrity to verify a resource is not modified on the way\n\nUse X-Frame-Options: DENY to disallow allow attempts to iframe site\n\nmore on CORS\n"
        },
  
      {
        "title"    : "Cross-site request forgery",
        "url"      : "/csrf/",
        "content"  : "CSRF is forgery of a valid request.\n\nIt is possible to forge a fake request if\n\n  the only mechanism to track user session is a cookie,\n  all request parameters predictable\n\n\nTo prevent it, we need at least one unpredictable parameter, a CSRF token.\n\nThis token is a large random value, unique per user &amp; per user session.\n\nMake sure your forms have CSRF tokens.\n\n\n\nCSRF tokens should not be sent within cookies.\n\nUse SameSite header to forbid sending the cookie via cross-origin requests\n\nmore on CSRF\n"
        },
  
      {
        "title"    : "How to encrypt-decrypt a file with a password",
        "url"      : "/openssl-encrypt/",
        "content"  : "openssl comes pre-installed on Mac OS\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n# encrypt file.txt to file.enc using 256-bit AES in CBC mode\nopenssl enc -aes-256-cbc -salt -in file.txt -out file.enc\n\n# the same, only the output is base64 encoded for, e.g., e-mail\nopenssl enc -aes-256-cbc -a -salt -in file.txt -out file.enc\n\n# decrypt binary file.enc\nopenssl enc -d -aes-256-cbc -in file.enc -out file.txt\n\n# decrypt base64-encoded version\nopenssl enc -d -aes-256-cbc -a -in file.enc -out file.txt\n\n\n256-bit AES ecryption with Cipher Block Chaining (CBC) is about as secure as it gets\n\nfrom https://superuser.com/a/370412\n\nA Stick Figure Guide to the Advanced Encryption Standard (AES)\n"
        },
  
      {
        "title"    : "Public Key Cryptography",
        "url"      : "/public-key-cryptography/",
        "content"  : "A key is a piece of information, usually a string of numbers or letters\n\nIf you use a single key, its symmetric cryptography\n\nPublic-key, or asymmetric cryptography, is a system that uses pairs of keys based on mathematical one-way functions\n\n\n\nThere are two keys, one public, one private, they are a pair\n\nOnly the private key can decrypt a message which is encrypted with its public key\n\nAnd public key can verify if a message is signed with its private key\n\neg.\n\n\n  Alice and Bob shares their public keys in the open,\n\n\nBob\n\n  writes a message to Alice\n  signs it with his private key\n  encrypts it using Alice’s public key and\n\n\nAlice\n\n  Gets the encrypted message\n  Opens it using her private key\n  Verifies the signature using Bob’s public key\n\n\nDiffie–Hellman key exchange - Wikipedia\n\nA Stick Figure Guide to the Advanced Encryption Standard (AES)\n"
        },
  
      {
        "title"    : "Security Heuristics",
        "url"      : "/security-heuristics/",
        "content"  : "\n\nPrevent problems before they happen\n\nWhat can go wrong?\n\nModel possible threats\n\nSimpler the system, smaller the attack surface\n\nValidate\n\nSanitize\n\nIsolate\n\nParametrize queries to prevent SQL injection\n\nDon’t try to roll your own security solutions, it’s a community effort\n\nalso see:\n\nPick a Vulnerability to Learn About\n\nBest practices for managing &amp; storing secrets like API keys and other credentials [2020]\n\nWhat should every programmer know about security? - Stack Overflow\n\nNewest ‘security’ Questions - Stack Overflow\n"
        },
  
      {
        "title"    : "Security",
        "url"      : "/security/",
        "content"  : "\n"
        },
  
      {
        "title"    : "How to store passwords?",
        "url"      : "/store-passwords/",
        "content"  : "A password should be secure even if the database is compromised. So we store a derived value instead. The result of a one-way function. And we call this a hash function.\n\npassword -&gt; HASH FUNCTION -&gt; hash of the password\n\nThis is good but can be better. Hash functions are not secret. An attacker can pre-compute hashes for common passwords, create a table, and compare with them. Rainbow tables are of similar logic.\n\nBut if we add a random part to the password, the hash will be unique. This random part is called a salt.\n\npassword + salt -&gt; HASH FUNCTION -&gt; hash of the password\n\nNow it’s safe to store the salt and the hash instead of the password.\n\nWhen a user provides their password, authentication logic can salt it, hash it, and compare the result with the stored hash.\n\n"
        },
  
      {
        "title"    : "Transport Layer Security",
        "url"      : "/transport-layer-security/",
        "content"  : "Transport layer security\n\nAn improved and more secure version of SSL\n\na standard communication method between processes is the socket\n\np1 – socket – p2\n\nTLS is a protocol to enable a socket to encrypt outgoing messages and decrypt the incoming\n\n"
        },
  
      {
        "title"    : "Cross-site scripting",
        "url"      : "/xss/",
        "content"  : "It is injecting malicious code into a website so user’s browser executes it\n\nTo prevent, validate and encode. For example &lt;script&gt; would be encoded as &amp;lt;script&amp;gt;\n\nSet Content Security Policy header\n\nso the browser will run only allow the white-listed scripts and assets\n\nBy using CSP to disable inline JavaScript, you can effectively eliminate almost all XSS attacks against your site.\n\nDisabling inline JavaScript means that all JavaScript must be loaded from script src tags.\n\nan example CSP response header\n\n1\n2\n3\n4\n5\n6\n7\nContent-Security-Policy: \ndefault-src 'none'; \nobject-src 'none'; \nscript-src 'self'; \nstyle-src 'self';\nimg-src 'self' 'https://i.imgur.com';\nfont-src 'https://fonts.googleapis.com';\n\n"
        },
  
      {
        "title"    : "Code Review",
        "url"      : "/code-review/",
        "content"  : "easily understandable?\n\nsensible?\n\nwell-designed?\n\nuser friendly?\n\nfunctional?\n\nsecure?\n\nperformant?\n\nhas tests?\n\neasy to maintain?\n\ndocumented?\n\nno unnecessary complexity?\n\nare commits clear, small, with good summaries and tags?\n\nconforms to style guides?\n\n\n\nKind and respectful\n\nGive credit where its due\n\nCompliment people for the good parts\n\n\n"
        },
  
      {
        "title"    : "Core Concepts",
        "url"      : "/core-concepts/",
        "content"  : "Software Lifecycle\n\nDesign/Spec\n\nImplementation\n\nTests\n\nCode review and CI\n\nSecurity review\n\nAccessibility review\n\nPM review\n\nPublic and private docs\n\nMonitoring, Logging, Telemetry, automation -&gt; scale, recover, restart\n\nDeployment, stations\n\nTroubleshooting, Postmortems\n\nVersioning, Backward compatibility\n\nDeprecation\n\nTechnical\n\nComputer architecture/ cpu, gpu, ram, L1, L2 caches, assembly, fetch-decode-execute, stack, registers\n\nAssembly, C, bootloader, kernel, shell,\n\nvirtual memory, memory protection\n\ncontext switching, scheduling\n\nfile system\n\nprogram, code, data, stack, heap, program counter\n\nstatic vars and func inputs and returns on the stack, dynamically allocated data on the heap\n\npointer, call by value/reference\n\nGarbage collection\n\ncritical section, sync mechanisms, locks(mutex, semaphore), immutable vars, read/write locks, condition vars, message passing, futures/promises\n\ndata storage, memory vs file vs DB\n\nOOP, SOLID, functional/event-driven/declarative programming\n\nRelational DBs, SQL, NoSQL\n\nNetworking, ethernet, TCP/IP, packet switching, UDP, HTTP\n\nHTTP vs HTTPS, public key cryptography\n\nwebsocket, webhooks\n\nAPI design, HTTP codes, paging, versioning, security\n\n"
        },
  
      {
        "title"    : "On Software",
        "url"      : "/on-software/",
        "content"  : "“Show me your flowchart and conceal your tables, and I shall continue to be mystified. Show me your tables, and I won’t usually need your flowchart; it’ll be obvious.” – Fred Brooks, The Mythical Man Month\n\nA little duplication is better than a new dependency\n\nBest practices are not always the best way. article\n\nThe Big Rewrite can be the answer sometimes but more often not, see Things You Should Never Do, Part I – Joel on Software\n\nShip It\n\nComputers are useless. They can only give you answers.\n    - Pablo Picasso\n\n\n\n"
        },
  
      {
        "title"    : "Software Analogies",
        "url"      : "/software-analogies/",
        "content"  : "“All models are wrong but some are useful”\n\nThe most common one is the building analogy, “architecture”, “development”\n\nFilm-making analogy is sometimes more natural since manufacturing implies tangible products, software is closer to a movie in many ways\n\nFilm Making: A Better Software Development Metaphor · Los Techies\n\nThere is also parallels with crafts and mathematics\n\nThere is no best analogy, if it helps to explain or understand, it’s useful.\n\nCar analogy\n\nThe engine, transmission - Server-side/Backend\n\nThe chassis - Client-side/Front End\n\nDashboard - Analytics\n\nInterior controls - UI design\n\nThe overall feeling of driving experience - UX\n\nWarning Lights - Monitoring\n\n"
        },
  
      {
        "title"    : "Software Engineering",
        "url"      : "/software-engineering/",
        "content"  : "Books\n\nThe Mythical Man-Month: Essays on Software Engineering\n\nSoftware Engineering at Google: Lessons Learned from Programming Over Time\n\nHackers &amp; Painters: Big Ideas from the Computer Age\n\nThinking in Systems: A Primer\n\nDependency management\n\nStatic linking, pinning, and bundling(vendoring) have all downsides\n\nhttps://blogs.gentoo.org/mgorny/2021/02/19/the-modern-packagers-security-nightmare/\n"
        },
  
      {
        "title"    : "Is High Quality Software Worth the Cost?",
        "url"      : "/software-quality/",
        "content"  : "Software builds up cruft with time, even a great team will have cruft. If you neglect to regularly clean and re-order, the quality and development speed will rapidly go down\n\nfrom https://martinfowler.com/articles/is-quality-worth-cost.html\n\n\n\n\n\n"
        },
  
      {
        "title"    : "The Joel Test",
        "url"      : "/the-joel-test/",
        "content"  : "\n  Do you use source control?\n  Can you make a build in one step?\n  Do you make daily builds?\n  Do you have a bug database?\n  Do you fix bugs before writing new code?\n  Do you have an up-to-date schedule?\n  Do you have a spec?\n  Do programmers have quiet working conditions?\n  Do you use the best tools money can buy?\n  Do you have testers?\n  Do new candidates write code during their interview?\n  Do you do hallway usability testing?\n\n"
        },
  
      {
        "title"    : "Choose Boring Tech",
        "url"      : "/choose-boring-tech/",
        "content"  : "When choosing technology, you have both known unknowns and unknown unknowns\n\nThe nice thing about boringness (so constrained) is that the capabilities of these things are well understood.\n\nBut more importantly, their failure modes are well understood.\n\nThe boring technology behind a one-person Internet company - Listen Notes\n\nI’m betting on HTML (catskull.net)\n"
        },
  
      {
        "title"    : "Domain Driven Design",
        "url"      : "/domain-driven-design/",
        "content"  : "DDD emphasizes close collaboration among domain people, designers, UI/UX, business, product, and engineering. This collaboration enables a shared language and deeper understanding.\n\nThe context is another key idea. The same word can mean different things depending on the team. So DDD emphasizes clear boundaries of meaning between sub-systems.\n\nA frequent pattern is defining the core layer of models and business logic, independent of any specific technology. And building the rest as replaceable layers around this core, like an onion. People call it hexagonal architecture or clean architecture.\n\nThis is the model-driven way and useful in many cases but it’s not the only way. Systems have different needs and usage patterns.\n\nFor example, for a database-driven system, it might make sense to express this core layer with a relational database leveraging the strengths of the database system like relationships and constraints.\n\nIn some other cases, it might make sense to drive design from UI experiments and user feedback.\n\nAnother system might have a few core data types and many different operations on them, then a functional approach could be more expressive.\n\nThe bottom line is that there is no one true way. A good idea is good in its context. Yet the core process is sound. When we listen well, collaborate, think deeply, and care about our work, the results are delightful.\n"
        },
  
      {
        "title"    : "Hacker Laws",
        "url"      : "/hacker-laws/",
        "content"  : "\n  All models are wrong, but some are useful.\n\n\ntldr\n\nKeep it simple\n\nDon’t take down a fence unless you know why it is put up\n\nThe best code is no code\n\nDo one thing and do it well\n\nTest early and often\n\nAnything that can go wrong will go wrong.\n\nLeave it better than you found.\n\nKeep it simple\n\n\n  \n    The best code is no code\n  \n  \n    Simple solutions are more likely to be correct. Occam’s Razor\n  \n  \n    Do one thing and do it well\n  \n  \n    YAGNI\n  \n  \n    KISS\n  \n  \n    Nirvana Fallacy\n  \n  \n    Get end-to-end first\n  \n  \n    Too many options leads to decision paralysis\n  \n  \n    Premature optimization is the root of all evil. Donald Knuth\n  \n  \n    Decision time grows logarithmically with the number of options you can choose from. Hick’s Law\n  \n  \n    Humans can comfortably maintain up to 150 stable relationships. Dunbar’s Number\n  \n  \n    With a sufficient number of users of an API, all observable behaviors of your system will be depended on by somebody. Hyrum’s Law (The Law of Implicit Interfaces)\n  \n  \n    The technical boundaries of a system will reflect the structure of the organization. Conway’s Law\n  \n  \n    The Law of Demeter,  “The Principle of Least Knowledge”\n  \n  \n    The Pareto Principle (The 80/20 Rule)\n  \n  \n    20% of a system creates 80% of its value\n  \n  \n    Ship it\n  \n  \n    Make everything as simple as possible, but not simpler.\n  \n  \n    There is a certain amount of complexity in a system that cannot be reduced. The Law of Conservation of Complexity (Tesler’s Law)\n  \n  \n    All non-trivial abstractions, to some degree, are leaky.\n  \n  \n    If all you have is a hammer, everything looks like a nail.\n  \n  \n    Chesterton’s Fence: Don’t take down a fence unless you know why it is put up.\n  \n\n\nLeave it better than you found.\n\n\n  \n    The Broken Windows Theory: Visible signs of lack of care in an environment lead to further and more serious deterioration.\n  \n  \n    Get feedback early and often\n  \n  \n    Test early and often\n  \n  \n    Given enough eyeballs, all bugs are shallow.\n  \n\n\n\n  Any sufficiently advanced technology is indistinguishable from magic.\n\n\nAnything that can go wrong will go wrong.\n\n\n  \n    Brandolini’s law: The amount of energy needed to refute bullshit is an order of magnitude bigger than to produce it.\n  \n  \n    It always takes longer than you expect, even when you take this into account\n  \n  \n    Work expands to fill the time available for its completion. Parkinson’s Law\n  \n  \n    Cheops law: Nothing ever gets built on schedule or within budget.\n  \n  \n    Adding human resources to a late software development project makes it later. Brooks’ Law\n  \n  \n    When a measure becomes a target, it ceases to be a good measure. Goodhart’s Law\n  \n  \n    We tend to overestimate the effect of a technology in the short run and underestimate the effect in the long run. The Hype Cycle &amp; Amara’s Law\n  \n\n\nStay hungry, stay foolish\n\n\n  \n    Incompetent people think they are the best. The Dunning-Kruger Effect\n  \n  \n    Institutions will try to preserve the problem to which they are the solution. The Shirky Principle\n  \n  \n    People in a hierarchy tend to rise to their “level of incompetence”. The Peter Principle\n  \n\n\nSee also\n\nList of eponymous laws - Wikipedia\n\ndwmkerr/hacker-laws: 💻📖 Laws, Theories, Principles and Patterns that developers will find useful. #hackerlaws (github.com)\n\nAkins Laws Of Spacecraft\n"
        },
  
      {
        "title"    : "Minimal Tech",
        "url"      : "/minimal-tech/",
        "content"  : "Here’s a cheap trick to make a difference: focus on the bare essentials and get rid of the rest.\n\nIt’s easy to be different, because others are mostly doing the opposite: tons of crap.\n\nhttps://volument.com/blog/minimalism-the-most-undervalued-development-skill\n\n\n"
        },
  
      {
        "title"    : "Design Patterns",
        "url"      : "/design-patterns/",
        "content"  : "Creational\n\n\n  Simple Factory -&gt; getClass()\n  Factory Method -&gt; factory with sub classes, eg. getSubClass1(), getSubClass2()\n  Abstract Factory, factory of factories, group related factories\n  Builder, burger -&gt; addChilly(), addPickle()\n  Prototype, clone -&gt; doc.copy()\n  Singleton\n\n\nStructural\n\n\n  Adapter\n  Bridge, composition over inheritance, themes -&gt; search engine\n  Composite, polymorphism\n  Decorator -&gt; @staticmethod\n  Facade, simple command for a complex operation -&gt; go()\n  Flyweight, share objects\n  Proxy\n\n\nBehavioral\n\n\n  Chain of Responsibility, bank, PayPal, bitcoin\n  Command, remote control, waiter, transaction system, roll back\n  Iterator -&gt; python iter\n  Mediator, WhatsApp, bank transfer, client-server\n  Memento, remember, editor, ctrl+z\n  Observer, job alerts, stock alerts, email alerts\n  Visitor, open/closed, car parts check, AST\n  Strategy, sorting strategy\n  State, editor state, bold, italic\n  Template Method, ABC\n\n\nHacker Laws\n"
        },
  
      {
        "title"    : "Design a blockchain",
        "url"      : "/block/",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\nimport time\nimport hashlib\nimport uuid\nimport random \nfrom dataclasses import dataclass\nfrom typing import List\n\n@dataclass\nclass Node:\n    uid: str\n\n\n@dataclass\nclass Transaction:\n    sender: Node\n    recipient: Node\n    amount: int\n\n\n@dataclass\nclass Block:\n    index: int\n    timestamp: float\n    transactions: List[Transaction]\n    proof_of_work: int\n    previous_hash: str\n\n\nclass Blockchain:\n    def __init__(self):\n        self.chain = []\n        self.transactions = []\n        self.nodes = set()\n        # the genesis block\n        self.create_new_block(previous_hash=1, proof_of_work=42)\n        \n    def create_new_block(self, previous_hash: str, proof_of_work: int):\n        block = Block(\n            index=len(self.chain) + 1,\n            timestamp=time.time(),\n            transactions=self.transactions,\n            proof_of_work=proof_of_work,\n            previous_hash=previous_hash or self.hash(self.last_block),\n        )\n        # Reset the current list of transactions\n        self.transactions = []\n        self.chain.append(block)\n        return block\n\n    @property\n    def last_block(self):\n        return self.chain[-1]\n\n    def add_new_transaction(self, transaction):\n        self.transactions.append(transaction)\n        \n    @staticmethod\n    def hash(block):\n        return hashlib.sha256(block.__str__()).hexdigest()\n\n    @staticmethod\n    def is_valid_proof(last_proof, proof):\n        guess_hash = hashlib.sha256(f\"{last_proof}{proof}\").hexdigest()\n        return guess_hash[:3] == \"000\"\n\n    def generate_proof_of_work(self, last_proof):\n        # Find a number p such that the hash of previous-proof and p contains 3 leading zeroes\n        proof = 0\n        while self.is_valid_proof(last_proof, proof) is False:\n            # choose a random 64-bit signed integer \n            proof = random.randint(0,2**63-1) \n        return proof\n\n    def add_node(self):\n        new_node = Node(uid=str(uuid.uuid4()))\n        self.nodes.add(new_node)\n        return new_node\n\n    def is_valid_chain(self, chain):\n        # if hashes and proofs are valid for all blocks, the chain is valid\n        for i in range(1, len(chain)):\n            previous_block, current_block = chain[i - 1], chain[i]\n            if current_block.previous_hash != self.hash(previous_block):\n                return False\n            if not self.is_valid_proof(\n                previous_block.proof_of_work, current_block.proof_of_work\n            ):\n                return False\n        return True\n\n    def mine(self, miner_id):\n        # the first miner with a correct proof of work gets the prize\n        prize_transaction = Transaction(sender=\"genesis\", recipient=miner_id, amount=1)\n        self.add_new_transaction(prize_transaction)\n        new_proof = self.generate_proof_of_work(self.last_block.proof_of_work)\n        new_block = self.create_new_block(new_proof, self.last_block.previous_hash)\n        return f\"new block forged, {new_block}\"\n    \n    def consensus(self):\n        # The longest valid chain in the network is the true chain\n        pass\n\n"
        },
  
      {
        "title"    : "Design A Bicycle",
        "url"      : "/design-a-bicycle/",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n\nfrom units import Measurement \n\nclass Frame:\n    ... \n\nclass Stem:\n    length: Measurement \n\nclass Fork:\n    ... \n\nclass Handlebar:\n    ... \n\nclass Flatbar(Handlebar):\n    ...\n\nclass Dropbar(Handlebar):\n    ...\n\nclass Tube:\n    ... \n\nclass Tyre:\n    ... \n\nclass Wheel:\n    diameter: Measurement\n    tube: Optional[Tube]\n    tyre: Optional[Tyre]\n\nclass Wheelset: \n    front: Wheel\n    rear: Wheel \n\nclass Pedal:\n    ...\n\nPedalset = tuple(Pedal, Pedal)\n\nclass GearSystem:\n    ... \n\nclass BrakeSystem:\n    ...\n\nclass DiscBrakeSystem(BrakeSystem):\n    ...\n\nclass HydraulicDiscBrake(DiscBrakeSystem):\n    ...\n\nclass MechanicalDiscBrake(DiscBrakeSystem):\n    ...\n\nclass RimBrake(BrakeSystem):\n    ...\n\nclass SuspensionSystem:\n    ... \n    \nclass Seat:\n    ... \n\nclass Bicycle:\n    frame: Frame\n    stem: Stem\n    fork: Fork\n    handlebar: Handlebar\n    wheelset: Wheelset\n    brakes: BrakeSystem\n    pedals: Optional[Pedalset]\n    suspension: Optional[SuspensionSystem]\n    seat: Optional[Seat] \n\n    def pedal():\n        ... \n\n    def brake():\n        ... \n\n    def turn():\n        ... \n\nclass RoadBike(Bicycle):\n    ... \n\nclass GravelBike(Bicycle):\n    ...\n\nclass MountainBike(Bicycle):\n    ...\n\nclass CityBike(Bicycle):\n    ...\n\nclass HybridBike(Bicycle):\n    ...\n\nclass EBike(Bicycle):\n    ...\n\nclass Cyclist(Human):\n    def cycle(bike:Bicycle):\n        ... \n    \n\n"
        },
  
      {
        "title"    : "Design A Book App",
        "url"      : "/design-a-book-app/",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\nclass Author:\n    name: str \n\nclass Genre:\n    name: str\n\nclass File: \n    name: str\n    size: int \n\nclass TextFile(File):\n    ...\n\nclass AudioFile(File):\n    ...\n\nclass Book: \n    name: str \n    authors: List[Author]\n    genres: List[Genre] \n    text: TextFile\n    audio: AudioFile\n\n    class get_text():\n        ...\n\n    class get_audio():\n        ...\n\nclass Reader:\n    def read_text(book:Book):\n        ...\n\nclass Player:\n    def play_audio(book:Book):\n        ...\n\nclass Library:\n    books: List[Book]\n\n    def search():\n        ... \n\n    def add_book(book:Book):\n        ...\n\nclass Shelf:\n    books: List[Book]\n\n    def add_book():\n        ...\n\n    def remove_book():\n        ...\n\nclass User: \n    username: str \n    password_hash: str \n    shelves: List[Shelf]\n\n    def auth():\n        ... \n\n"
        },
  
      {
        "title"    : "CRM design",
        "url"      : "/design-a-crm/",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n\nclass Base: \n    uid: UID\n\nclass UpdateRecord:\n    updates: JSON \n\nclass Contact(Base):\n    email: Email \n    subscriptions: list[Channel]\n    preferences: list[Preference]\n    \nclass Channel(Base):\n    ... \n\nclass Email(Channel):\n    ... \n\nclass SMS(Channel):\n    ... \n\nclass PushNotification(Channel):\n    ... \n\nclass Newsletter(Channel):\n    ... \n\nclass Form(Channel):\n    ...\n\nclass Preference(Base):\n    ...\n\nclass ChannelConsent(Preference):\n    channel_id: UID \n\n\nclass Event(Base):\n    ...\n\nclass Visit(Event):\n    ...\n\nclass Click(Event):\n    ...\n\nclass Submit(Event):\n    ...\n\nclass PubSubAPI:\n    def publish():\n        ...\n    def subscribe():\n        ...\n\nclass EventAPI(PubSubAPI):\n    ...\n\nclass Trigger:\n    source: Event\n    target: Event \n\nclass Journey:\n    contact: Contact\n    triggers: list[Trigger]\n\n\nclass CRUDAPI:\n    def create():\n        ...\n    def read():\n        ...\n    def update():\n        ...\n    def delete():\n        ...\n\nclass ContactAPI(CRUDAPI):\n    ... \n\nclass ChannelAPI(CRUDAPI):\n    ... \n\nclass JourneyAPI(CRUDAPI):\n    ...\n\n\nclass Orchestrator:\n    journeys: list[Journeys]\n    events_api: EventAPI\n\n\nclass App: \n    contacts: ContactAPI\n    channels: ChannelAPI\n    orchestrator: Orchestrator\n\n    def init():\n        ... \n\n    \n\n"
        },
  
      {
        "title"    : "Design A Data Pipeline",
        "url"      : "/design-a-data-pipeline/",
        "content"  : "Goals\n\n\n  Ingest data from different sources\n  Run a graph of SQL transforms to prepare it for modeling\n  Persist clean results in a target store\n  Make long-running operations async\n  Make it easy to follow the progress, logs, and errors\n  Multiple flows can run at the same time\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n\nclass SourceTypes(Enum):\n    DB = 1\n    File = 2\n\n\nclass ConnectionInfo:\n    ... \n\n\nclass DataStore:\n    source_type: SourceTypes\n    connection_info: ConnectionInfo\n\n\n\nclass DBConnection(ConnectionInfo):\n    host: str\n    port: int\n    user: str\n    password: str\n    db_name: str \n\n\nclass FileConnection(ConnectionInfo):\n    path: str\n\n\nclass DBStore(DataStore):\n    source_type: SourceTypes.DB\n    connection_info: DBConnection\n\n\nclass FileStore(DataStore):\n    source_type: SourceTypes.File\n    connection_info: FileConnection\n\nclass FlowStates(Enum):\n    READY = 1\n    RUNNING = 2\n    CANCELLED = 3\n    FAILED = 4\n    COMPLETED = 5\n\n\nclass Progress:\n    percent: int  \n    started: datetime\n    updated: datetime\n\n\nclass Flow:\n    sources: list[DataStore]\n    target: DataStore\n    state: FlowStates\n    progress: Progress\n    logs: list[str]\n    errors: list[str]\n\n\n"
        },
  
      {
        "title"    : "Design A Gov Cloud",
        "url"      : "/design-a-gov-cloud/",
        "content"  : "raw data size\n\nlet’s say there’s 100m people. their basic info like names, id numbers etc could take a few kbs. if you add a few photos, and other info about health, legal, education, property ownership, companies, tax, debts, biometrics, etc. it would be at least 10mb per person. 100m * 10 mb is 1 petabyte\n\nthere would be another 9pb for the details of all the infra\n\n1pb for every 10m people\n\n10pb for the basic operation of a country with a 100m people, that would be at least $10m storage cost per year and $100m of operational costs\n\n"
        },
  
      {
        "title"    : "Design A Personal Note Publishing System",
        "url"      : "/design-a-personal-note-publishing-system/",
        "content"  : "Goals\n\nAs a user, I would like to\n\n\n  take markdown notes, with images, links, code, ..\n  easily publish\n  can view notes by directory and by tag\n  display backlinks\n  have a simple search\n  have dark mode\n  easily find any note\n  optimize for reading comfort\n  easily personalize\n\n\neasily means quick, intuitive, low-effort\n\nmy notes are under directories\n\nthey can connect to each other with links or tags\n\neverything is a file,\n\neach file has a unique id, typically-like-this\n\na tag is also a file, when visited it shows all connected files,\n\na tag has a short form and an id, dist: distributed-systems\n\nleverage jekyll variables\n\neach file can connect but tags and dir files becomes central\n\nso the index page is entry point\n\ncentral files are top level files\n\nmaybe\n\nmake each dir a tag too, and add to page tags\n\nif a file has path a/b/c connect it to a and b\n\nshould stay stable if the files change location, so urls only have file-ids\n\n"
        },
  
      {
        "title"    : "Design A Trader",
        "url"      : "/design-a-trader/",
        "content"  : "Trade financial instruments like stocks, bonds, and currencies on one or more exchanges, in real-time\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\nBasePoint = Decimal(1/10000) \nUID = str \n\nclass UID:\n    ... \n\nclass UIDGenerator:\n    def generate()-&gt;UID:\n        ... \n\nclass Asset: \n    symbol: str\n    name: str \n\nclass Currency(Asset):\n    ...\n\nclass Crypto(Currency):\n    ...\n\nclass CurrencyPair:\n    base: Currency\n    quote : Currency \n\n    @property\n    def symbol(self):\n        return self.base.symbol + self.quote.symbol\n\n    def __str__(self):\n        return f\"{self.base}_{self.quote}\"\n\n\nclass Stock(Asset):\n    ...\n\nclass Bond(Asset):\n    ...\n\nclass ETF(Asset):\n    ...\n\n\nclass AssetBalance: \n    asset: Asset\n    free: Decimal \n    locked: Decimal \n\n\nclass OrderBook:\n    ask: Decimal\n    mid: Decimal\n    bid: Decimal\n    spread: Decimal\n\nclass OrderSide(Enum):\n    LONG = 1 \n    SHORT = 2\n\nclass OrderType(Enum):\n    MARKET = 1\n    LIMIT = 2 \n\nclass Order: \n    side: OrderSide\n    typ: OrderType\n\nclass DataSource:\n    def stream(asset):\n\nclass ExchangeAPI: \n    name: str \n\n    def auth():\n        ... \n\n    def get_balance(): \n        ...\n\n    def submit_order(order:Order):\n        ...\n\n    def cancel_order(uid):\n        ...\n\n    def cancel_open_orders():\n        ...\n\n    def close_all_positions():\n        ... \n\n    def deposit(asset:Asset, amount:Decimal)-&gt;AssetBalance:\n        ...\n\n    def withdraw(asset:Asset, amount:Decimal)-&gt;AssetBalance:\n        ...\n\nclass DecisionInput:\n    ...\n\nclass Decision:\n    inputs: list[DecisionInput]\n    output: Optional[Order]\n    \nclass Strategy:\n    uid: UID\n    name: str \n\n    def decide(list[DecisionInput])-&gt;Decision:\n        ...\n\nclass Trader: \n    strategy: Strategy\n    exchange: ExchangeAPI \n\n\n"
        },
  
      {
        "title"    : "Design A Web Crawler",
        "url"      : "/design-a-web-crawler/",
        "content"  : "Follow prices of online products on multiple websites\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n\nclass Website:\n    name: str  \n    url: URL\n    html: HTML\n\nclass Currency(Enum):\n    ...\n\nclass Price: \n    amount: Decimal \n    currency: Currency \n\nclass UUID: \n    ...\n\nclass Photo(File): \n    uid: UUID  \n\nclass Company:\n    name: str \n\nclass Brand: \n    name: str\n    company: Company \n\nclass Product:\n    uid: UUID\n    name: str\n    brand: Brand \n    description: str \n    \nclass ProductPrice: \n    product_id: str\n    price_id: str \n    timestamp: Timestamp \n\nclass ProductPhoto:\n    product_id: str\n    photo_id: str \n    timestamp: Timestamp    \n\n"
        },
  
      {
        "title"    : "Design Auth",
        "url"      : "/design-auth/",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n\nclass AuthMethod(Enum):\n    PASSWORD = auto()\n    TWOFACTOR = auto()\n    BIOMETRIC = auto()\n    OAUTH = auto()\n\n\n@dataclass\nclass PasswordAuthenticator:\n    username: str\n    hashed_password: str  # Store hashed password instead of plain text password\n\n    @staticmethod\n    def hash_password(password: str) -&gt; str:\n        # Hash the password using a secure hash function (e.g., SHA-256)\n        hashed_password = hashlib.sha256(password.encode()).hexdigest()\n        return hashed_password\n\n    def set_password(self, password: str):\n        # Hash and store the password\n        self.hashed_password = self.hash_password(password)\n\n    def authenticate(self, entered_password: str) -&gt; bool:\n        # Hash the entered password and compare with stored hashed password\n        entered_password_hashed = self.hash_password(entered_password)\n        return self.hashed_password == entered_password_hashed\n\n\n@dataclass\nclass TwoFactorAuthenticator:\n    username: str\n    hashed_password: str\n    is_2fa_enabled: bool = False\n    auth_code: str = \"\"\n\n    def enable_2fa(self):\n        # Enable 2FA and generate a random authentication code\n        self.is_2fa_enabled = True\n        self.auth_code = str(random.randint(1000, 9999))  # Generate a 4-digit authentication code\n\n    def disable_2fa(self):\n        # Disable 2FA and reset the authentication code\n        self.is_2fa_enabled = False\n        self.auth_code = \"\"\n\n    def generate_new_auth_code(self):\n        # Generate a new 4-digit authentication code\n        self.auth_code = str(random.randint(1000, 9999))\n\n    def verify_auth_code(self, entered_code: str) -&gt; bool:\n        # Verify the entered authentication code\n        return self.auth_code == entered_code\n\n\n@dataclass\nclass BiometricAuthenticator:\n    biometric_data: bytes  # Biometric data (e.g., fingerprint template, facial features) stored as bytes\n\n\n\n"
        },
  
      {
        "title"    : "Design an OAuth System",
        "url"      : "/design-oauth/",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\nfrom dataclasses import dataclass\nfrom typing import Dict, Optional, Tuple\nfrom urllib.parse import urlparse, parse_qs\n\nClientID = str\nClientSecret = str\nRedirectURI = str\nUserID = str\nAuthorizationCode = str\nAccessToken = str\n\n@dataclass\nclass OAuthClient:\n    client_id: ClientID\n    client_secret: ClientSecret\n    redirect_uri: RedirectURI\n\n@dataclass\nclass OAuthUser:\n    user_id: UserID\n    username: str\n\nclass OAuthServer:\n    def __init__(self):\n        self.clients: Dict[ClientID, OAuthClient] = {}\n        self.users: Dict[UserID, OAuthUser] = {}\n        self.authorization_codes: Dict[AuthorizationCode, Tuple[ClientID, RedirectURI]] = {}  # Map authorization code to client ID and redirect URI\n        self.access_tokens: Dict[ClientID, AccessToken] = {}  # Store access tokens\n\n    def register_client(self, client: OAuthClient):\n        self.clients[client.client_id] = client\n\n    def register_user(self, user: OAuthUser):\n        self.users[user.user_id] = user\n\n    def generate_authorization_code(self, client_id: ClientID, user_id: UserID, redirect_uri: RedirectURI) -&gt; AuthorizationCode:\n        authorization_code = \"generated_authorization_code\"  # Implement logic to generate authorization code\n        self.authorization_codes[authorization_code] = (client_id, redirect_uri)  # Store authorization code with client ID and redirect URI\n        return authorization_code\n\n    def exchange_authorization_code_for_access_token(self, client_id: ClientID, client_secret: ClientSecret, authorization_code: AuthorizationCode) -&gt; Optional[AccessToken]:\n        stored_client_id, redirect_uri = self.authorization_codes.get(authorization_code, (None, None))\n        if stored_client_id == client_id:\n            access_token = \"generated_access_token\"  # Implement logic to generate access token\n            # for example, secrets.token_urlsafe(length)\n            self.access_tokens[client_id] = access_token  # Store access token\n            return access_token, redirect_uri\n        return None, None\n\nclass OAuthClientApp:\n    def __init__(self, client: OAuthClient):\n        self.client = client\n\n    def request_authorization(self, user_id: UserID) -&gt; str:\n        redirect_uri = self.client.redirect_uri\n        authorization_code = oauth_server.generate_authorization_code(self.client.client_id, user_id, redirect_uri)\n        return f\"{redirect_uri}?code={authorization_code}\"\n\n    def handle_redirect_response(self, redirect_url: str) -&gt; Tuple[Optional[AuthorizationCode], Optional[RedirectURI]]:\n        parsed_url = urlparse(redirect_url)\n        query_params = parse_qs(parsed_url.query)\n        authorization_code = query_params.get('code', [None])[0]\n        redirect_uri = query_params.get('redirect_uri', [None])[0]\n        return authorization_code, redirect_uri\n\n    def request_access_token(self, authorization_code: AuthorizationCode, redirect_uri: RedirectURI) -&gt; Optional[AccessToken]:\n        client_id = self.client.client_id\n        client_secret = self.client.client_secret\n        access_token, stored_redirect_uri = oauth_server.exchange_authorization_code_for_access_token(client_id, client_secret, authorization_code)\n        if stored_redirect_uri == redirect_uri:\n            return access_token\n        return None\n\noauth_server = OAuthServer()\nclient = OAuthClient(\"client_id\", \"client_secret\", \"https://client.example.com/callback\")\noauth_server.register_client(client)\nuser = OAuthUser(\"user_id\", \"username\")\noauth_server.register_user(user)\n\nclient_app = OAuthClientApp(client)\n\n# Step 1: User Authorization Request\nauthorization_url = client_app.request_authorization(\"user_id\")\nprint(f\"Redirect the user to: {authorization_url}\")\n\n# Step 2: Client Handles Redirect and Extracts Authorization Code\nredirect_url = \"https://client.example.com/callback?code=generated_authorization_code&amp;redirect_uri=https://client.example.com/callback\"\nauthorization_code, redirect_uri = client_app.handle_redirect_response(redirect_url)\n\n# Step 3: Client Requests Access Token Using Authorization Code and Redirect URI\naccess_token = client_app.request_access_token(authorization_code, redirect_uri)\nif access_token:\n    print(f\"Received access token: {access_token}\")\nelse:\n    print(\"Invalid authorization code or redirect URI\")\n\n\n\n"
        },
  
      {
        "title"    : "Design Units",
        "url"      : "/design-units/",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n\nfrom enum import Enum\nfrom dataclasses import dataclass\n\nclass Symbol(Enum):\n    S = \"s\"\n    M = \"m\"\n    KG = \"kg\"\n    A = \"A\"\n    K = \"K\"\n    MOL = \"mol\"\n    CD = \"cd\"\n\nclass UnitName(Enum):\n    SECOND = \"second\"\n    METER = \"meter\"\n    KILOGRAM = \"kilogram\"\n    AMPERE = \"ampere\"\n    KELVIN = \"kelvin\"\n    MOLE = \"mole\"\n    CANDELA = \"candela\"\n\nclass Dimension(Enum):\n    TIME = \"time\"\n    LENGTH = \"length\"\n    MASS = \"mass\"\n    ELECTRIC_CURRENT = \"electric current\"\n    THERMODYNAMIC_TEMPERATURE = \"thermodynamic temperature\"\n    AMOUNT_OF_SUBSTANCE = \"amount of substance\"\n    LUMINOUS_INTENSITY = \"luminous intensity\"\n\n@dataclass\nclass Unit:\n    symbol: Symbol\n    name: UnitName\n    dimension: Dimension\n\n@dataclass\nclass SIUnit(Unit):\n    ... \n\n\nsecond = SIUnit(Symbol.S, UnitName.SECOND, Dimension.TIME)\nmeter = SIUnit(Symbol.M, UnitName.METER, Dimension.LENGTH)\nkilogram = SIUnit(Symbol.KG, UnitName.KILOGRAM, Dimension.MASS)\nampere = SIUnit(Symbol.A, UnitName.AMPERE, Dimension.ELECTRIC_CURRENT)\nkelvin = SIUnit(Symbol.K, UnitName.KELVIN, Dimension.THERMODYNAMIC_TEMPERATURE)\nmole = SIUnit(Symbol.MOL, UnitName.MOLE, Dimension.AMOUNT_OF_SUBSTANCE)\ncandela = SIUnit(Symbol.CD, UnitName.CANDELA, Dimension.LUMINOUS_INTENSITY)\n\nprint(second)  # Output: SIUnit(symbol=&lt;Symbol.S: 's'&gt;, unit_name=&lt;UnitName.SECOND: 'second'&gt;, dimension=&lt;Dimension.TIME: 'time'&gt;)\n\n\n\nSure! The SI prefixes represent powers of 10 that are used to form decimal multiples and submultiples of SI units. Here's how you can define SI prefixes from pico (10^-12) to exa (10^18) using enums in Python:\n\npython\nCopy code\nfrom enum import Enum\n\nclass SIPrefix(Enum):\n    PICO = \"p\"  # 10^-12\n    NANO = \"n\"  # 10^-9\n    MICRO = \"µ\"  # 10^-6 (mu symbol)\n    MILLI = \"m\"  # 10^-3\n    CENTI = \"c\"  # 10^-2\n    DECI = \"d\"   # 10^-1\n    DECA = \"da\"   # 10^1\n    HECTO = \"h\"  # 10^2\n    KILO = \"k\"   # 10^3\n    MEGA = \"M\"   # 10^6\n    GIGA = \"G\"   # 10^9\n    TERA = \"T\"   # 10^12\n    PETA = \"P\"   # 10^15\n    EXA = \"E\"    # 10^18\n\n\n@dataclass\nclass SIScalarUnit(SIUnit):\n    prefix: SIPrefix\n\nmillimeter = SIScalarUnit(Symbol.M, UnitName.METER, Dimension.LENGTH, SIPrefix.MILLI)\n\nfrom numbers import Number\n\nclass Measurement:\n    unit: Unit \n    quantity: Number\n\n\n\n"
        },
  
      {
        "title"    : "Design Video Streaming App",
        "url"      : "/design-video-streaming-app/",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n\nclass UID:\n    ... \n\nclass UIDGenerator:\n    def generate()-&gt;UID:\n        ... \n\nclass File:\n    name: str\n    uid: UID\n    path: Path \n\nclass MultiPart:\n    parts: list[File]\n\nclass Audio(MultiPart):\n    ... \n\nclass Video(MultiPart):\n    ...\n\nclass Collection:\n    def add(file:MultiPart):\n        ...\n\n    def get(uid:UID)-&gt;MultiPart:\n        ... \n\nclass Streamer:\n    def stream(uid:UID)-&gt;MultiPart?:\n        ... \n\nclass User: \n    uid: UID\n    username: str \n    auth_method: AuthMethod \n    favorites: Collection\n\nclass Auth:\n    def signin(username, password)-&gt; User?:\n        ...\n\n    def signup(username, password)-&gt; User?:\n        ...\n\n\nclass VideoApp: \n    auth: Auth \n    library: Collection \n    streamer: Streamer \n\n\n"
        },
  
      {
        "title"    : "OOP designs",
        "url"      : "/oop-designs/",
        "content"  : "\n"
        },
  
      {
        "title"    : "OOP",
        "url"      : "/oop/",
        "content"  : "\n"
        },
  
      {
        "title"    : "SOLID",
        "url"      : "/solid/",
        "content"  : "Single responsibility\n\nDo one thing, and do it well\n\n\n\nOpen/closed\n\nClasses should be open for extension but closed for modification\n\n\n\nLiskov’s Substitution\n\nChildren should not violate the contracts of parents.\n\nIf you change a class with one of its children,\nthe program should still work correctly.\n\nInheritance should pass the ‘Is-A’ test.\n\n\n\nInterface Segregation\n\nMany specific interfaces are better than one general interface\n\n\n\nDependency Inversion\n\nProvide dependencies from outside because it makes testing easier, and modularity\n"
        },
  
      {
        "title"    : "System Design",
        "url"      : "/system-design/",
        "content"  : "There are many kinds of tech with different tradeoffs but at the high level, many systems are built over the same fundamental ideas.\n\nThe starting point is why we are doing something in the first place, that is to create something useful. For that, most of the time a system needs a way to get some input, produce some output, store and retrieve data,  be reasonably fast and easy to use, respectful to the user and her time, to keep working even if some internal parts of it are broken, be reliable, not be wasteful or unnecessarily expensive, easy to monitor, easy to fix, easy to improve, thus easy to understand\n\nNot an exhaustive list but all the tools and tech we use are there to address a part of such concerns\n\nFor example, we often need to store some data and use it later. People created all kinds of data stores for it.\n\nRelational DBs organize data as tables of rows and columns, they help to enforce rules on data, to keep it consistent, to recover from errors\n\nColumnar DBs help with analytical workloads by storing columns together instead of rows\n\nIt’s possible to organize data as key-value pairs, documents, or as a graph. Each one is optimized for its use case.\n\nIndexing does the hard work upfront and makes it easier to search later\n\nCaching helps to get load off the data stores by reusing previous work\n\nQueuing helps to make things async, to decouple systems, to deliver messages to multiple systems\n\nAPIs provide an interface for systems to interact with each other.\n\nRedundancy helps to ensure the system keeps up when some of its parts are down\n\nLoad balancers and consistent hashing help with distributing load\n\n"
        },
  
      {
        "title"    : "Technology",
        "url"      : "/tech/",
        "content"  : "\n"
        },
  
      {
        "title"    : "A Free Web Again",
        "url"      : "/a-free-web-again/",
        "content"  : "The web has born open and free, then it turned into a web of deception.\n\nThe web is festered with ad networks, attention traps, and dark patterns How Technology is Hijacking Your Mind\n\nWe can reject to treat people as attention machines to make money\n\n\n  publish our own websites\n  quit invasive social networks\n  set up adblockers and privacy tools\n  support the content creators we value\n\n\nhttps://www.eff.org/pages/tools\n\nhttps://www.eff.org/https-everywhere\n\nhttps://privacybadger.org\n\nhttps://github.com/pi-hole/pi-hole\n\nhttps://github.com/gorhill/uBlock\n\nI’m betting on HTML (catskull.net)\n"
        },
  
      {
        "title"    : "Is Tech Fast Or Slow",
        "url"      : "/is-tech-fast-or-slow/",
        "content"  : "“People say sometimes, ‘You work in the fastest-moving industry in the world.’ I don’t feel that way. I think I work in one of the slowest. It seems to take forever to get anything done. All of the graphical-user interface stuff that we did with the Macintosh was pioneered at Xerox PARC [the company’s legendary Palo Alto Research Center] and with Doug Engelbart at SRI [a future-oriented think tank at Stanford] in the mid-‘70s. And here we are, just about the mid-‘90s, and it’s kind of commonplace now. But it’s about a 10-to-20-year lag. That’s a long time.”\n"
        },
  
      {
        "title"    : "Social Media",
        "url"      : "/social-media/",
        "content"  : "Social media is an amplifier with no filter. Even worse, it amplifies the noise, not the signal.\n\n“The rise of social led people to overvalue opinions as a measure of character.\n\nWe are now defined more by what we say than what we actually do,\n\nand words, unlike deeds, are cheap and easy to counterfeit.”\n"
        },
  
      {
        "title"    : "The Tao of Programming",
        "url"      : "/the-tao-of-programming/",
        "content"  : "From The Tao of Programming (mit.edu)\n\nBOOK 1\n\nThe Silent Void\n\nThus spake the Master Programmer:\n\n“When you have learned to snatch the error code from the trap frame, it will be time for you to leave.”\n\n\n\n1.1\n\nSomething mysterious is formed, born in the silent void. waiting alone and unmoving, it is at once still and yet in constant motion. It is the source of all programs. I do not know its name, so I will call it the Tao of Programming.\n\n\n  If the Tao is great, then the operating system is great.\nIf the operating system is great, then the compiler is great.\nIf the compiler is great, then the application is great.\nThe user is pleased, and there is harmony in the world.\n\n\nThe Tao of Programming flows far away and returns on the wind of morning.\n\n\n\n1.2\n\nThe Tao gave birth to machine language. Machine language gave birth to the assembler.\n\nThe assembler gave birth to the compiler. Now there are ten thousand languages.\n\nEach language has its purpose, however humble. Each language expresses the Yin and Yang of software. Each language has its place within the Tao.\n\nBut do not program in COBOL if you can avoid it.\n\n\n\n1.3\n\nIn the beginning was the Tao. The Tao gave birth to Space and Time.\n\nTherefore Space and Time are the Yin and Yang of programming.\n\nProgrammers that do not comprehend the Tao are always running out of time and space for their programs. Programmers that comprehend the Tao always have enough time and space to accomplish their goals.\n\nHow could it be otherwise?\n\n\n\n1.4\n\nThe wise programmer is told about Tao and follows it. The average programmer is told about Tao and searches for it. The foolish programmer is told about Tao and laughs at it.\n\nIf it were not for laughter, there would be no Tao.\n\nThe highest sounds are hardest to hear. Going forward is a way to retreat. Great talent shows itself late in life. Even a perfect program still has bugs.\n\n\n\nBOOK 2\n\nThe Ancient Masters\n\nThus spake the Master Programmer:\n\n“After three days without programming, life becomes meaningless.”\n\n\n\n2.1\n\nThe programmers of old were mysterious and profound. We cannot fathom their thoughts, so all we do is describe their appearance.\n\n\n  Aware, like a fox crossing the water.\nAlert, like a general on the battlefield.\nKind, like a hostess greeting her guests.\nSimple, like uncarved blocks of wood.\nOpaque, like black pools in darkened caves.\n\n\nWho can tell the secrets of their hearts and minds?\n\nThe answer exists only in Tao.\n\n\n\n2.2\n\nThe Grand Master Turing once dreamed that he was a machine. When he awoke, he exclaimed:\n\n“I don’t know whether I am Turing dreaming that I am a machine, or a machine dreaming that I am Turing!”\n\n\n\n2.3\n\nA programmer from a very large computer company went to a software conference and then returned to report to his manager, saying: “What sort of programmers work for other companies? They behaved badly and were unconcerned with appearances. Their hair was long and unkempt and their clothes were wrinkled and old. They crashed our hospitality suite and they made rude noises during my presentation.”\n\nThe manager said: “I should have never sent you to the conference. Those programmers live beyond the physical world. They consider life absurd, an accidental coincidence. They come and go without knowing limitations. Without a care, they live only for their programs. Why should they bother with social conventions?\n\nThey are alive within the Tao.”\n\n\n\n2.4\n\nA novice asked the Master: “Here is a programmer that never designs, documents or tests his programs. Yet all who know him consider him one of the best programmers in the world. Why is this?”\n\nThe Master replied: “That programmer has mastered the Tao. He has gone beyond the need for design; he does not become angry when the system crashes, but accepts the universe without concern. He has gone beyond the need for documentation; he no longer cares if anyone else sees his code. He has gone beyond the need for testing; each of his programs are perfect within themselves, serene and elegant, their purpose self-evident. Truly, he has entered the mystery of Tao.”\n\n\n\nBOOK 3\n\nDesign\n\nThus spake the Master Programmer:\n\n“When a program is being tested, it is too late to make design changes.”\n\n\n\n3.1\n\nThere once was a man who went to a computer trade show. Each day as he entered, the man told the guard at the door:\n\n“I am a great thief, renowned for my feats of shoplifting. Be forewarned, for this trade show shall not escape unplundered.”\n\nThis speech disturbed the guard greatly, because there were millions of dollars of computer equipment inside, so he watched the man carefully. But the man merely wandered from booth to booth, humming quietly to himself.\n\nWhen the man left, the guard took him aside and searched his clothes, but nothing was to be found.\n\nOn the next day of the trade show, the man returned and chided the guard, saying: “I escaped with a vast booty yesterday, but today will be even better.” So the guard watched him ever more closely, but to no avail.\n\nOn the final day of the trade show, the guard could restrain his curiosity no longer. “Sir Thief,” he said, “I am so perplexed, I cannot live in peace. Please enlighten me. What is it that you are stealing?”\n\nThe man smiled. “I am stealing ideas,” he said.\n\n\n\n3.2\n\nThere once was a Master Programmer who wrote unstructured programs. A novice programmer, seeking to imitate him, also began to write unstructured programs. When the novice asked the Master to evaluate his progress, the Master criticized him for writing unstructured programs, saying, “What is appropriate for the Master is not appropriate for the novice. You must understand Tao before transcending structure.”\n\n\n\n3.3\n\nThere was once a programmer who was attached to the court of the warlord of Wu. The warlord asked the programmer: “Which is easier to design: an accounting package or an operating system?”\n\n“An operating system,” replied the programmer.\n\nThe warlord uttered an exclamation of disbelief. “Surely an accounting package is trivial next to the complexity of an operating system,” he said.\n\n“Not so,” said the programmer, “When designing an accounting package, the programmer operates as a mediator between people having different ideas: how it must operate, how its reports must appear, and how it must conform to the tax laws. By contrast, an operating system is not limited by outside appearances. When designing an operating system, the programmer seeks the simplest harmony between machine and ideas. This is why an operating system is easier to design.”\n\nThe warlord of Wu nodded and smiled. “That is all good and well, but which is easier to debug?”\n\nThe programmer made no reply.\n\n\n\n3.4\n\nA manager went to the Master Programmer and showed him the requirements document for a new application. The manager asked the Master: “How long will it take to design this system if I assign five programmers to it?”\n\n“It will take one year,” said the Master promptly.\n\n“But we need this system immediately or even sooner! How long will it take if I assign ten programmers to it?”\n\nThe Master Programmer frowned. “In that case, it will take two years.”\n\n“And what if I assign a hundred programmers to it?”\n\nThe Master Programmer shrugged. “Then the design will never be completed,” he said.\n\n\n\nBOOK 4\n\nCoding\n\nThus spake the Master Programmer:\n\n“A well-written program is its own Heaven; a poorly-written program is its own Hell.”\n\n\n\n4.1\n\nA program should be light and agile, its subroutines connected like a string of pearls. The spirit and intent of the program should be retained throughout. There should be neither too little nor too much. Neither needless loops nor useless variables; neither lack of structure nor overwhelming rigidity.\n\nA program should follow the “Law of Least Astonishment”. What is this law? It is simply that the program should always respond to the users in the way that least astonishes them.\n\nA program, no matter how complex, should act as a single unit. The program should be directed by the logic within rather than by outward appearances.\n\nIf the program fails in these requirements, it will be in a state of disorder and confusion. The only way to correct this is to rewrite the program.\n\n\n\n4.2\n\nA novice asked the Master: “I have a program that sometimes runs and sometimes aborts. I have followed the rules of programming, yet I am totally baffled. What is the reason for this?”\n\nThe Master replied: “You are confused because you do not understand Tao. Only a fool expects rational behavior from his fellow humans. Why do you expect it from a machine that humans have constructed? Computers simulate determinism; only Tao is perfect.\n\nThe rules of programming are transitory; only Tao is eternal. Therefore, you must contemplate Tao before you receive Enlightenment.”\n\n“But how will I know when I have received Enlightenment?” asked the novice.\n\n“Your program will run correctly,” replied the Master.\n\n\n\n4.3\n\nThe Master was explaining the nature of Tao to one of his novices.\n\n“The Tao is embodied in all software – regardless of how insignificant,” said the Master.\n\n“Is the Tao in a hand-held calculator?” asked the novice.\n\n“It is,” came the reply.\n\n“Is the Tao in a video game?” asked the novice.\n\n“It is even in a video game,” said the Master.\n\n“Is the Tao in the DOS for a personal computer?” asked the novice.\n\nThe Master coughed and shifted his position slightly. “The lesson is over for today,” he said.\n\n\n\n4.4\n\nPrince Wang’s programmer was coding software. His fingers danced upon the keyboard. The program compiled without and error message, and the program ran like a gentle wind.\n\n“Excellent!” the Prince exclaimed. “Your technique is faultless!”\n\n“Technique?” said the programmer, turning from his terminal, “What I follow is Tao – beyond all techniques! When I first began to program, I would see before me the whole problem in one mass. After three years, I no longer saw this mass. Instead, I used subroutines. But now I see nothing. My whole being exists in a formless void. My senses are idle. My spirit, free to work without a plan, follows its own instinct. In short, my program writes itself. True, sometimes there are difficult problems. I see them coming, I slow down, I watch silently. Then I change a single line of code and the difficulties vanish like puffs of idle smoke. I then compile the program. I sit still and let the joy of the work fill my being. I close my eyes for a moment and then log off.”\n\nPrince Wang said, “Would that all of my programmers were as wise!”\n\n\n\nBOOK 5\n\nMaintenance\n\nThus spake the Master Programmer:\n\n“Though a program be but three lines long, someday it will have to be maintained.”\n\n\n\n5.1\n\n\n  A well-used door needs no oil on its hinges.\nA swift-flowing stream does not grow stagnant.\nA deer blends perfectly into the forest colors.\nSoftware rots if not used.\n\n\nThese are great mysteries.\n\n\n\n5.2\n\nA manager asked a programmer how long it would take him to finish the program on which he was working. “I will be finished tomorrow,” the programmer promptly replied.\n\n“I think you are being unrealistic,” said the manager, “Truthfully, how long will it take?”\n\nThe programmer thought for a moment. “I have some features that I wish to add. This will take at least two weeks,” he finally said.\n\n“Even that is too much to expect,” insisted the manager, “I will be satisfied if you simply tell me when the program is complete.”\n\nThe programmer agreed to this.\n\nSeveral years later, the manager retired. On the way to his retirement luncheon, he discovered the programmer asleep at his terminal. He had been programming all night.\n\n\n\n5.3\n\nA novice programmer was once assigned to code a simple financial package.\n\nThe novice worked furiously for many days, but when his Master reviewed his program, he discovered it contained a screen editor, a set of generalized graphics routines, and an artificial intelligence interface, but not the slightest hint of anything financial.\n\nWhen the Master asked about this, the novice became indignant. “Don’t be so impatient,” he said, “I’ll put in the financial stuff eventually.”\n\n\n\n5.4\n\n\n  Does a good farmer neglect a crop he has planted?\nDoes a good teacher overlook even the most humble student?\nDoes a good father allow a single child to starve?\nDoes a good programmer refuse to maintain his code?\n\n\n\n\nBOOK 6\n\nManagement\n\nThus spake the Master Programmer:\n\n“Let the programmers be many and the managers few – then all will be productive.”\n\n\n\n6.1\n\n\n  When managers hold endless meetings, the programmers write games.\nWhen accountants speak of quarterly profits, the development budget is about to be cut.\nWhen senior scientists talk blue sky, the clouds are about to roll in.\n\n\nTruly, this is not the Tao of Programming.\n\n\n  When managers make commitments, game programs are ignored.\nWhen accountants make long-range plans, harmony and order are about to be restored.\nWhen senior scientists address the problems at hand, the problems will soon be solved.\n\n\nTruly, this is the Tao of Programming.\n\n\n\n6.2\n\n\n  Why are programmers non-productive? Because their time is wasted in meetings.\nWhy are programmers rebellious? Because the management interferes too much.\nWhy are the programmers resigning one by one? Because they are burnt out.\nHaving worked for poor management, they no longer value their jobs.\n\n\n\n\n6.3\n\nA manager was about to be fired, but a programmer who worked for him wrote a new program that became popular and sold well. As a result, the manager retained his job.\n\nThe manager tried to give the programmer a bonus, but the programmer refused it, saying, “I wrote the program because I thought it was an interesting concept, and thus I expect no reward.”\n\nThe manager upon hearing this remarked, “This programmer, though he holds a position of small esteem, understands well the proper duty of an employee. Let us promote him to the exalted position of management consultant!”\n\nBut when told this, the programmer once more refused, saying, “I exist so that I can program. If I were promoted, I would do nothing but waste everyone’s time. Can I go now? I have a program that I am working on.”\n\n\n\n6.4\n\nA manager went to his programmers and told them: “As regards to your work hours: you are going to have to come in at nine in the morning and leave at five in the afternoon.” At this, all of them became angry and several resigned on the spot.\n\nSo the manager said: “All right, in that case you may set your own working hours, as long as you finish your projects on schedule.” The programmers, now satisfied, began to come in at noon and work to the wee hours of the morning.\n\n\n\nBOOK 7\n\nCorporate Wisdom\n\nThus spake the Master Programmer:\n\n“You can demonstrate a program for a corporate executive, but you can’t make him computer literate.”\n\n\n\n7.1\n\nA novice asked the Master: “In the East, there is a great tree-structure that men call ‘Corporate Headquarters’. It is bloated out of shape with vice presidents and accountants. It issues a multitude of memos, each saying ‘Go Hence!’ or ‘Go Hither!’ and nobody knows what is meant. Every year new names are put onto the branches, but all to no avail. How can such an unnatural entity exist?”\n\nThe Master replied: “You perceive this immense structure and are disturbed that it has no rational purpose. Can you not take amusement from its endless gyrations? Do you not enjoy the untroubled ease of programming beneath its sheltering branches? Why are you bothered by its uselessness?”\n\n\n\n7.2\n\nIn the East there is a shark which is larger than all other fish. It changes into a bird whose wings are like clouds filling the sky. When this bird moves across the land, it brings a message from Corporate Headquarters. This message it drops into the midst of the programmers, like a seagull making its mark upon the beach. Then the bird mounts on the wind and, with the blue sky at its back, returns home.\n\nThe novice programmer stares in wonder at the bird, for he understands it not. The average programmer dreads the coming of the bird, for he fears its message. The Master Programmer continues to work at his terminal, unaware that the bird has come and gone.\n\n\n\n7.3\n\nThe Magician of the Ivory Tower brought his latest invention for the Master Programmer to examine. The Magician wheeled a large black box into the Master’s office while the Master waited in silence.\n\n“This is an integrated, distributed, general-purpose workstation,” began the Magician, “ergonomically designed with a proprietary operating system, sixth generation languages, and multiple state of the art user interfaces. It took my assistants several hundred man years to construct. Is it not amazing?”\n\nThe Master Programmer raised his eyebrows slightly. “It is indeed amazing,” he said.\n\n“Corporate Headquarters has commanded,” continued the Magician, “that everyone use this workstation as a platform for new programs. Do you agree to this?”\n\n“Certainly,” replied the Master. “I will have it transported to the Data Center immediately!” And the Magician returned to his tower, well pleased.\n\nSeveral days later, a novice wandered into the office of the Master Programmer and said, “I cannot find the listing for my new program. Do you know where it might be?”\n\n“Yes,” replied the Master, “the listings are stacked on the platform in the Data Center.”\n\n\n\n7.4\n\nThe Master Programmer moves from program to program without fear. No change in management can harm him. He will not be fired, even if the project is cancelled. Why is this? He is filled with Tao.\n\n\n\nBOOK 8\n\nHardware and Software\n\nThus spake the Master Programmer:\n\n“Without the wind, the grass does not move. Without software hardware is useless.”\n\n\n\n8.1\n\nA novice asked the Master: “I perceive that one computer company is much larger than all others. It towers above its competition like a giant among dwarfs. Any one of its divisions could comprise an entire business. Why is this so?”\n\nThe Master replied, “Why do you ask such foolish questions? That company is large because it is large. If it only made hardware, nobody would buy it. If it only made software, nobody would use it. If it only maintained systems, people would treat it like a servant. But because it combines all of these things, people think it one of the gods! By not seeking to strive, it conquers without effort.”\n\n\n\n8.2\n\nA Master Programmer passed a novice programmer one day.\n\nThe Master noted the novice’s preoccupation with a hand-held computer game.\n\n“Excuse me,” he said, “may I examine it?”\n\nThe novice bolted to attention and handed the device to the Master. “I see that the device claims to have three levels of play: Easy, Medium, and Hard,” said the Master. “Yet every such device has another level of play, where the device seeks not to conquer the human, nor to be conquered by the human.”\n\n“Pray, Great Master,” implored the novice, “how does one find this mysterious setting?”\n\nThe Master dropped the device to the ground and crushed it with his heel. Suddenly the novice was enlightened.\n\n\n\n8.3\n\nThere was once a programmer who wrote software for personal computers. “Look at how well off I am here,” he said to a mainframe programmer who came to visit. “I have my own operating system and file storage device. I do not have to share my resources with anyone. The software is self-consistent and easy-to-use. Why do you not quit your present job and join me here?”\n\nThe mainframe programmer then began to describe his system to his friend, saying, “The mainframe sits like an ancient Sage meditating in the midst of the Data Center. Its disk drives lie end-to- end like a great ocean of machinery. The software is as multifaceted as a diamond, and as convoluted as a primeval jungle. The programs, each unique, move through the system like a swift-flowing river. That is why I am happy where I am.”\n\nThe personal computer programmer, upon hearing this, fell silent. But the two programmers remained friends until the end of their days.\n\n\n\n8.4\n\nHardware met Software on the road to Changtse. Software said: “You are Yin and I am Yang. If we travel together, we will become famous and earn vast sums of money.” And so they set forth together, thinking to conquer the world.\n\nPresently, they met Firmware, who was dressed in tattered rags and hobbled along propped on a thorny stick. Firmware said to them: “The Tao lies beyond Yin and Yang. It is silent and still as a pool of water. It does not seek fame; therefore, nobody knows its presence. It does not seek fortune, for it is complete within itself. It exists beyond space and time.”\n\nSoftware and Hardware, ashamed, returned to their homes.\n\n\n\nBOOK 9\n\nEpilogue\n\nThus spake the Master Programmer:\n\n“Time for you to leave.”\n\n\n"
        },
  
      {
        "title"    : "Accessible Software",
        "url"      : "/accessibility/",
        "content"  : "\n\nhttps://www.accessibility-developer-guide.com\n\n\n  \n    Be mindful of color, contrast, and fonts\n  \n  \n    A website should be usable without a mouse, only a keyboard. This is also halfway to making it screen-reader friendly\n  \n  \n    Buttons and links with href are focusable. Change the focus by Tab on Chrome and Option + Tab on Safari, click with Enter\n  \n  \n    Consider people with disabilities, people using screen readers, color blind people, people with poor vision or hearing, …\n  \n  \n    Opt for bigger, cleaner, uncluttered elements\n  \n  \n    Add descriptions to your images\n  \n  \n    Use web standards. Use standard HTML tags, buttons, links, onclicks, ..\n  \n  \n    Convoluted things are not accessible\n  \n  \n    Make it clear where I am and where I can go from here. Sensible urls, clear navigation links, and breadcrumbs\n  \n\n\n"
        },
  
      {
        "title"    : "Evolution Of Computer Interfaces",
        "url"      : "/evolution-of-computer-interfaces/",
        "content"  : "We create things to benefit humans. Software is no exception. At our current level of technology, we mostly interact with computers within well-defined boundaries, buttons, input fields, editors\n\nA Brief Rant on the Future of Interaction Design (worrydream.com)\n"
        },
  
      {
        "title"    : "How Technology is Hijacking Your Mind",
        "url"      : "/hijacked-minds/",
        "content"  : "Inspired by https://medium.com/thrive-global/how-technology-hijacks-peoples-minds-from-a-magician-and-google-s-design-ethicist-56d62ef5edf3\n\nIf You Control the Menu, You Control the Choices\n\n\n  Don’t you see that the whole aim of Newspeak is to narrow the range of thought?\n\n  In the end we shall make thoughtcrime literally impossible,\n\n  because there will be no words in which to express it\n\n  1984\n\n\nWhat’s not on the menu?\n\nFear of missing out\n\nSlot machine in your pocket,\n\n\n  irregular, intermittent reward schedule\n  the feeling of a ‘near-miss’\n\n\nSocial approval\n\nReciprocity, you like me, I like you\n\nInfinite feeds\n\nAutoplay\n\nBottomless bowls\n\nInterruption is good for business\n\nEasy to get in, hard to cancel\n"
        },
  
      {
        "title"    : "Natural UX",
        "url"      : "/natural-tech/",
        "content"  : "Tech blends into reality as it matures\n\nWe evolved to use our hands and eyes,\n\nnot to tap on glasses,\n\nor to spend our days dreaming in artificial virtual places,\n\ntech should bring us together and make our lives richer instead of making us comfortably numb\n\nDesign\n\nhttps://www.sony.net/Products/Developer-Spatial-Reality-display/en/\n\nhttps://blog.google/technology/research/project-starline/\n\nhttps://ciechanow.ski/mechanical-watch/\n\n"
        },
  
      {
        "title"    : "Polished Pixels",
        "url"      : "/polished-pixels/",
        "content"  : "People mistake a polished UI for good software\n\nPixels on the screen are what matters to non-programmers. Why not make it beautiful\n\nhttps://www.joelonsoftware.com/2002/02/13/the-iceberg-secret-revealed/\n\nAkins Laws Of Spacecraft 29. A bad design with a good presentation is doomed eventually. A good design with a bad presentation is doomed immediately.\n\nDesign\n"
        },
  
      {
        "title"    : "Things end users care about but programmers don&#39;t",
        "url"      : "/things-users-care/",
        "content"  : "From https://instadeq.com/blog/posts/things-end-users-care-about-but-programmers-dont/\n\nColors\n\nThemes\n\nFormatting\n\nUX\n\nIntegrations\n\nEasy to install\n\nEasy to update\n\nEasy to backup\n\nEasy to recover\n"
        },
  
      {
        "title"    : "Why You Only Need to Test with 5 Users",
        "url"      : "/usability-testing/",
        "content"  : "Usability is a quality attribute that assesses how easy user interfaces are to use.\n\nIn a usability-testing session, a researcher (called a “facilitator” or a “moderator”) asks a participant to perform tasks, usually using one or more specific user interfaces. While the participant completes each task, the researcher observes the participant’s behavior and listens for feedback.\n\nZero users give zero insights.\n\n15 users discover almost all usability problems\n\nAdd more and more users, you learn less and less because you will keep seeing the same things again and again\n\n3 tests with 5 users each\n\nhttps://www.nngroup.com/articles/why-you-only-need-to-test-with-5-users/\n"
        },
  
      {
        "title"    : "UX",
        "url"      : "/ux/",
        "content"  : "Visual design rules you can safely follow every time (anthonyhobday.com)\n"
        },
  
      {
        "title"    : "Arts",
        "url"      : "/arts/",
        "content"  : "“I believe entertainment can aspire to be art, and can become art, but if you set out to make art you’re an idiot.”\n"
        },
  
      {
        "title"    : "Cinema",
        "url"      : "/cinema/",
        "content"  : "https://www.youtube.com/@everyframeapainting\n\n"
        },
  
      {
        "title"    : "Creativity",
        "url"      : "/creativity/",
        "content"  : "Good ideas are in plain sight. They are about reordering existing + connecting + right timing.\n\nDon’t look for ideas, work on things that you find genuinely interesting\n\n\n  Creativity is just connecting things.\n\n  Creative people feel a little guilty because they just saw something obvious.\n\n  Steve Jobs\n\n\n“Make the expensive cheap.\n\nMake the inaccessible accessible.\n\nMake the complex simple.\n\nMake the difficult easy.\n\nThere are opportunities everywhere.”\n\nTag: creativity - Sketchplanations\n\nTag: ideas - Sketchplanations\n"
        },
  
      {
        "title"    : "Design",
        "url"      : "/design/",
        "content"  : "Tag: design - Sketchplanations\n\n\n  Design is the core and it keeps expressing itself in successive outer layers of the product or service.\n  \n    Good design resembles a likable person: respectful, generous and helpful.\n  \n  \n    Know thy user and you are not your user\n  \n  Design for the way people behave, not for how you wish them to behave.\n  Ask about specific problems in the past and what they did about them\n  Test early and often\n  \n    Three test-and-fix cycles with 5 users\n  \n  \n    Do One Thing At A Time And Do It Well\n  \n  Design is like a mom, nobody notices when she’s around, but everybody misses her when she’s not.\n  \n    Its simple enough if the user can easily and intuitively grasp how it works\n  \n  \n    Take hints from the past\n  \n  \n    Don’t design for everyone. It makes everyone unhappy.\n  \n  Be mindful of emotions, soothe fears, use nostalgia, give hope\n  Design can be evil How Technology is Hijacking Your Mind\n\n\n"
        },
  
      {
        "title"    : "Don Norman",
        "url"      : "/don-norman/",
        "content"  : "Design is really an act of communication, which means having a deep understanding of the person with whom the designer is communicating.\n\nPrinciples of design:\n\n  Use both knowledge in the world and knowledge in the head.\n  Simplify the structure of tasks.\n  Make things visible: bridge gulfs between Execution and Evaluation.\n  Get the mappings right.\n  Exploit the power of constraints.\n  Design for error.\n  When all else fails, standardize.\n\n\nGood design is actually a lot harder to notice than poor design, in part because good designs fit our needs so well that the design is invisible\n\nIn design, one of the most difficult activities is to get the specifications right\n\nFail often, fail fast\n\nAny time you see signs or labels added to a device, it is an indication of bad design\n\nWhat makes something simple or complex? It’s not the number of dials or controls or how many features it has: It is whether the person using the device has a good conceptual model of how it operates.\n\n― Donald A. Norman\n"
        },
  
      {
        "title"    : "Double-diamond design process &lt;&gt;&lt;&gt;",
        "url"      : "/double-diamond/",
        "content"  : "&lt; Diverge-Converge &gt; &lt; Diverge-Converge &gt;\n\n&lt; Explore the problem space - Define the problem &gt; &lt; Explore possible solutions - Find the solution to focus  &gt;\n\n"
        },
  
      {
        "title"    : "Everyday Objects",
        "url"      : "/everyday-objects/",
        "content"  : "Things Come Apart - TODD MCLELLAN MOTION/STILLS\n\nMechanical Watch – Bartosz Ciechanowski\n\nArchives - Bartosz Ciechanowski\n"
        },
  
      {
        "title"    : "Ship It",
        "url"      : "/ship-it/",
        "content"  : "Ship it\n\nUsage is like oxygen for ideas.\n\nYou can’t make it better until you make it work.\n\n“Release early. Release often.”\n\nA good plan violently executed now is better than a perfect plan next week.\n\n\n\n\n"
        },
  
      {
        "title"    : "Cien Anos De Soledad",
        "url"      : "/cien-anos-de-soledad/",
        "content"  : "Many years later, as he faced the firing squad, Colonel Aureliano Buendía was to remember that distant afternoon when his father took him to discover ice.\n\n“…time was not passing…it was turning in a circle…”\n\n“One winter night while the soup was boiling in the fireplace, he missed the heat of the back of his store, the buzzing of the sun on the dusty almond trees, the whistle of the train during the lethargy of siesta time, just as in Macondo he had missed the winter soup in the fireplace, the cries of the coffee vendor, and the fleeting larks of springtime. Upset by two nostalgias facing each other like two mirrors, he lost his marvelous sense of unreality and he ended up recommending to all of them that they leave Macondo, that they forget everything he had taught them about the world and the human heart, that they shit on Horace, and that wherever they might be they always remember that the past was a lie, that memory has no return, that every spring gone by could never be recovered, and that the wildest and most tenacious love was an ephemeral truth in the end.”\n\n“His orders were being carried out even before they were given, even before he thought of them, and they always went much beyond what he would have dared have them do. Lost in the solitude of his immense power, he began to lose direction.”\n\n“The secret of a good old age is simply and honorable pact with solitude.”\n“El secreto de una buena vejez no es mas que un pacto honrado con la soledad.”\n\n“Both described at the same time how it was always March there and always Monday, and then they understood that José Arcadio Buendía was not as crazy as the family said, but that he was the only one who had enough lucidity to sense the truth of the fact that time also stumbled and had accidents and could therefore splinter and leave an eternalized fragment in a room.”\n\n“What worries me is that out of so much hatred for the military, out of fighting them so much and thinking about them so much, you’ve ended up as bad as they are. And no ideal in life is worth that much baseness.”\n\n“Perhaps, not only to attain her but also to conjure away her dangers, all that was needed was a feeling as primitive and as simple as that of love, but that was the only thing that did not occur to anyone.”\n"
        },
  
      {
        "title"    : "Classics",
        "url"      : "/classics/",
        "content"  : "Cien Anos De Soledad\n\nDon Quixote\n\nHamlet\n\nLes Miserables\n\nNausea\n\nOblomov\n\nOf Mice and Men\n\nThe Count of Monte Cristo\n\nThe Death of Ivan Ilych\n\nThe Gambler\n\nThe Hitchhiker’s Guide to the Galaxy\n\nIliad\n\nOdyssey\n\nThe Metamorphosis\n\nThe Overcoat\n\nThe Plague\n\nThe Stranger\n\nThe Trial\n\n"
        },
  
      {
        "title"    : "Do Not Lie To Yourself",
        "url"      : "/do-not-lie-to-yourself/",
        "content"  : "“Above all, don’t lie to yourself.\n\nThe man who lies to himself and listens to his own lie comes to a point\n\nthat he cannot distinguish the truth within him, or around him,\n\nand so loses all respect for himself and for others.\n\nAnd having no respect he ceases to love.”\n\n― Fyodor Dostoevsky, The Brothers Karamazov\n"
        },
  
      {
        "title"    : "Tolstoy on clear speech",
        "url"      : "/elaborate-vs-clear-speech/",
        "content"  : "“When people speak in a very elaborate and sophisticated way,\n\nthey either want to tell a lie, or to admire themselves.\n\nYou should not believe such people.\n\nGood speech is always clear, clever, and understood by all.”\n\n—Leo Tolstoy\n"
        },
  
      {
        "title"    : "Ince Memed",
        "url"      : "/ince-memed/",
        "content"  : "Zaman zaman bir celik piriltisi gelir yerlesir gozlerine Ince Memedin. Bu pirilti insanin haksizliga ve bozuk duzene isyanidir. Koylu boyle degil,  alisir, kaniksar, boyun eger, yeter ki yasasin, yasasin da nasil olursa olsun. Insan daha cogunu ister, almak icin de pislige batmaya razidir. Ozgur ve onurlu yasamanin bedeli omur boyu mucadeledir. Bu yolda cabalamak ne guzeldir. Omur, ister uzun olsun isterse kisa.\n"
        },
  
      {
        "title"    : "Literature",
        "url"      : "/literature/",
        "content"  : "\n"
        },
  
      {
        "title"    : "The Art of War",
        "url"      : "/the-art-of-war/",
        "content"  : "The point is winning without fighting\n\nKnow yourself, know the enemy, win with ease\n\n\n\nFirst eliminate the risk of defeat, than look for victory\n\nRecklessness, cowardice, haste, pride, mercy leads to defeat\n\n\n\nTo secure ourselves is in our hands.\n\nEnemy provides the opportunity to be defeated.\n\n\n\nKnow when to fight and when not to fight.\n\nPlan before the battle, count the cost if you wish to fight\n\nHaste is stupid but long delays are not clever either\n\n\n\nEvade stronger enemy\n\nIf the enemy is united, separate them\n\nDon’t make your enemy desperate, leave an outlet\n\nNever interrupt your enemy when he is making a mistake.\n\n\n\nWarfare Is Deception\n\n"
        },
  
      {
        "title"    : "Türk Mirası",
        "url"      : "/turk-mirasi/",
        "content"  : "Bilge Kagan\n\nTürk milleti, tokluğun kıymetini bilmezsin. Acıksan tokluk düşünmezsin. Bir doysan açlığı düşünmezsin.\n\nÖyle kazanılmış, öyle düzene sokulmuş ilimiz, töremiz vardı. Türk, Oğuz beyleri, milleti işit: Üstte gök basmasa, altta yer delinmese, Türk milleti, ilini, töreni kim bozabilecekti? Türk milleti, vazgeç, pişman ol! iyi iline kendin hata ettin, kötü hale soktun.\n\nDede Korkut\n\nBaba malından ne fayda başta devlet olmasa\n\nEski pamuk bez olmaz, eski dusman dost olmaz\n\nYalan soz bu dunyada olunca olmasa iyi\n\nKız anadan görmeyince öğüt almaz, oğul babadan görmeyince sufra çekmez\n\nKönlin yüce tutan erde devlet olmaz\n\nNe yirde sızılar var ise çeken bilir\n\n##\n\nAlp Er Tunga öldi mü\nİsiz ajun kaldı mu\nÖdlek öçin aldı mu\nEmdi yürek yırtılur\n\nÖdlek yırag közetti\nOgrı tuzak uzattı\nBegler begin azıttı\nKaçan kalı kurtulur\n\nÖgreyüki mundak ok\nMunda adın tıldak ok\nAtsa ajun ograp ok\nTaglar başı kertilür\n\n\n\nAlp Er Tunga öldü mü?\nDünya ıssız kaldı mı?\nFelek öcünü aldı mı?\nŞimdi yürek yırtılır\n\nFelek fırsat gözetti\nGizli tuzak uzattı\nBeyler beyini şaşırttı\nKaçan nasıl kurtulur\n\nDünyanın geleneği böyle\nGerisi bütünüyle bahane\nO gelip bir ok atsa,\nDağlar başı kertilir\n"
        },
  
      {
        "title"    : "Classical Music",
        "url"      : "/classical-music/",
        "content"  : "\n"
        },
  
      {
        "title"    : "Electro House",
        "url"      : "/electro-house/",
        "content"  : "Daft Punk\n\n"
        },
  
      {
        "title"    : "Film Scores",
        "url"      : "/film-scores/",
        "content"  : "Concerning Hobbits\n\nCornfield Chase\n\nFly - Ludovico Einaudi\n\nFor a Few Dollars More\n\nNo Time for Caution\n\nThe Imitation Game\n\nThe Godfather Theme\n\nLast of the Mohicans\n\nMisirlou\n\n\n\nCarl Orff\n\nHans Zimmer\n\nHoward Shore\n\nEvgeny Grinko\n\nYo Yo Ma\n\nYann Tiersen\n\nEnya\n\n"
        },
  
      {
        "title"    : "Music",
        "url"      : "/music/",
        "content"  : "\n"
        },
  
      {
        "title"    : "Rap",
        "url"      : "/rap/",
        "content"  : "Eminem\n\nDr. Dre\n\nSnoop Dogg\n\n"
        },
  
      {
        "title"    : "Rock",
        "url"      : "/rock/",
        "content"  : "Aerosmith\n\nBlack Sabbath\n\nBob Dylan\n\nBon Jovi\n\nCream\n\nDeep Purple\n\nDire Straits\n\nEagles\n\nIron Maiden\n\nJefferson Airplane\n\nKansas\n\nLed Zeppelin\n\nLynyrd Skynyrd\n\nNirvana\n\nPink Floyd\n\nPixies\n\nRammstein\n\nScorpinos\n\nSting\n\nThe Doors\n\nThe Rolling Stones\n\n"
        },
  
      {
        "title"    : "Sanatcilar",
        "url"      : "/sanatcilar/",
        "content"  : "Asik Veysel\n\nNeset Ertas\n\nMahzuni Serif\n\nKazanci Bedih\n\n\n\nBaris Manco\n\nErkin Koray\n\nCem Karaca\n\n\n\nZeki Muren\n\nMuzeyyen Senar\n\n\n\nDuman\n\nTeoman\n\nPinhani\n\nMor ve Otesi\n\nAthena\n\nAdamlar\n\nMFO\n\nGoksel\n\nHaluk Levent\n\nGokhan Kirdar\n\n\n\nTolga Candar\n\nKazim Koyuncu\n\n\n\nSelda Bagcan\n\nZulfu Livaneli\n\nAhmet Kaya\n\nCeylan Ertem\n\nCem Adrian\n\n\n\nCekic Ali\n\nKivircik Ali\n\nArap Sukru\n\n\n\nCeza\n\nSagopa\n\n\n\nGaye Su Akyol\n\nIpek Ipekcioglu\n\n\n\nSerdar Ortac\n\nTarkan\n\nMustafa Sandal\n\n"
        },
  
      {
        "title"    : "Paintings",
        "url"      : "/paintings/",
        "content"  : "Some liked artwork on Google Arts &amp; Culture\n\nHigh definition, printable public paintings\n\n"
        },
  
      {
        "title"    : "Act",
        "url"      : "/act/",
        "content"  : "“It is not the critic who counts; not the man who points out how the strong man stumbles, or where the doer of deeds could have done them better. The credit belongs to the man who is actually in the arena, whose face is marred by dust and sweat and blood; who strives valiantly; who errs, who comes short again and again, because there is no effort without error and shortcoming; but who does actually strive to do the deeds; who knows great enthusiasms, the great devotions; who spends himself in a worthy cause; who at the best knows in the end the triumph of high achievement, and who at the worst, if he fails, at least fails while daring greatly, so that his place shall never be with those cold and timid souls who neither know victory nor defeat.”\n― Theodore Roosevelt\n"
        },
  
      {
        "title"    : "All is One",
        "url"      : "/all-is-one/",
        "content"  : "We name things so we can talk about them.  It’s useful but artificial since names don’t exist outside our minds.\n\nA tree might seem like a separate thing but it could not exist without water, soil, and the sun. You take a tree and the sun comes with it\n\nCarbon in proteins, calcium in bones, iron in the blood, and oxygen in the air; all created in the heart of stars\n\nTake anything and the whole universe comes with it\n\n\n\nYou are a child of the universe no less than the trees and the stars\n\n\n  “Put light against light – you have nothing.\n\n  Put dark against dark – you have nothing.\n\n  It’s the contrast of light and dark that each gives the other one meaning.” Bob Ross\n\n\nHigh and low\n\nLong and short\n\nSound and silence\n\nDifficult and easy\n\nGood and evil\n\nDark and light\n\nThey define and complete each other, they are sides of the same coin\n\nNow our minds are one\n\n☯\n"
        },
  
      {
        "title"    : "Balance",
        "url"      : "/balance/",
        "content"  : "Nature is balancing,\n\nbrings the high down,\n\nlifts the low,\n\ntakes from those who have,\n\ngives to those who have not\n\n\n\nPeople are not so,\n\nThey take from who have not\n\nand fill up those who have\n\n\n\nWater becomes clear when its still for a while,\n\nIf it stays still too much, it becomes unclean,\n\nSo there is a balance\n"
        },
  
      {
        "title"    : "Be Good To Each Other And Yourself",
        "url"      : "/be-good-to-each-other-and-yourself/",
        "content"  : "From http://paulbuchheit.blogspot.com/2012/03/eight-years-today.html\n\n…\n\nI keep looking for meaning, but all I’ve found so far is that in order to be at peace with the present, we must be at peace with the past, because the present is a product of the past. Accept. Accept. Accept. Learn to love the present moment. What happened, happened.\n\nOn a more practical level, what matters most in our day-to-day lives is that we’re good to ourselves and to each other. It’s actually not possible to only do one or the other – we must do both or neither.\n\nSometimes, when I write about startups or other interests of mine, I worry that perhaps I’m communicating the wrong priorities. Investing money, creating new products, and all the other things we do are wonderful games and can be a lot of fun, but it’s important to remember that it’s all just a game. What’s most important is that we are good to each other, and ourselves. If we “win”, but have failed to do that, then we have lost. Winning is nothing. This doesn’t mean that we can’t push ourselves or stretch our own limits. Those things can be very healthy, but only when done for their own sake. Ultimately, the people who learn to love what they do will be the ones who accomplish the most anyway. Those who push only for the sake of some future reward, or to avoid failure, very often burn out, sometimes tragically. Please don’t do that.\n\nPlease be good to each other, and yourself.\n"
        },
  
      {
        "title"    : "Books",
        "url"      : "/books-phil/",
        "content"  : "Tao Te Ching\n\nEnchiridion\n\nMeditations by Marcus Aurelius\n\nOn the Shortness of Life by Seneca\n\nRubaiyat of Omar Khayyam\n\nDie Kunst, glücklich zu sein by Schopenhauer\n\n\n\nThe Art of War\n\n"
        },
  
      {
        "title"    : "On Character",
        "url"      : "/character/",
        "content"  : "“The content of your character is your choice. Day by day, what you choose, what you think, and what you do is who you become.”\n\n“Your ideas determine the quality of your life, your soul takes on the color of your thoughts”\n\n“Well-being is attained little by little, and nevertheless is no little thing itself”\n\nReal wealth is building character. Applying your qualities. Healing your wounds. Understanding your dark side.\n\nNothing in excess. Simple things are the best.\n\nNeither chase nor avoid, feel and let go.\n\nDo what feels right over what you crave.\n\nDo nothing in anger.\n\nThe world is full of nonsense. It’s not personal. It doesn’t matter. Don’t let it get you down.\n\nComplain less, appreciate more.\n\nChannel your pain to build strength. This too shall pass.\n\n“Circumstances don’t make the man but reveal him”\n\nTruth has many faces. Even all the knowledge of humanity is next to nothing. Judge less, accept more.\n\nListen more than you speak. Know your limits. Don’t take yourself too seriously.\n\nNever miss a good chance to shut up.\n\nSee also\n\nDo Not Lie To Yourself\n\nWho Goes Nazi\n\n\n"
        },
  
      {
        "title"    : "Choice",
        "url"      : "/choice/",
        "content"  : "“Were I to wish for anything I would not wish for wealth and power,\n\nbut for the passion of the possible,\n\nthat eye which everywhere, ever young, ever burning, sees possibility.\n\nPleasure disappoints, not possibility.”\n\nSøren Kierkegaard\n\n\n\nEverything can be taken from a man but one thing,\n\nthe last of the human freedoms,\n\nto choose one’s attitude in any given set of circumstances,\n\nto choose one’s own way.\n\nViktor E. Frankl\n\n"
        },
  
      {
        "title"    : "Concepts In Greek Thought",
        "url"      : "/concepts-in-greek-thought/",
        "content"  : "\n  Eudaimonia, ‘good spirit’, ‘happiness’ ‘welfare’, ‘flourishing’\n  Apatheia, freedom from pain and fear\n  Arete, excellence, the realization of potential\n  Ataraxia, freedom from trouble, distress and worry\n  Harmonia\n  Epoché, suspension of judgment\n  Praxis, practice\n  Sophrosyne, sound-mindedness\n  Andreía, courage\n  Dikaiosýnē, justice\n  Phronesis, good judgment\n\n\nIn alphabetical order\n\n\n  \n    Apatheia (Greek: ἀπάθεια; from a- “without” and pathos “suffering” or “passion”), freedom from pain and fear.\n  \n  \n    Arete (Greek: ἀρετή, aretḗ) ‘excellence’ of any kind, especially a person or thing’s “full realization of potential or inherent function.”\n  \n  \n    Ataraxia (Greek: ἀταραξία, from alpha privative (“a-“, negation) and tarachē “disturbance, trouble”; hence, “unperturbedness”, generally translated as “imperturbability”, “equanimity”, or “tranquility”), ongoing freedom from distress and worry.\n  \n  \n    Epoché (ἐποχή epokhē, “cessation”) “suspension of judgment”, “withholding of assent”, setting aside assumptions and beliefs\n  \n  \n    Ethos (/ˈiːθɒs/ or US: /ˈiːθoʊs/) is a Greek word meaning “character” that is used to describe the guiding beliefs or ideals that characterize a community, nation, or ideology; and the balance between caution, and passion\n  \n  \n    Eudaimonia (Greek: εὐδαιμονία), the state or condition of ‘good spirit’,  ‘happiness’ ‘welfare’, ‘flourishing’\n  \n\n\nIn the works of Aristotle, eudaimonia was the term for the highest human good, the aim of practical philosophy-prudence, including ethics and political philosophy\n\n\n  \n    Dogma is a belief accepted without being questioned or doubted\n  \n  \n    Phronesis (Ancient Greek: φρόνησῐς, romanized: phrónēsis), translated into English by terms such as prudence, practical virtue and practical wisdom, or, colloquially, sense (as in “good sense”, “horse sense”) is an ancient Greek word for a type of wisdom or intelligence relevant to practical action. It implies both good judgment and excellence of character and habits, and was a common topic of discussion in ancient Greek philosophy, in ways that are still influential today.\n  \n\n\nGaining phronesis requires experience, according to Aristotle who wrote that:\n\n…although the young may be experts in geometry and mathematics and similar branches of knowledge [sophoi], we do not consider that a young man can have Prudence [phronimos]. The reason is that Prudence [phronesis] includes a knowledge of particular facts, and this is derived from experience, which a young man does not possess; for experience is the fruit of years.\n\n\n  \n    Praxis (from Ancient Greek: πρᾶξις, romanized: praxis) is the process by which a theory, lesson, or skill is enacted, embodied, or realized. “Praxis” may also refer to the act of engaging, applying, exercising, realizing, or practicing ideas.\n  \n  \n    Sophrosyne (Greek: σωφροσύνη) is an ancient Greek concept of an ideal of excellence of character and soundness of mind, which when combined in one well-balanced individual leads to other qualities, such as temperance, moderation, prudence, and self-control. An adjectival form is “sophron.”\n  \n\n\nIt is similar to the concepts of zhōngyōng (中庸) of Chinese Confucianism and sattva (सत्त्व) of Indian thought.\n\nTechne (Greek: τέχνη) ‘craft, art’, making or doing\n\n"
        },
  
      {
        "title"    : "Enemies",
        "url"      : "/enemies/",
        "content"  : "“You have enemies? Good. That means you’ve stood up for something, sometime in your life.”\n\nThey test us and make us stronger.\n\nThey exploit our flaws, motivating us to correct them.\n\nThey show us what we do not wish to become.\n\n“The best revenge is not to be like your enemy” MA\n\n“Before you embark on journey of revenge, dig two graves” Confucius\n\n"
        },
  
      {
        "title"    : "Epicurus",
        "url"      : "/epicurus/",
        "content"  : "A misunderstood thinker, even in his own time\n\nEpicurus regarded ataraxia (tranquility, freedom from fear) and aponia (absence of pain) as the height of happiness. A simple life free from fear, pain, greed, desire, anger, and worry\n\nWhen we say … that pleasure is the end and aim, we do not mean the pleasures of the prodigal or the pleasures of sensuality, as we are understood to do by some through ignorance, prejudice or wilful misrepresentation. By pleasure, we mean the absence of pain in the body and trouble in the soul. It is not by an unbroken succession of drinking bouts and of revelry, not by sexual lust, nor the enjoyment of fish and other delicacies of a luxurious table, which produce a pleasant life; it is sober reasoning, searching out the grounds of every choice and avoidance, and banishing those beliefs through which the greatest tumults take possession of the soul.\n\n— Epicurus, “Letter to Menoeceus”\n\nNon fui, fui, non sum, non curo\n\n(“I was not; I have been; I am not; I do not mind.”)\n"
        },
  
      {
        "title"    : "On a good life 🌱",
        "url"      : "/eudaimonia/",
        "content"  : "“Think of yourself as dead. You have lived your life. Now take what’s left and live it properly.”\n\nLearn and move on\n\nOne Bit Better\n\nConsider beginnings. Solve problems while they are still small.\n\nDo without doing - Wu Wei 無爲\n\nOn Character\n\nSee also\n\nCognitive Biases\n\nDeath\n\nHappiness\n\n\n\nLove\n\nModeration\n\nOn Decisions\n\nChoice\n\nTake a walk\n"
        },
  
      {
        "title"    : "Experiences Vs Materials",
        "url"      : "/experiences-vs-materials/",
        "content"  : "Happiness from an experience lasts longer.\n\nMaterial things have the worst kind of hedonic adaptation.\n\nThey come through great toil; kept by great anxiety.\n\n\n\n1\n2\n3\nWas Du erlebst, kann keine Macht der Welt Dir rauben. \n\nWhat you have experienced, no power on earth can take from you.\n\n"
        },
  
      {
        "title"    : "Free Will",
        "url"      : "/free-will/",
        "content"  : "We might have less free will than we think\n\nMany factors shape us, culture, society, geography, zeitgeist, …\n\n“What we call human nature is mostly culture”  _Margaret Mead\n\n“People are a product of the time they live and few can raise above the ideas of the time” Voltaire\n"
        },
  
      {
        "title"    : "Freedom",
        "url"      : "/freedom/",
        "content"  : "The price of freedom is dear yet worth it\n\n\n\nFreedom is to have time for yourself and your loved ones, to be your master\n\nFreedom is to conquer your dark side, your anger, greed, pride, ..\n\nFreedom from pain, fear, regret, worry, greed, anger, hate, and egoism, …\n\nIt’s not the absence of negatives but not being controlled by them; the reign of a rational mind and a loving heart\n\n“He who does not move, does not notice his chains”\n\n“In this age, the mere example of non-conformity is a service” John Stuart Mill\n\n“What destroys a man more quickly than to work, think, and feel without inner necessity, without any deep personal desire, without pleasure — as a mere automaton of duty?” – Friedrich Nietzsche, The Antichrist\n\n[[philosophy/character]]\n\nFree Will\n"
        },
  
      {
        "title"    : "Friends",
        "url"      : "/friends/",
        "content"  : "After health, friends are a key part of a good life\n\n“Friendship is unnecessary, like philosophy, like art…. It has no survival value; rather it is one of those things which give value to survival.”\n― C.S. Lewis, The Four Loves\n\n“The capacity for friendship is God’s way of apologizing for our families.”\n\n“When you stop expecting people to be perfect, you can like them for who they are.”\n"
        },
  
      {
        "title"    : "Getting Old",
        "url"      : "/getting-old/",
        "content"  : "“The Little Boy and the Old Man\n\nSaid the little boy, “Sometimes I drop my spoon.”\nSaid the old man, “I do that too.”\nThe little boy whispered, “I wet my pants.”\nI do that too,” laughed the little old man.\nSaid the little boy, “I often cry.”\nThe old man nodded, “So do I.”\nBut worst of all,” said the boy, “it seems\nGrown-ups don’t pay attention to me.”\nAnd he felt the warmth of a wrinkled old hand.\nI know what you mean,” said the little old man.”\n― Shel Silverstein\n\n“…inside every old person is a young person wondering what happened.”\n― Terry Pratchett, Moving Pictures\n"
        },
  
      {
        "title"    : "Good And Evil",
        "url"      : "/good-and-evil/",
        "content"  : "“If only it were all so simple! If only there were evil people somewhere insidiously committing evil deeds, and it were necessary only to separate them from the rest of us and destroy them. But the line dividing good and evil cuts through the heart of every human being. And who is willing to destroy a piece of his own heart?”\n\n— Aleksandr Solzhenitsyn, The Gulag Archipelago 1918–1956.\n\n“For neither good nor evil can last for ever; and so it follows that as evil has lasted a long time, good must now be close at hand.”\n\n— Miguel de Cervantes, Don Quixote\n\nThis one is gambler’s fallacy but hopeful\n\n"
        },
  
      {
        "title"    : "Gratitude",
        "url"      : "/gratitude/",
        "content"  : "I can find a million things to complain,\n\nor I can find a million things to appreciate\n\n\n"
        },
  
      {
        "title"    : "Happiness",
        "url"      : "/happiness/",
        "content"  : "“Something to do, someone to love, something to hope for.”\n\nA large part of happiness depends on health. Freedom, security, love, friendship, flourishing, ..\n\n“Happiness always looks small while you hold it in your hands, but let it go, and you learn at once how big and precious it is.” Maxim Gorky\n\n\n\n“Happy families are all alike; every unhappy family is unhappy in its own way.” _Tolstoy in Anna Karenina\n\n“Folks are usually about as happy as they make their minds up to be.” _Abraham Lincoln\n\n“Time you enjoy wasting is not wasted time.”\n\n“If more of us valued food and cheer and song above hoarded gold, it would be a merrier world.” _J.R.R. Tolkien\n\nDon’t waste your time in anger, regrets, worries, and grudges. Life is too short for that\n\nHappiness is not something ready made. It comes from your own actions\n\n\n\nSee also\n\nFlow\n\nGratitude\n\n"
        },
  
      {
        "title"    : "Hard Times",
        "url"      : "/hard-times/",
        "content"  : "This too shall pass\n\n“It’s not the load that breaks you down, it’s the way you carry it.”\n\nNo winter lasts forever; no spring skips its turn\n\nEven the darkest night will end and the sun will rise\n\nIf you are going through hell, keep going\n\nWhat matters most is how well you walk through the fire\n\n“So we shall let the reader answer this question for himself: who is the happier man, he who has braved the storm of life and lived or he who has stayed securely on shore and merely existed?”\n\n“And once the storm is over, you won’t remember how you made it through, how you managed to survive. You won’t even be sure, whether the storm is really over. But one thing is certain. When you come out of the storm, you won’t be the same person who walked in. That’s what this storm’s all about.”\n\nChannel your pain to build strength.\n\nThere will come soft rains\n\nWalk no more in shadows\n\nDifficulties vanish when faced boldly\n\nUnder the bludgeonings of chance, My head is bloody, but unbowed\n\nNothing beside remains. Round the decay\n\nCast aside fear and regret, do the deed at hand\n\nCourage is found in unlikely places\n\nMay it be a light to you in dark places, when all other lights go out\n\n"
        },
  
      {
        "title"    : "Ideal Insan",
        "url"      : "/ideal-insan/",
        "content"  : "aristoteles’e göre ideal insan:\n\n“kendini boşuna tehlikeye atmaz. çünkü onu kaygılandıran pek az şey vardır. ama önemli durumlarda hayatını bile seve seve verir. bazı şartlarda, yaşamanın anlamı olmadığını da bilir. insanlara yardıma koşar, kendisine yardım edildiğindeyse utanır. iyilik bağışlamak bir üstünlük belirtisidir. iyilik görmekse bir alçalmadır. kamu gösterilerine katılmaz. sevdiği sevmediği ortadadır. insanları ve nesneleri umursamadığından dürüst davranır, açık konuşur. gözünde hiçbir şey fazla büyük olmadığı için, hiçbir şeye karşı da fazla hayranlık duymaz. ancak dostuna karşı alttan alır, yoksa bu tür davranış bir köle özelliğidir. garaz nedir bilmez, olayları unutur, yürek incitecek şeyler üstünde durmaz. konuşmak için can atmaz. övülmesi ya da yerilmesi onu ilgilendirmez. düşman da olsa, başkaları hakkında kötü konuşmaz, ancak o kişi kendi kendinin düşmanıysa iş değişir. ağır başlı davranır, sesi toktur, sözleri ölçülüdür; telâşlı değildir, çünkü pek az şey onu kaygılandırır; hiçbir şeye fazla önem vermediği için de hiddete kapılmaz. cırtlak ses, acele adımlar, kaygı içindeki adama yakışır. hayatın cilvelerini vakar ve sükûnetle karşılar, az sayıdaki askerini büyük bir savaş stratejisi ile yöneten usta bir general gibi, içinde bulunduğu durumdan elinden geldiğince yararlanır. en iyi dost kendisidir, yalnız kalmaktan hoşlanır, erdemi ve yeteneği olmayan kişinin en büyük düşmanı ise kendisidir, yalnızlıktan o korkar.”\n"
        },
  
      {
        "title"    : "In Praise Of Idleness",
        "url"      : "/in-praise-of-idleness/",
        "content"  : "https://harpers.org/archive/1932/10/in-praise-of-idleness/\n\nIt is possible for every kind of life to have the basic necessities of a happy and fulfilling life, enough space, food, sunlight, and freedom\n\nNature is balancing but humans are greedy\n\nSince the agriculture started, he majority works much harder then they should and a minority collects the surplus. First they did it by force but inventing stories about the nobility of labor made it easier to keep a large number of exploited workers under control and requires less men-power to coerce them so its much less expensive\n\nA certain amount of manual labor is necessary to our existence but its not one of the ends of human life. If it were, we should have to consider every laborer superior to Shakespeare.\n\nModern methods of production have given us the possibility of ease and security for all; we have chosen instead to have overwork for some and starvation for others.\n\nIn a world where no one is compelled to work more than four hours a day every person possessed of scientific curiosity will be able to indulge it, people will have time to learn their craft better and gain mastery\n\nAbove all, there will be happiness and joy of life, instead of frayed nerves, weariness, and dyspepsia.\n\nOrdinary men and women, having the opportunity of a happy life, will become more kindly and less persecuting and less inclined to view others with suspicion\n\nGood nature is, of all moral qualities, the one that the world needs most, and good nature is the result of ease and security, not of a life of arduous struggle.\n\nWe have continued to be as energetic as we were before there were machines. In this we have been foolish, but there is no reason to go on being foolish for ever.\n"
        },
  
      {
        "title"    : "Know Where To Stop",
        "url"      : "/know-where-to-stop/",
        "content"  : "“Begin at the beginning,” the King said, very gravely,\n\n“and go on till you come to the end: then stop.”\n\n\n\n“If you know when to stop, you are in no danger”\n\nNever miss a good chance to shut up\n\nWind And Rain\n"
        },
  
      {
        "title"    : "Koans",
        "url"      : "/koans/",
        "content"  : "Two hands clap and there is a sound. What is the sound of one hand?\n\nOne said, “The flag moves.”\n\nThe other said, “The wind moves.”\n\nthe third said, “It is your mind that moves.”\n\n“The world is vast and wide. Why do you put on your robes at the sound of a bell?”\n\n“Why do you not enter? - I do not see myself as outside. Why enter?”\n\nWhen you can do nothing, what can you do?\n\nWhen the many are reduced to one, to what is the one reduced?\n\nWhere were you before you were born?\n"
        },
  
      {
        "title"    : "Let It Go",
        "url"      : "/let-it-go/",
        "content"  : "“That is why it is so important to let certain things go. To release them. To cut loose. People need to understand that no one is playing with marked cards; sometimes we win and sometimes we lose. Don’t expect to get anything back, don’t expect recognition for your efforts, don’t expect your genius to be discovered or your love to be understood. Complete the circle. Not out of pride, inability or arrogance, but simply because whatever it is no longer fits in your life. Close the door, change the record, clean the house, get rid of the dust. Stop being who you were and become who you are.”\n"
        },
  
      {
        "title"    : "Life Is Play",
        "url"      : "/life-is-play/",
        "content"  : "Do not expect to “get” anything\n\nDo not expect to be better\n\nLive as if you listen to music, or you play music\n\nPlay the game\n\nThe aim is the play itself\n"
        },
  
      {
        "title"    : "Look Below The Surface",
        "url"      : "/look-below-the-surface/",
        "content"  : "If you only see the obvious, you win by difficulty\n\nIf you look below the surface, you win with ease\n\nPolitics\n"
        },
  
      {
        "title"    : "Moderation",
        "url"      : "/moderation/",
        "content"  : "“Its braver to overcome desire than to conquer enemy, for the hardest victory is over self” Aristotle\n\n“How trivial the things we want so passionately are” MA\n\n“A brief existence is common to all things yet you avoid and pursue them as if they are eternal” MA\n\nThe Less The Better\n"
        },
  
      {
        "title"    : "One Bit Better",
        "url"      : "/one-bit-better/",
        "content"  : "You become what you think and do, day by day. Do your best, here and now.\n\n“Well being is attained little by little, and nevertheless is no little thing itself”\n\nNature does not hurry yet everything is accomplished.\n\n\n  O snail\n\n  Climb Mount Fuji,\n\n  But slowly, slowly!\n\n\n\nStart from your head, heart, and hands, and then work outward\n\nWalk slowly but walk 🐢\n\nLightly Child\n"
        },
  
      {
        "title"    : "Philosophy",
        "url"      : "/philosophy/",
        "content"  : "\n"
        },
  
      {
        "title"    : "Phronesis",
        "url"      : "/phronesis/",
        "content"  : "“…although the young may be experts in geometry and mathematics and similar branches of knowledge [sophoi], we do not consider that a young man can have Prudence [phronimos]. The reason is that Prudence [phronesis] includes a knowledge of particular facts, and this is derived from experience, which a young man does not possess; for experience is the fruit of years.” Aristotle\n"
        },
  
      {
        "title"    : "Questions",
        "url"      : "/questions/",
        "content"  : "\n  \n    What is in my control?\n  \n  \n    What is not?\n  \n  \n    What do I NOT want in life?\n  \n  \n    What would my best version do?\n  \n  \n    Is this the most important thing I should be working on?\n  \n  \n    What seems like work to other people yet play to me?\n  \n  \n    How do I feel?\n  \n  \n    Would I treat a friend as I treat myself?\n  \n  \n    What really matters?\n  \n  \n    What doesn’t matter?\n  \n  \n    What would I do if I knew I would die this year?\n  \n  \n    What do I have to lose? Will I not die anyway?\n  \n  \n    What is my reason for not following my heart?\n  \n\n\n"
        },
  
      {
        "title"    : "Seeking",
        "url"      : "/seeking/",
        "content"  : "“Whatever it is you’re seeking won’t come in the form you’re expecting.”\n― Haruki Marukami\n"
        },
  
      {
        "title"    : "Stupidity",
        "url"      : "/stupidity/",
        "content"  : "Stupidity is not ignorance, smart or educated people can also be very stupid\n\nIt’s false confidence and closed-mindedness\n\nUsing mental models not matching the reality\n\nPoor judgment\n\nHanlon’s Razor, think stupidity before malice\n\n[[politics/the-triumph-of-stupidity]]\n"
        },
  
      {
        "title"    : "Success And Failure",
        "url"      : "/success-and-failure/",
        "content"  : "“To leave the world a bit better\n\nwhether by a healthy child, a garden patch, or a redeemed social condition;\n\nto know that one life has breathed easier because you lived here.\n\nThis is to have succeeded.”\n\nFreedom\n\nIf\n\n“I can’t give you a sure-fire formula for success, but I can give you a formula for failure: try to please everybody all the time.”\n― Herbert Bayard Swope\n\n“Success is getting what you want, happiness is wanting what you get”\n"
        },
  
      {
        "title"    : "Take a walk",
        "url"      : "/take-a-walk/",
        "content"  : "\n\nGet some sleep\n\nTake a shower\n\nSpeak with a friend\n\nGrinding your wheels won’t solve your problem\n\nGive your mind some space\n\n"
        },
  
      {
        "title"    : "The Less The Better",
        "url"      : "/the-less-the-better/",
        "content"  : "Remove all nonessentials.\n\nSpeak less,\n\nthink less,\n\ndo less,\n\nhave less\n\nRecharge\n\n\n\nWant everything, lose everything\n\nWhat you want isn’t always best for you\n\nThe price of anything is the amount of life you exchange for it\n\n\n\n“Very little is needed to make a happy life; it is all within yourself, in your way of thinking”\n\n\n\n“This is a matter of freedom. If you don’t have many possessions then you don’t need to work all your life like a slave to sustain them, and therefore you have more time for yourself.”\n\n— Jose Mujica, 40th President of Uruguay\n\n“I end up not buying a lot of things. Because I find them ridiculous.” Steve Jobs\n\n\n"
        },
  
      {
        "title"    : "Death",
        "url"      : "/death/",
        "content"  : "“This is our big mistake to think death is in the future. most of the death is already gone. Whatever time has passed belongs to death” Seneca\n\nWe can only lose what we have. And this exact moment is all we have so we can’t lose the past or the future. How can you lose something that’s not yours?\n\n\n\nLiving until you die is living long enough.\n\n\n\n“What’s unusual about medical professionals is not how much treatment they get when faced with a terminal illness—but how little.\n\nThere will be no heroics, and I will go gentle into that good night. Like my mentor Charlie. Like my cousin Torch. Like my fellow doctors.”\n\nFrom https://www.saturdayeveningpost.com/2013/03/how-doctors-die/\n\n"
        },
  
      {
        "title"    : "Life is not short but we waste it",
        "url"      : "/on-the-shortness-of-life/",
        "content"  : "“Think of yourself as dead. Now take what’s left, and live it properly.” Marcus Aurelius\n\nOn the Shortness of Life\n\nThe whole wisdom and beauty of the world is here to be explored,\n\nand to expand your life beyond your time.\n\n\n\nIt is a small part of life we really live\n\na wasted life, even if it lasts more than a thousand years, will shrink into the tiniest span\n\nhow alarmed would you be if you only a few years ahead, and how carefully would they use them!\n\nyou may have even less time in reality\n\n\n\nLife is divided into three periods, past, present and future. Of these, the present is short, the future is doubtful, the past is certain. For this last is the one over which Fortune has lost her power, which cannot be brought back to anyone’s control.\n\nThe greatest obstacle to living is expectancy, which hangs upon tomorrow and loses today. You are arranging what lies in Fortune’s control, and abandoning what lies in yours\n\nPutting things off is the biggest waste of life: it snatches away each day as it comes, and denies us the present by promising the future\n\nWhat are you looking at? To what goal are you straining? The whole future lies in uncertainty: live immediately.\n\nLife is very short and anxious for those who forget the past, neglect the present, and fear the future.\n\n\n\nNo one will bring back the years; no one will restore you to yourself. Life will follow the path it began to take, and will neither reverse nor check its course. It will cause no commotion to remind you of its swiftness, but glide on quietly.\n\nWhat is doomed to fall delights no one. So it is inevitable that life will be not just very short but very miserable for those who acquire by great toil what they must keep by greater toil.\n\nThey achieve what they want laboriously; they possess what they have achieved anxiously; and meanwhile they take no account of time that will never more return. New preoccupations take the place of the old, hope excites more hope and ambition more ambition.\n\nAll the greatest blessings create anxiety, and Fortune is never less to be trusted than when it is fairest.\n\n\n\nOf all people only those are at leisure who make time for philosophy, only those are really alive. For they not only keep a good watch over their own lifetimes, but they annex every age to theirs.\n\nSeneca\n"
        },
  
      {
        "title"    : "Deepen your days",
        "url"      : "/slow-down-time/",
        "content"  : "From https://www.raptitude.com/2018/05/how-to-slow-down-time/\n\nOur early years also seem longer because they contain so many firsts—first thunderstorm, first swim in the ocean, first kiss, first car, first real job—each of which makes the year in which it happened seem more significant to the overall arc of life, creating a strong sense of progress and time well used.\n\nCompare that to the life of a middle-aged adult, which is much more governed by routine and repetition. Day after day, the same tasks are performed, the same roles embodied, the same forms of entertainment enjoyed. At mid-life, chances are you make new friends much less frequently, you move much less often, and you try things for the first time only rarely.\n\n\n\nTravel\n\nDo more physical activities\n\nSpend more time with people you enjoy talking to\n"
        },
  
      {
        "title"    : "The Morning",
        "url"      : "/the-morning/",
        "content"  : "“Do not shorten the morning by getting up late, or waste it in unworthy occupations or in talk; look upon it as the quintessence of life, as to a certain extent sacred.” – Arthur Schopenhauer\n"
        },
  
      {
        "title"    : "The Past",
        "url"      : "/the-past/",
        "content"  : "“Hell is truth seen too late”\n\nThe past had to be this way given all the factors. Many inputs come together and create an outcome, it’s not all your fault.\n\nGood judgment comes from experience. Eexperience comes from making a lot of mistakes. How can you make good moves without mistakes? How can you have good ideas without trying many bad ones? \n\nWe blame ourselves but most things are so random. Much of what we get, we don’t deserve.\n\nNeither blame yourself nor others. Forgive yourself, forgive others. Leave the baggage.\n\nWould you treat a beloved friend as you treat yourself? Be kind to yourself. If you won’t, who will?\n\nLearn from the past and move on.\n\n\n\n“You can spend minutes, hours, days, weeks, or even months over-analyzing a situation; trying to put the pieces together, justifying what could’ve, would’ve happened… or you can just leave the pieces on the floor and move the fuck on.”\n― Tupac Shakur\n\n"
        },
  
      {
        "title"    : "Time",
        "url"      : "/time/",
        "content"  : "Grid\n\n“Do you think that I count the days? There is only one day left, always starting over: it is given to us at dawn and taken away from us at dusk.”\n― Jean-Paul Sartre\n"
        },
  
      {
        "title"    : "Truth",
        "url"      : "/truth/",
        "content"  : "There are many ways to interpret reality\n\nAre you still young and dumb enough to know everything?\n\n\n\nLess “I know”,\n\nmore “It seems, maybe, probably”\n\n\n\nUncertainty\n\nProbability\n\nRelativity\n\n\n\n“The truth is like a lion. You don’t have to defend it. Let it loose; it will defend itself.” St. Augustine\n\n"
        },
  
      {
        "title"    : "Career advice",
        "url"      : "/career-advice/",
        "content"  : "Your Professional Decline Is Coming (Much) Sooner Than You Think\n\nDo what you can, now and here\n\nWe are complicit in our employer’s deeds\n\nSome career advice. - Irrational Exuberance (lethain.com)\n\nDon’t End The Week With Nothing (kalzumeus.com)\n\nSalary Negotiation: Make More Money, Be More Valued - Kalzumeus Software\n\nGrowing One’s Consulting Business (kalzumeus.com)\n\n"
        },
  
      {
        "title"    : "Teamwork",
        "url"      : "/teamwork/",
        "content"  : "// todo\n\nHowever hard you work, the results are limited by a single person.\n\nNothing great is built alone but by working effectively in groups.\n\nA team in harmony covers weaknesses and amplifies strengths.\n\n\n  \n    Almost everything is people and communication.\n  \n  \n    Everyone on the team should clearly understand why we are doing this in the first place\n  \n  \n    Explain the intent\n  \n  \n    People trust surgical teams with their lives because everyone in the team is an expert in their job, they trust each other and work together, leading to unparalleled professional prowess\n  \n  \n    Mastery and Respect lead to Trust, trust leads to autonomy and harmony\n  \n  \n    Company Culture is a result of Hiring decisions\n  \n  \n    Lead by example, words are forgotten but actions not\n  \n  \n    Highly trained and talented leaders, autonomous in decisions of their area\n  \n  \n    Make sure that every area of responsibility has a definite owner\n  \n  \n    Consistency and certainty in rewards and consequences\n  \n  \n    The right person in the right place\n  \n  \n    Due diligence\n  \n\n\n\n\n\n\n\n  Empower people. If people are not autonomous and empowered in their areas, how can you expect Creativity?\n\n\n\n\n\n  \n    Lead by inspiration\n  \n  \n    Build projects around motivated people. Provide the environment, remove obstacles\n  \n\n\n\n  If you want to build a ship,\n\n  don’t drum up people to collect wood\n\n  and don’t assign them tasks and work,\n\n  but rather teach them to long for the endless immensity of the sea.\n\n  — Antoine de Saint-Exupery\n\n\n\n  Focus on the important few\n\n\nDo One Thing At A Time And Do It Well\n\n\n  ‘Manage the top line, and the bottom line will follow.’ What’s the top line? It’s things like, why are we doing this in the first place? What’s our strategy? What are customers saying? How responsive are we? Do we have the best products and the best people? Those are the kind of questions you have to focus on.\n\n  Steve Jobs\n\n\n\n  \n    Balance data with intuition and experience\n  \n  Not every important thing is measurable\n  \n    Goodhart’s law: When a measure becomes a target, it ceases to be a good measure.\n  \n  There is no single leadership style that suits all\n\n\n\n\n\n\nWhat not to do\n\n\n  Trying to prove your worth\n  Insecurity\n  Micromanaging\n  Not delegating\n  Competing with reports\n  Complaining\n  \n    Treating people like kids, the workplace is not day-care\n  \n  Single management style, mostly the style in which you prefer to be managed\n  \n    Hiring people like yourself\n  \n  \n    Being all-business, viewing people as “resources”\n  \n  Impatience\n  Not listening well\n  \n    Not asking the right questions\n  \n  Don’t let people pressure you into decisions you don’t believe in. They’ll hold you responsible for them later, and they’ll be right. Decisions are your responsibility.\n\n\nAlso see this 1944 CIA memo, on how to infiltrate an organization and make it dysfunctional\n\n\n\nAlso see\n\nThe Great Leader\n\nDo without doing - Wu Wei 無爲\n"
        },
  
      {
        "title"    : "What to work on?",
        "url"      : "/what-to-work-on/",
        "content"  : "\n  Start with the why, then how and what\n  Going fast in the wrong direction is not productivity. Think more about what to work on.\n  What is fun to me but work for others? What makes me lose track of time? What comes naturally to me? What blurs the line between work and play?\n  What are the most important problems in your field, and why aren’t you working on them?\n  Being good at something doesn’t promise rewards. It doesn’t even promise a compliment. What’s rewarded in the world is scarcity, so what matters is what you can do that other people are bad at.\n  Play a game where the odds are in your favor. You’ll be most successful where you’re most intensely interested.\n  Don’t think about how proud you would be to run a marathon. Ask whether you like running.\n  Circle of Competence, understand what you know and what you don’t know\n  Teamwork\n\n\n\n\n\n"
        },
  
      {
        "title"    : "Work",
        "url"      : "/work/",
        "content"  : "Good work requires a relaxed and focused mind.\n\nDo One Thing At A Time And Do It Well\n\nGoing fast in the wrong direction is not productivity.\n\nMastery comes from focus and humility\n\nOnly genuine interest and passion can create beautiful results\n\nLeave it better than you found.\n\nYou Are Not Nameless\n\nBe Good To Each Other And Yourself\n\nGet Things Done\n\nOn Decisions\n"
        },
  
      {
        "title"    : "You Are Not Nameless",
        "url"      : "/you-are-not-nameless/",
        "content"  : "No problem is too small or too trivial if we can really do something about it.\n\nYou say you are a nameless man. You are not to your wife and to your child. You will not long remain so to your immediate colleagues if you can answer their simple questions when they come into your office. You are not nameless to me. Do not remain nameless to yourself – it is too sad a way to be. Know your place in the world and evaluate yourself fairly, not in terms of your naïve ideals of your own youth, nor in terms of what you erroneously imagine your teacher’s ideals are.\n\nhttps://web.archive.org/web/20200517015343/https://lettersofnote.com/2015/10/23/do-not-remain-nameless-to-yourself\n\n"
        },
  
      {
        "title"    : "Photography",
        "url"      : "/photography/",
        "content"  : "Ansel Adams Original Photograph - Black &amp; White Photography\n\nAra Güler - Anatolia (araguler.com.tr)\n\nAra Güler - World (araguler.com.tr)\n\nAra Güler - Celebrities (araguler.com.tr)\n\nAra Güler - İstanbul Color Photos (araguler.com.tr)\n\nTag: photography - Sketchplanations\n"
        },
  
      {
        "title"    : "The Interrogation of the Good",
        "url"      : "/brecht/",
        "content"  : "Step forward: we hear\nThat you are a good man.\nYou cannot be bought, but the lightning\nWhich strikes the house, also\nCannot be bought.\nYou hold to what you said.\nBut what did you say?\nYou are honest, you say your opinion.\nWhich opinion?\nYou are brave.\nAgainst whom?\nYou are wise.\nFor whom?\nYou do not consider your personal advantages.\nWhose advantages do you consider then?\nYou are a good friend.\nAre you also a good friend of the good people?\n\nHear us then: we know.\nYou are our enemy. This is why we shall\nNow put you in front of a wall. But in consideration of your merits and good qualities\nWe shall put you in front of a good wall and shoot you\nWith a good bullet from a good gun and bury you\nWith a good shovel in the good earth\n\nBertolt Brecht\n"
        },
  
      {
        "title"    : "Deep Roots",
        "url"      : "/deep-roots/",
        "content"  : "All that is gold does not glitter,\n\nNot all those who wander are lost;\n\nThe old that is strong does not wither,\n\nDeep roots are not reached by the frost.\n"
        },
  
      {
        "title"    : "Do not go gentle into that good night",
        "url"      : "/do-not-go-gentle/",
        "content"  : "Do not go gentle into that good night,  \nOld age should burn and rave at close of day;  \nRage, rage against the dying of the light.\n\nThough wise men at their end know dark is right,  \nBecause their words had forked no lightning they  \nDo not go gentle into that good night.\n\nGood men, the last wave by, crying how bright  \nTheir frail deeds might have danced in a green bay,  \nRage, rage against the dying of the light.\n\nWild men who caught and sang the sun in flight,  \nAnd learn, too late, they grieved it on its way,  \nDo not go gentle into that good night.\n\nGrave men, near death, who see with blinding sight  \nBlind eyes could blaze like meteors and be gay,  \nRage, rage against the dying of the light.\n\nAnd you, my father, there on the sad height,  \nCurse, bless, me now with your fierce tears, I pray.  \nDo not go gentle into that good night.  \nRage, rage against the dying of the light.\n"
        },
  
      {
        "title"    : "Find Time To Just Be",
        "url"      : "/find-time-to-just-be/",
        "content"  : "Beautiful is the moment,\n\nWhen the heart indifferent\n\nTo joy or sorrow, just trusts\n\nWhatever this life brings\n\nBut finds time to just be.\n"
        },
  
      {
        "title"    : "Fire and Ice",
        "url"      : "/fire-and-ice/",
        "content"  : "Some say the world will end in fire,\n\nSome say in ice.\n\nFrom what I’ve tasted of desire\n\nI hold with those who favor fire.\n\nBut if it had to perish twice,\n\nI think I know enough of hate\n\nTo say that for destruction ice\n\nIs also great\n\nAnd would suffice.\n"
        },
  
      {
        "title"    : "Haikus",
        "url"      : "/haikus/",
        "content"  : "古池や　蛙飛び込む　水の音\n\n\n\nFuru ike ya\n\nkawazu tobikomu\n\nmizu no oto\n\n\n\nOld pond…\n\na frog jumps in\n\nwater’s sound\n\n\n\nA world of dew,\n\nAnd within every dewdrop\n\nA world of struggle.\n\n\n\nO snail\n\nClimb Mount Fuji,\n\nBut slowly, slowly!\n"
        },
  
      {
        "title"    : "Harlem",
        "url"      : "/harlem/",
        "content"  : "What happens to a dream deferred?\n\nDoes it dry up\n\nlike a raisin in the sun?\n\nOr fester like a sore—\n\nAnd then run?\n\nDoes it stink like rotten meat?\n\nOr crust and sugar over—\n\nlike a syrupy sweet?\n\n\n\nMaybe it just sags\n\nlike a heavy load.\n\n\n\nOr does it explode?\n"
        },
  
      {
        "title"    : "If",
        "url"      : "/if/",
        "content"  : "If you can keep your head when all about you\n\nAre losing theirs and blaming it on you,\n\nIf you can trust yourself when all men doubt you,\n\nBut make allowance for their doubting too;\n\n\n\nIf you can wait and not be tired by waiting,\n\nOr being lied about, don’t deal in lies,\n\nOr being hated, don’t give way to hating,\n\nAnd yet don’t look too good, nor talk too wise\n\n\n\nIf you can dream—and not make dreams your master;\n\nIf you can think—and not make thoughts your aim;\n\nIf you can meet with Triumph and Disaster\n\nAnd treat those two impostors just the same;\n\n\n\nIf you can bear to hear the truth you’ve spoken\n\nTwisted by knaves to make a trap for fools,\n\nOr watch the things you gave your life to, broken,\n\nAnd stoop and build ’em up with worn-out tools:\n\n\n\nIf you can make one heap of all your winnings\n\nAnd risk it on one turn of pitch-and-toss,\n\nAnd lose, and start again at your beginnings\n\nAnd never breathe a word about your loss;\n\n\n\nIf you can force your heart and nerve and sinew\n\nTo serve your turn long after they are gone,\n\nAnd so hold on when there is nothing in you\n\nExcept the Will which says to them: ‘Hold on!’\n\n\n\nIf you can talk with crowds and keep your virtue,\n\nOr walk with Kings—nor lose the common touch,\n\nIf neither foes nor loving friends can hurt you,\n\nIf all men count with you, but none too much;\n\n\n\nIf you can fill the unforgiving minute\n\nWith sixty seconds’ worth of distance run,\n\nYours is the Earth and everything that’s in it,\n\nAnd—which is more—you’ll be a Man, my son!\n\nRudyard KIPLING\n"
        },
  
      {
        "title"    : "Lightly Child",
        "url"      : "/lightly-child/",
        "content"  : "It’s dark because you are trying too hard.\n\nLightly child, lightly. Learn to do everything lightly.\n\nYes, feel lightly even though you’re feeling deeply.\n\nJust lightly let things happen and lightly cope with them.\n\n\n  Aldous Huxley, Island\\\n\n\n"
        },
  
      {
        "title"    : "Mother To Son",
        "url"      : "/mother-to-son/",
        "content"  : "Well, son, I’ll tell you:\n    Life for me ain’t been no crystal stair.\n    It’s had tacks in it,\n    And splinters,\n    And boards torn up,\n    And places with no carpet on the floor—\n    Bare.\n    But all the time\n    I’se been a-climbin’ on,\n    And reachin’ landin’s,\n    And turnin’ corners,\n    And sometimes goin’ in the dark\n    Where there ain’t been no light.\n    So boy, don’t you turn back.\n    Don’t you set down on the steps\n    ’Cause you finds it’s kinder hard.\n    Don’t you fall now—\n    For I’se still goin’, honey,\n    I’se still climbin’,\n    And life for me ain’t been no crystal stair.\n"
        },
  
      {
        "title"    : "One Art",
        "url"      : "/one-art/",
        "content"  : "The art of losing isn’t hard to master;\n\nso many things seem filled with the intent\n\nto be lost that their loss is no disaster.\n\nLose something every day. Accept the fluster\n\nof lost door keys, the hour badly spent.\n\nThe art of losing isn’t hard to master.\n\nThen practice losing farther, losing faster:\n\nplaces, and names, and where it was you meant\n\nto tra\nvel. None of these will bring disaster.\n\nI lost my mother’s watch. And look! my last, or\n\nnext-to-last, of three loved houses went.\n\nThe art of losing isn’t hard to master.\n\nI lost two cities, lovely ones. And, vaster,\n\nsome realms I owned, two rivers, a continent.\n\nI miss them, but it wasn’t a disaster.\n\n—Even losing you (the joking voice, a gesture\n\nI love) I shan’t have lied. It’s evident\n\nthe art of losing’s not too hard to master\n\nthough it may look like (Write it!) like disaster.\n\n"
        },
  
      {
        "title"    : "One Ring",
        "url"      : "/one-ring/",
        "content"  : "Three Rings for the Elven-kings under the sky,\nSeven for the Dwarf-lords in their halls of stone,\nNine for Mortal Men, doomed to die,\nOne for the Dark Lord on his dark throne\nIn the Land of Mordor where the Shadows lie.\n\nOne Ring to rule them all, One Ring to find them,\nOne Ring to bring them all and in the darkness bind them.\nIn the Land of Mordor where the Shadows lie.\n"
        },
  
      {
        "title"    : "Ozymandias",
        "url"      : "/ozymandias/",
        "content"  : "I met a traveller from an antique land,\n\nWho said—”Two vast and trunkless legs of stone\n\nStand in the desert. . . . Near them, on the sand,\n\nHalf sunk a shattered visage lies, whose frown,\n\nAnd wrinkled lip, and sneer of cold command,\n\nTell that its sculptor well those passions read\n\nWhich yet survive, stamped on these lifeless things,\n\nThe hand that mocked them, and the heart that fed;\n\nAnd on the pedestal, these words appear:\n\nMy name is Ozymandias, King of Kings;\n\nLook on my Works, ye Mighty, and despair!\n\nNothing beside remains. Round the decay\n\nOf that colossal Wreck, boundless and bare\n\nThe lone and level sands stretch far away.”\n"
        },
  
      {
        "title"    : "Poetry",
        "url"      : "/poetry/",
        "content"  : "Paul Revere’s Ride\n"
        },
  
      {
        "title"    : "Saturday",
        "url"      : "/saturday/",
        "content"  : "“I cannot go to school today”\nSaid little Peggy Ann McKay.\n“I have the measles and the mumps,\nA gash, a rash and purple bumps.\nMy mouth is wet, my throat is dry.\nI’m going blind in my right eye.\nMy tonsils are as big as rocks,\nI’ve counted sixteen chicken pox.\nAnd there’s one more - that’s seventeen,\nAnd don’t you think my face looks green?\nMy leg is cut, my eyes are blue,\nIt might be the instamatic flu.\nI cough and sneeze and gasp and choke,\nI’m sure that my left leg is broke.\nMy hip hurts when I move my chin,\nMy belly button’s caving in.\nMy back is wrenched, my ankle’s sprained,\nMy ‘pendix pains each time it rains.\nMy toes are cold, my toes are numb,\nI have a sliver in my thumb.\nMy neck is stiff, my voice is weak,\nI hardly whisper when I speak.\nMy tongue is filling up my mouth,\nI think my hair is falling out.\nMy elbow’s bent, my spine ain’t straight,\nMy temperature is one-o-eight.\nMy brain is shrunk, I cannot hear,\nThere’s a hole inside my ear.\nI have a hangnail, and my heart is …\nWhat? What’s that? What’s that you say?\nYou say today is ………….. Saturday?\nG’bye, I’m going out to play!”\n― Shel Silverstei\n"
        },
  
      {
        "title"    : "There Will Come Soft Rains",
        "url"      : "/soft-rains/",
        "content"  : "Sara Teasdale\n\n1884 –1933\n\n(War Time)\n\nThere will come soft rains and the smell of the ground,\n\nAnd swallows circling with their shimmering sound;\n\nAnd frogs in the pools singing at night,\n\nAnd wild plum trees in tremulous white,\n\nRobins will wear their feathery fire\n\nWhistling their whims on a low fence-wire;\n\nAnd not one will know of the war, not one\n\nWill care at last when it is done.\n\nNot one would mind, neither bird nor tree\n\nIf mankind perished utterly;\n\nAnd Spring herself, when she woke at dawn,\n\nWould scarcely know that we were gone.\n"
        },
  
      {
        "title"    : "Hollow Power",
        "url"      : "/hollow-power/",
        "content"  : "“People whose power is real fulfill their obligations;\n\npeople whose power is hollow insist on their claims.”\n\n"
        },
  
      {
        "title"    : "Insight And Strength",
        "url"      : "/insight-and-strength/",
        "content"  : "Insight sees the insignificant.\n\nStrength knows how to yield.\n\n"
        },
  
      {
        "title"    : "Life Is Soft",
        "url"      : "/life-is-soft/",
        "content"  : "“Living people\n\nare soft and tender.\n\nCorpses are hard and stiff.\n\nThe ten thousand things,\n\nthe living grass, the trees,\n\nare soft, pliant.\n\nDead, they’re dry and brittle.”\n"
        },
  
      {
        "title"    : "Misery Under Happiness",
        "url"      : "/misery-under-happiness/",
        "content"  : "Alas! misery lies under happiness,\n\nand happiness sits on misery, alas!\n\nWho knows where it will end?\n\nNothing is certain.\n\n\n\nThe normal changes into the monstrous,\n\nthe fortunate into the unfortunate,\n\nand our bewilderment\n\ngoes on and on.\n"
        },
  
      {
        "title"    : "Monstrous Ingenuity",
        "url"      : "/monstrous-ingenuity/",
        "content"  : "The more ingenious the skillful are,\n\nthe more monstrous their inventions.\n\nThe louder the call for law and order,\n\nthe more the thieves and con men multiply.\n\n"
        },
  
      {
        "title"    : "Not Being",
        "url"      : "/not-being/",
        "content"  : "Hollowed out\n\nclay makes a pot,\n\nwhere the pot’s not,\n\nis where it’s useful\n\n"
        },
  
      {
        "title"    : "Not Far Away",
        "url"      : "/not-far-away/",
        "content"  : "“You don’t have to go out the door\n\nto know what goes on in the world.\n\nYou don’t have to look out the window\n\nto see the way of heaven.\n\nThe farther you go,\n\nthe less you know.”\n"
        },
  
      {
        "title"    : "Tao Te Ching",
        "url"      : "/tao-te-ching/",
        "content"  : "\n"
        },
  
      {
        "title"    : "The Great Leader",
        "url"      : "/the-great-leader/",
        "content"  : "The great ruler speaks little\n\nand his words are priceless\n\nHe works without self-interest\n\nand leaves no trace\n\nWhen all is finished, the people say,\n\n“It happened by itself”\n\n"
        },
  
      {
        "title"    : "Uncut Wood",
        "url"      : "/uncut-wood/",
        "content"  : "The uncut, unshaped, unpolished,\n\nnatural stuff\n\nis better than anything that can be made out of it.\n\n\n\nAnything done to it\n\ndeforms and lessens it.\n\n\n\nIts potential is infinite.\n\nIts uses are trivial.\n\n"
        },
  
      {
        "title"    : "Wei Wu Wei",
        "url"      : "/wei-wu-wei/",
        "content"  : "Do without doing.\n\nAct without action.\n\nSavor the flavorless.\n\nTreat the small as large,\n\nthe few as many.\n\n\n\nMeet injury\n\nwith the power of goodness.\n\n\n\nStudy the hard while it’s easy.\n\nDo big things while they’re small.\n\nThe hardest jobs in the world start out easy,\n\nthe great affairs of the world start small.\n\n\n\nNow, since taking things too lightly makes them worthless,\n\nand taking things too easy makes them hard,\n\nthe wise soul,\n\nby treating the easy as hard,\n\ndoesn’t find anything hard.\n\n\n\nSolve it in the beginning,\n\nwhile its small and easy,\n\nby never dealing with great things,\n\ngets great things done.\n"
        },
  
      {
        "title"    : "Wind And Rain",
        "url"      : "/wind-and-rain/",
        "content"  : "Nature doesn’t make long speeches\n\nA whirlwind doesn’t last all morning.\n\nA cloudburst doesn’t last all day.\n\nWho makes the wind and rain?\n\nHeaven and earth do.\n\nIf heaven and earth don’t go on and on,\n\nCertainly, people don’t need to.\n\n"
        },
  
      {
        "title"    : "The Red Wheelbarrow",
        "url"      : "/the-red-wheelbarrow/",
        "content"  : "so much depends\nupon\n\na red wheel\nbarrow\n\nglazed with rain\nwater\n\nbeside the white\nchickens\n"
        },
  
      {
        "title"    : "The Road Not Taken",
        "url"      : "/the-road-not-taken/",
        "content"  : "…\n\nI shall be telling this with a sigh\n\nSomewhere ages and ages hence:\n\nTwo roads diverged in a wood, and I—\n\nI took the one less traveled by,\n\nAnd that has made all the difference.\n"
        },
  
      {
        "title"    : "The Second Coming",
        "url"      : "/the-second-coming/",
        "content"  : "Turning and turning in the widening gyre   \nThe falcon cannot hear the falconer;\nThings fall apart; the centre cannot hold;\nMere anarchy is loosed upon the world,\nThe blood-dimmed tide is loosed, and everywhere   \nThe ceremony of innocence is drowned;\nThe best lack all conviction, while the worst   \nAre full of passionate intensity\n"
        },
  
      {
        "title"    : "This Be The Verse",
        "url"      : "/this-be-the-verse/",
        "content"  : "They fuck you up, your mum and dad.\n\nThey may not mean to, but they do.\n\nThey fill you with the faults they had\n\nAnd add some extra, just for you.\n\n\n\nBut they were fucked up in their turn\n\nBy fools in old-style hats and coats,\n\nWho half the time were soppy-stern\n\nAnd half at one another’s throats.\n\n\n\nMan hands on misery to man.\n\nIt deepens like a coastal shelf.\n\nGet out as early as you can,\n\nAnd don’t have any kids yourself.\n\nBY PHILIP LARKIN\n"
        },
  
      {
        "title"    : "To Be Or Not",
        "url"      : "/to-be-or-not/",
        "content"  : "To be, or not to be: that is the question:\nWhether ‘tis nobler in the mind to suffer\nThe slings and arrows of outrageous fortune,\nOr to take arms against a sea of troubles,\nAnd by opposing end them? To die: to sleep\n"
        },
  
      {
        "title"    : "We Wear The Mask",
        "url"      : "/we-wear-the-mask/",
        "content"  : "We wear the mask that grins and lies,\n\nIt hides our cheeks and shades our eyes,—\n\nThis debt we pay to human guile;\n\nWith torn and bleeding hearts we smile,\n\nAnd mouth with myriad subtleties.\n\nWhy should the world be over-wise,\n\nIn counting all our tears and sighs?\n\nNay, let them only see us, while\n\nWe wear the mask.\n\nWe smile, but, O great Christ, our cries\n\nTo thee from tortured souls arise.\n\nWe sing, but oh the clay is vile\n\nBeneath our feet, and long the mile;\n\nBut let the world dream otherwise,\n\nWe wear the mask!\n"
        },
  
      {
        "title"    : "Abbas",
        "url"      : "/abbas/",
        "content"  : "Haydi Abbas, vakit tamam;\n\nAkşam diyordun işte oldu akşam.\n\nKur bakalım çilingir soframızı;\n\nDinsin artık bu kalb ağrısı.\n\nŞu ağacın gölgesinde olsun;\n\nTam kenarında havuzun.\n\nAya haber sal çıksın bu gece;\n\nGörünsün şöyle gönlümce.\n\nBas kırbacı sihirli seccadeye,\n\nGöster hükmettiğini mesafeye\n\nVe zamana.\n\nKatıp tozu dumana,\n\nVar git,\n\nBöyle ferman etti Cahit,\n\nAl getir ilk sevgiliyi Beşiktaş’tan;\n\nYaşamak istiyorum gençliğimi yeni baştan.\n"
        },
  
      {
        "title"    : "Asik Veysel",
        "url"      : "/asik-veysel/",
        "content"  : "Güzelliğin on par’etmez\n\nŞu bendeki aşk olmasa\n\nEğlenecek yer bulaman\n\nGönlümdeki köşk olmasa\n\n\n\nUzun ince bir yoldayım\n\nGidiyorum gündüz gece\n\nBilmiyorum ne haldayım\n\nGidiyorum gündüz gece\n\n-\n\nDünyaya geldiğim anda\n\nYürüdüm aynı zamanda\n\nİki kapılı bir handa\n\nGidiyorum gündüz gece\n\n-\n\nDüşünülürse derince\n\nIrak görünür görünce\n\nYol bir dakka miktarınca\n\nGidiyorum gündüz gece\n\n-\n\nŞaşar Veysel işbu hâle\n\nGâh ağlaya gâhi güle\n\nYetişmek için menzile\n\nGidiyorum gündüz gece\n\n\n\nDost dost diye nicesine sarıldım\n\nBenim sâdık yârim kara topraktır\n\nBeyhude dolandım boşa yoruldum\n\nBenim sâdık yârim kara topraktır\n\n-\n\nNice güzellere bağlandım kaldım\n\nNe bir vefa gördüm ne fayda buldum\n\nHer türlü isteğim topraktan aldım\n\nBenim sâdık yârim kara topraktır\n\n-\n\nDileğin varsa iste Allah’tan\n\nAlmak için uzak gitme topraktan\n\nCömertlik toprağa verilmiş Hak’tan\n\nBenim sâdık yârim kara topraktır\n\n\n\nSazima\n\nBen gidersem sazım sen kal dünyada\n\nGizli sırlarımı aşikar etme\n\nLâl olsun dillerin söyleme yad a\n\nGarip bülbül gibi ah u zar etme\n\n-\n\nBahçede dut iken bilmezdin sazı\n\nBülbül konar mıydı dalına bazı\n\nHangi kuştan aldın sen bu avazı\n\nSöyle doğrusunu gel inkar etme\n\n-\n\nAy geçer yıl geçer uzarsa ara\n\nGiyin kara libas yaslan duvara\n\nYanından göğsünden açılır yara\n\nYâr gelmezse yaraların elletme\n\n\n\nBen giderim adım kalır\n\nDostlar beni hatırlasın.\n\nDüğün olur bayram gelir\n\nDostlar beni hatırlasın\n\nCan kafeste durmaz uçar\n\nDünya bir han, konan göçer\n\nAy dolanır  yıllar geçer\n\nDostlar beni hatırlasın\n\nCan bedenden ayrılacak\n\nTütmez baca  yanmaz ocak\n\nSelam olsun kucak kucak\n\nDostlar beni hatırlasın\n\nNe gelsemdi, ne giderdim\n\nGünden güne arttı derdim\n\nGarip kalır yerim yurdum\n\nDostlar beni hatırlasın\n\nAçar solar türlü çiçek\n\nKimler gülmüş kim gülecek\n\nMurat yalan ölüm gerçek\n\nDostlar beni hatırlasın\n\nGün ikindi akşam olur\n\nGör ki başa neler gelir\n\nVeysel gider adı kalır\n\nDostlar beni hatırlasın\n"
        },
  
      {
        "title"    : "Boz Ayran",
        "url"      : "/boz-ayran/",
        "content"  : "Yine gözümüze oldun tutiya\nEski bildiğimiz koca boz ayran\nGündüz gündüz hayaline yeldirdin\nGirdin düşümüze gece boz ayran\n\nYoksulluğun zincirini kırasın\nDarila da vara çoban durasın\nDüşmanlar başına gele göresin\nGör bir yol yoksulluk nice boz ayran\n\nSeni görenlerin yüreği yağlı\nSeni görmeyenin yüreği dağlı\nKaymağın torunu yağın öz oğlu\nAlçak mertebeli yüce boz ayran\n\n"
        },
  
      {
        "title"    : "Bulent Ecevit",
        "url"      : "/bulent-ecevit/",
        "content"  : "If\n\nçevrende herkes şaşırsa bunu da senden bilse sen aklı başında kalabilirsen eğer\n\nherkes senden kuşku duyarken hem kuşkuya yer bırakır hem kendine güvenebilirsen eğer\n\nbekleyebilirsen usanmadan yalanla karşılık vermezsen yalana\n\nkendini evliya sanmadan kin tutmayabilirsen kin tutana\n\ndüşlere kapılmadan düş kurabilir yolunu saptırmadan düşünebilirsen eğer\n\nne kazandım diye sevinir, ne yıkıldım diye yerinir ikisine de vermeyebilirsen değer\n\nsöylediğin gerçeği eğip büken düzenbaz kandırabilir diye safları dert edinmezsen\n\nömür verdiğin işler bozulsa da yılmaz koyulabilirsen işe yeniden\n\ndöküp ortaya varını yoğunu bir yazı-turada yitirsen bile yitirdiklerini dolamaksızın dile baştan tutabilirsen yolunu\n\nyüreğine sinirine dayan diyecek direncinden başka şeyin kalmasa da herkesin bırakıp gittiği noktada sen dayanabilirsen tek\n\nherkesle düşüp kalkar erdemli kalabilirsen unutmayabilirsen halkı krallarla gezerken\n\ndost da düşman da incitemezse seni, ne küçümser ne de büyültürsen çevreni\n\nher saatin her dakkasına emeğini katarsan hakçasına\n\nher şeyiyle dünya önüne serilir üstelik oğlum adam oldun demektir\n"
        },
  
      {
        "title"    : "Bulgur Pilavi",
        "url"      : "/bulgur-pilavi/",
        "content"  : "Soğan paşa olmuş gözlük gözünde\nElma memur olmuş aylık izinde\nReçel inzibat mı durmaz sözünde\nAskeri doyuran bulgur pilavı\n\nPirinç firar etmiş askeri üzer\nIspanak mahkumdur hapiste gezer\nNohut katip olmuş nöbeti yazar\nAskeri doyuran bulgur pilavı\n\nÇay ile zeytin kalk borusun çaldı\nPırasa tüfeği eline aldı\nFasulye askeri cepheye saldı\nAskeri doyuran bulgur pilavı\n\nHoşaf albay olmuş gitmiş alaya\nYoğurt hakim olmuş bakmaz davaya\nTaze üzüm küsmüş gitmez sılaya\nAskeri doyuran bulgur pilavı\n\nArmut eğitime özenemedi\nMuz çürüğe çıktı gezinemedi\nBiber kursa gitti kazanamadı\nAskeri doyuran bulgur pilavı\n\nPeynir çavuş olmuş sopa elinde\nPatlıcan kibirli eli belinde\nErik kayıp olmuş Arap çölünde\nAskeri doyuran bulgur pilavı\n"
        },
  
      {
        "title"    : "Can Yücel",
        "url"      : "/can-yucel/",
        "content"  : "Anayasası İnsanın\n\nUstamız Eluard’ın izinden\n\nKan yasası bu insanın:\n\nÜzümden şarap yapacaksın\n\nÇakmak taşından ateş\n\nVe öpücüklerden insan!\n\nCan yasası bu insanın:\n\nSavaşlara yoksulluklara\n\nVe binbir belaya karşın\n\nİlle de yaşayacaksın!\n\nUs yasası bu insanın:\n\nSuyu şavka döndürüp\n\nDüşü gerçeğe çevirip\n\nDüşmanı dost kılacaksın!\n\nAnayasası bu insanın\n\nEmekleyen çocuktan\n\nUzayda koşana dek\n\nYürürlükte her zaman\n\n\n\nBereket Versin\n\nYaşama bir gitardır\n\nTellerine vurdukça yediveren\n\nGüneş nasıl doğarsa\n\nVe yeşil ne kadar solaksa\n\nSaksofon ne kadar benziyorsa asma kabaklarına\n\nBir sebzevat kokusu sarıyor ortalığı\n\nSanki sırık tomatları biz kızardık diyorlar\n\nSantana çaldıkça\n\nKurbağalar ötüyor tosbağalar yürüyor\n\nBeni bir bostana gömün\n\nGübre olmak istiyorum\n\n"
        },
  
      {
        "title"    : "Edip Cansever",
        "url"      : "/edip-cansever/",
        "content"  : "Adam yaşama sevinci içinde \n\nMasaya anahtarlarını koydu \n\nBakır kaseye çiçekleri koydu \n\nSütünü yumurtasını koydu \n\nPencereden gelen ışığı koydu \n\nBisiklet sesini çıkrık sesini \n\nEkmeğin havanın yumuşaklığını koydu \n\nAdam masaya \n\nAklında olup bitenleri koydu \n\nNe yapmak istiyordu hayatta  \n\nİşte onu koydu \n\nKimi seviyordu kimi sevmiyordu \n\nAdam masaya onları da koydu \n\nÜç kere üç dokuz ederdi \n\nAdam koydu masaya dokuzu \n\nPencere yanındaydı gökyüzü yanında \n\nUzandı masaya sonsuzu koydu \n\nBir bira içmek istiyordu kaç gündür \n\nMasaya biranın dökülüşünü koydu \n\nUykusunu koydu uyanıklığını koydu \n\nTokluğunu açlığını koydu. \n\nMasa da masaymış ha \n\nBana mısın demedi bu kadar yüke \n\nBir iki sallandı durdu \n\nAdam ha babam koyuyordu.\n"
        },
  
      {
        "title"    : "Fuzuli",
        "url"      : "/fuzuli/",
        "content"  : "Selâm verdim rüşvet değildir deyü almadılar\n\n\n\nDost bî-pervâ felek bî-rahm devran bî-sükûn  \n\nDert çok hem-dert yok düşman kavî tâli’ zebûn\n\n\n\nSöylesem tesiri yok, sussam gönül razı değil\n\n\n\nNe yanar kimse bana âteş-i dilden özge\n\nNe açar kimse kapım bâd-ı sabâdan gayrı\n\n\n\nBeni candan usandırdı cefâdan yâr usanmaz mı  \n\nFelekler yandı âhımdan murâdım şem’i yanmaz mı\n\nKamu bîmârına cânân deva-yı derd eder ihsan  \n\nNiçün kılmaz bana derman beni bîmar sanmaz mı\n\nŞeb-i hicran yanar cânım döker kan çeşm-i giryânım  \n\nUyarır halkı efgânım kara bahtım uyanmaz mı\n\nGûl-i ruhsârına karşu gözümden kanlu akar su  \n\nHabîbim fasl-ı güldür bu akar sular bulanmaz mı\n\nGâmım pinhan tutardım ben dedîler yâre kıl rûşen  \n\nDesem ol bî-vefâ bilmem inanır mı inanmaz mı\n\nDeğildim ben sana mâil sen ettin aklımı zâil  \n\nBeni tan eyleyen gafîl seni görgeç utanmaz mı\n\nFuzûlî rind-i şeydâdır hemîşe halka rüsvâdır  \n\nSorun kim bu ne sevdâdır bu sevdâdan usanmaz mı\n\n\n\nÖyle ser-mestem ki idrâk etmezem dünyâ nedür  \n\nMen kimem sâkî olan kimdür mey û sahbâ nedür\n\nHikmet-i dünyâ vü mâfiha bilen arif degül  \n\nArif oldur bilmeye dünyâ vü mâfiha nedür\n\n\n\nSaçma ey göz eşkden gönlümdeki odlara su  \n\nKim bu denli dutuşan odlara kılmaz çare su\n\nÂb-gûndur günbed-i devvâr rengi bilmezem  \n\nYa muhît olmuş gözümden günbed-i devvâre su\n\n\n\nSaçma ey göz, gözyaşımdan gönlümdeki ateşe su  \n\nÇünki bu denli tutuşan ateşe olmaz çâre su\n\nŞu dönen gök kubbenin rengi su rengi midir;\n\nyoksa göz yaşlarım gökkubbeyi mi kaplamıştır, bilemem.\n\n\n\nger derse fuzuli ki “güzellerde vefa var”  \n\naldanma ki şair sözü elbet yalandır\n\n\n\nAz eyleme inayetini ehl-i dertten\n\nYani ki çoh belâlara kıl müptelâ beni\n"
        },
  
      {
        "title"    : "Isyan",
        "url"      : "/isyan/",
        "content"  : "Şükrü Erbaş\n\nCanı cehenneme rahat uyuyanın\n\nKapısını örtenin perdesini çekenin\n\nYüreği yalnız kendiyle dolu olanın\n\nAtaol Behramoğlu\n\nKıran vurdu memleketi\n\nZalimler hakan olmuştur\n\nYedikleri yoksul eti\n\nİçtikleri kan olmuştur.\n\nNerde varsa böyle zulüm\n\nÇaresi isyan olmuştur.\n"
        },
  
      {
        "title"    : "Melih Cevdet",
        "url"      : "/melih-cevdet/",
        "content"  : "KUNDURA BOYACISINA, KİRAZ AĞACINA, ÇİNGENE KIZINA DAİR\n\nSabahleyin evden çıkıyorum\n\nİnsanın işi var gücü var\n\nGidip bir parka oturuyorum\n\n-\n\nBir boyacı dikiliyor der demez\n\nBakar da bakar potinlerime\n\nNe bakıyorsun bre\n\nKeyif benim değil mi?\n\nBoyatmayacağım işte.\n\n-\n\nNesini boyatacaksın diyor içinden\n\nBir yandan da kaşını kaldırarak\n\n“Şu yerdeki senin mi ağabey?” diyor\n\nBakıyorum, ayağımın ucunda leş gibi pis bir tarak,\n\nAlıp tarağı gidiyor.\n\n-\n\nDerken işsizin, tembelin, haylazın biri\n\nKarşımdaki sıraya oturuyor\n\nSadece otursa iyi\n\nOturmuş bir de düşünüyor.\n\nNe düşünüyorsun be adam?\n"
        },
  
      {
        "title"    : "Nazim Hikmet",
        "url"      : "/nazim/",
        "content"  : "Bugün pazar.\n\nBugün beni ilk defa güneşe çıkardılar.\n\nVe ben ömrümde ilk defa gökyüzünün bu kadar benden uzak\n\nbu kadar mavi\n\nbu kadar geniş olduğuna şaşarak\n\nkımıldanmadan durdum.\n\n\n\nSonra saygıyla toprağa oturdum,\n\ndayadım sırtımı duvara.\n\nBu anda ne düşmek dalgalara,\n\nbu anda ne kavga, ne hürriyet, ne karım.\n\nToprak, güneş ve ben…\n\nBahtiyarım…\n\n\n\nYaşamak bir ağaç gibi tek ve hür\n\nve bir orman gibi kardeşçesine\n\n\n\nMemleket mi, daha uzak,\n\ngençliğim mi, yıldızlar mı?\n\nBayramoğlu, Bayramoğlu,\n\nölümden öte köy var mı?\n\n\n\nSen sabahlar ve şafaklar kadar güzelsin\n\nsen ülkemin yaz geceleri gibisin\n\n\n\nHoş geldin kadınım benim hoş geldin\n\nayağını bastın odama\n\nkırk yıllık beton, çayır çimen şimdi\n\ngüldün,\n\ngüller açıldı penceremin demirlerinde\n\nağladın,\n\navuçlarıma döküldü inciler\n\ngönlüm gibi zengin\n\nhürriyet gibi aydınlık oldu odam…\n\nHoş geldin kadınım benim hoş geldin.\n"
        },
  
      {
        "title"    : "Orhan Veli",
        "url"      : "/orhan-veli/",
        "content"  : "Denizlerimiz var, güneş içinde;\n\nAğaçlarımız var, yaprak içinde;\n\nSabah akşam gider gider geliriz,\n\nDenizlerimizle ağaçlarımız arasında,\n\nYokluk içinde.\n\n\n\nHer gün bu kadar güzel mi bu deniz?\n\nBöyle mi görünür gökyüzü her zaman?\n\nHer zaman güzel mi bu kadar,\n\nBu eşya, bu pencere?\n\nDeğil,\n\nVallahi değil;\n\nBir iş var bu işin içinde.\n\n\n\nBeni bu güzel havalar mahvetti,\n\nBöyle havada istifa ettim\n\nEvkaftaki memuriyetimden.\n\nTütüne böyle havada alıştım,\n\nBöyle havada aşık oldum;\n\nEve ekmekle tuz götürmeyi\n\nBöyle havalarda unuttum;\n\nŞiir yazma hastalığım\n\nHep böyle havalarda nüksetti;\n\nBeni bu guzel havalar mahvetti.\n\n\n\nBilmezdim şarkıların bu kadar güzel,\n\nKelimelerinse kifayetsiz olduğunu\n\nBu derde düşmeden önce.\n\n\n\nBenim de mi düşüncelerim olacaktı,\n\nBen de mi böyle uykusuz kalacaktım,\n\nSessiz, sedasız mı olacaktım böyle?\n\nÇok sevdiğim salatayı bile\n\nAramaz mı olacaktım?\n\nBen böyle mi olacaktım?\n\n\n\nBaharın İlk Sabahları\n\nTüyden hafif olurum böyle sabahlar\n\nKarsı damda bir güneş parçası,\n\nİçimde kuş cıvıltıları, şarkılar;\n\nBağıra çağıra düşerim yollara;\n\nDöner döner durur basım havalarda.\n\n\n\nSanırım ki günler hep güzel gidecek;\n\nHer sabah böyle bahar;\n\nNe is güç gelir aklıma, ne yoksulluğum.\n\nDerim ki: ‘Sıkıntılar durdursun!’\n\nSairliğimle yetinir,\n\nAvunurum.\n\n\n\nyaşamak\n\nBiliyorum, kolay değil yaşamak,\n\nGönül verip türkü söylemek yar üstüne;\n\nYıldız ışığında dolaşıp geceleri,\n\nGündüzleri gün ışığında ısınmak;\n\nŞöyle bir fırsat bulup yarım gün,\n\nYan gelebilmek Çamlıca tepesine…\n\n-Bin türlü mavi akar Boğaz’dan-\n\nHer şeyi unutabilmek maviler içinde.\n\nBiliyorum, kolay değil yaşamak;\n\nAma işte\n\nBir ölünün hala yatağı sıcak,\n\nBirinin saati işliyor kolunda.\n\nYaşamak kolay değil ya kardeşler,\n\nÖlmek de değil;\n\nKolay değil bu dünyadan ayrılmak.\n\n"
        },
  
      {
        "title"    : "Şiirler",
        "url"      : "/siir/",
        "content"  : "\n"
        },
  
      {
        "title"    : "Yunus Emre",
        "url"      : "/yunus-emre/",
        "content"  : "Adımız miskindir bizim\n\nDüşmanımız kindir bizim\n\nBiz kimseye kin tutmayız\n\nKamu âlem birdir bize\n\n\n\nAcep şu yerde varm’ola\n\nŞöyle garip bencileyin\n\nBağrı başlı gözü yaşlı\n\nŞöyle garip bencileyin\n\n-\n\nGezdim Rum ile Şam’ı\n\nYukarı illeri kamu\n\nÇok istedim bulamadım\n\nŞöyle garip bencileyin\n\n-\n\nBir garip ölmüş diyeler\n\nÜç günden sonra duyalar\n\nSoğuk su ile yuyalar\n\nŞöyle garip bencileyin\n\n-\n\nHey Emre’m Yunus biçare\n\nBulunmaz derdine çare\n\nVar imdi gez şardan şara\n\nŞöyle garip bencileyin\n\n\n\nYol odur ki doğru vara\n\nGöz odur ki Hakk’ı göre\n\nEr odur alçakta dura\n\nYüceden bakan göz değil\n\n\n\nGönül yüksekte gezer\n\nDaima yoldan azar\n\nDış yüzüne o sızar\n\nİçinde ne var ise\n\n-\n\nGönül Çalab’ın tahtı\n\nÇalap gönüle baktı\n\nİki cihan bedbahtı\n\nKim gönül yıkar ise\n\n-\n\nAz söz erin yüküdür\n\nÇok söz hayvan yüküdür\n\nBiline bu söz yeter\n\nSende gevher var ise\n\n-\n\nSen sana ne sanırsan\n\nAyruğa da anı san\n\nDört kitabın mânâsı\n\nBudur eğer var ise\n\n\n\nBu yol uzaktır\n\nMenzili çoktur\n\nGeçidi yoktur\n\nDerin sular var\n\n\n\nBenim adım dertli dolap\n\nSuyum akar yalap yalap\n\nBöyle emreylemiş Çalap\n\nDerdim vardır inilerim\n\n-\n\nYunus bunda gelen gülmez\n\nKişi muradına ermez\n\nBu fanide kimse kalmaz\n\nDerdim var inilerim\n\n\n\nGeldi geçti ömrüm benim şol yel esip geçmiş gibi\n\nHele bana şöyle geldi şol göz yumup açmış gibi\n\n-\n\nİşbu söze Hak tanıktır bu can gövdeye konuktur\n\nBir gün ola çıka gide kafesten kuş uçmuş gibi\n\n-\n\nMiskin âdem oğlanını benzetmişler ekinciye\n\nKimi biter kimi yiter yere tohum saçmış gibi\n\n-\n\nBu dünyada bir nesneye yanar içim göynür özüm\n\nYiğit iken ölenlere gök ekini biçmiş gibi\n\n\n\nİlim ilim bilmektir\n\nİlim kendin bilmektir\n\nSen kendini bilmezsin\n\nYa nice okumaktır\n\n-\n\nOkumaktan murat ne\n\nKişi Hak’kı bilmektir\n\nÇün okudun bilmezsin\n\nHa bir kuru ekmektir\n\n-\n\nOkudum bildim deme\n\nÇok taat kıldım deme\n\nEğer Hak bilmez isen\n\nAbes yere yelmektir\n\n-\n\nDört kitabın mânâsı\n\nBellidir bir elifte\n\nSen elifi bilmezsin\n\nBu nice okumaktır\n\n-\n\nYunus Emre der hoca\n\nGerekse bin var hacca\n\nHepisinden iyice\n\nBir gönüle girmektir\n\n\n\nYürü yürü yalan dünya\n\nYalan dünya değil misin\n\nYedi kez boşalıp yine\n\nDolan dünya değil misin\n\n\n\nÇıktım erik dalına\n\nAnda yedim üzümü\n\nBostan ıssı kakıyıp\n\nDer ne yersin kozumu\n\n-\n\nKerpiç koydum kazana\n\nPoyraz ile kaynattım\n\nNedir diye sorana\n\nBandım verdim özünü\n\n-\n\nBir sinek bir kartalı\n\nSalladı vurdu yere\n\nYalan değil gerçektir\n\nBen de gördüm tozunu\n\n-\n\nYunus bir söz söylemiş\n\nHiçbir söze benzemez\n\nMünafıklar elinden\n\nÖrter mâ’na yüzünü\n\n\n\nBen dervişim diyene\n\nBir ün edesim gelir\n\nTanıyuban şimdiden\n\nVarup yetesim gelir\n\n-\n\nSırat kıldan incedir\n\nKılıçtan keskincedir\n\nVarıp anın üstüne\n\nEvler yapasım gelir\n\n\n\nBen yürürüm yana yana\n\nAşk boyadı beni kana\n\nNe âkilem ne divane\n\nGel gör beni aşk neyledi\n\n-\n\nGâh eserim yeller gibi\n\nGâh tozarım yollar gibi\n\nGâh akarım seller gibi\n\nGel gör beni aşk neyledi\n\n\n\nBu dünyadan gider olduk\n\nKalanlara selam olsun\n\nBizim için hayır dua\n\nKılanlara selam olsun\n"
        },
  
      {
        "title"    : "Digital Art",
        "url"      : "/digital-art/",
        "content"  : "pixel art\n\n3d blender\n\nunity\n\nsketcbook &amp; surface pen\n"
        },
  
      {
        "title"    : "Dots",
        "url"      : "/dots/",
        "content"  : "If each dot is a century, here’s a million years\n\n\n\n\n\n\n\n"
        },
  
      {
        "title"    : "Experiments",
        "url"      : "/experiments/",
        "content"  : "\n"
        },
  
      {
        "title"    : "Grid",
        "url"      : "/grid/",
        "content"  : "\n    Current: \n    \n    \n    Total: \n    \n    \n    Columns: \n    \n    \n\n\n\n\n\n\n\n\n\n"
        },
  
      {
        "title"    : "Jobs",
        "url"      : "/jobs/",
        "content"  : "\n"
        },
  
      {
        "title"    : "Markdown Editor",
        "url"      : "/markdown-editor/",
        "content"  : "\n"
        },
  
      {
        "title"    : "Music Player",
        "url"      : "/music-player/",
        "content"  : "pip install yt-dlp\n\n"
        },
  
      {
        "title"    : "Photo Gallery",
        "url"      : "/photo-gallery/",
        "content"  : "\n"
        },
  
      {
        "title"    : "Primes",
        "url"      : "/primes/",
        "content"  : "\n\n\n\n\n\n"
        },
  
      {
        "title"    : "RSS reader",
        "url"      : "/rss-reader/",
        "content"  : "\n"
        },
  
      {
        "title"    : "Savings Planner",
        "url"      : "/savings-planner/",
        "content"  : "\n"
        },
  
      {
        "title"    : "Search Index",
        "url"      : "/search-index/",
        "content"  : "\n"
        },
  
      {
        "title"    : "Shops",
        "url"      : "/shops/",
        "content"  : "\n"
        },
  
      {
        "title"    : "Spreadsheet",
        "url"      : "/spreadsheet/",
        "content"  : "\n"
        },
  
      {
        "title"    : "Typing Practice",
        "url"      : "/typing-practice/",
        "content"  : "\naccuracy: 0\nwpm: 0\nmedian wpm: 0\n\n\n\n\n\n\n\n"
        },
  
      {
        "title"    : "Video Call",
        "url"      : "/video-call/",
        "content"  : "\n"
        },
  
      {
        "title"    : "Video Player",
        "url"      : "/video-player/",
        "content"  : "\n"
        },
  
      {
        "title"    : "Year Progress",
        "url"      : "/year-progress/",
        "content"  : "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n  \n\n\n\n\n\n\n\n\n\n\n\n\n    \n    \n    \n    \n\n"
        },
  
      {
        "title"    : "Datasets",
        "url"      : "/datasets/",
        "content"  : "https://www.worldometers.info\n\nhttps://ourworldindata.org\n"
        },
  
      {
        "title"    : "Games",
        "url"      : "/games/",
        "content"  : "Age of Empires II\n\nAge of Mythology\n\nStronghold Crusader\n\nEmpire Earth\n\nGTA Vice City\n\nSwamp Attack\n\nOri and the Blind Forest\n\nPilgrims\n\n2048 (play2048.co)\n\nyorg.io\n\nhttps://ncase.me\n\nhttps://explorabl.es\n\n"
        },
  
      {
        "title"    : "Quotes",
        "url"      : "/quotes/",
        "content"  : "There is always a philosophy for lack of courage. - Camus\n\n“What matters in life is not what happens to you but what you remember and how you remember it.”\n― Gabriel Garcia Marquez\n\n“If we listened to our intellect we’d never have a love affair. We’d never have a friendship. We’d never go in business because we’d be cynical: “It’s gonna go wrong.” Or “She’s going to hurt me.” Or, “I’ve had a couple of bad love affairs, so therefore . . .” Well, that’s nonsense. You’re going to miss life. You’ve got to jump off the cliff all the time and build your wings on the way down.”\n― Ray Bradbury\n\n“Whenever you feel like criticizing any one,” he told me, “just remember that all the people in this world haven’t had the advantages that you’ve had.”\n\n“Do not spoil what you have by desiring what you have not; remember that what you now have was once among the things you only hoped for.”\n― Epicurus\n\nSpring is the time of plans and projects\n\n“Keep your face always toward the sunshine - and shadows will fall behind you.”\n\n“Courage isn’t having the strength to go on - it is going on when you don’t have strength.”\n― Napoleon Bonaparte\n\n“Whoever is careless with the truth in small matters cannot be trusted with important matters”\n― Albert Einstein\n\n“When the snows fall and the white winds blow, the lone wolf dies but the pack survives.”\n\n“Man only likes to count his troubles; he doesn’t calculate his happiness.”\n\n“Whenever people agree with me I always feel I must be wrong.”\n\n“Being the richest man in the cemetery doesn’t matter to me. Going to bed at night saying we’ve done something wonderful… that’s what matters to me.”\n― Steve Jobs\n\n“If you treat an individual as he is, he will remain how he is. But if you treat him as if he were what he ought to be and could be, he will become what he ought to be and could be.”\n\n“It’s discouraging to think how many people are shocked by honesty and how few by deceit.”\n\n“Every generation imagines itself to be more intelligent than the one that went before it, and wiser than the one that comes after it.”\n― George Orwell\n\n“Reality is that which, when you stop believing in it, doesn’t go away.”\n\n“I will not let anyone walk through my mind with their dirty feet.”\n― Mahatma Gandhi\n\n“I cannot remember the books I’ve read any more than the meals I have eaten; even so, they have made me.”\n\n“The true soldier fights not because he hates what is in front of him, but because he loves what is behind him.”\n\n“A painter should begin every canvas with a wash of black, because all things in nature are dark except where exposed by the light.”\n― Leonardo da Vinci\n\n“It is good to love many things, for therein lies the true strength, and whosoever loves much performs much, and can accomplish much, and what is done in love is well done.”\n― Vincent Van Gogh\n\n“It is more fun to talk with someone who doesn’t use long, difficult words but rather short, easy words like “What about lunch?”\n― A. A. Milne, Winnie-the-Pooh\n\n“You can spend minutes, hours, days, weeks, or even months over-analyzing a situation; trying to put the pieces together, justifying what could’ve, would’ve happened… or you can just leave the pieces on the floor and move the fuck on.”\n― Tupac Shakur\n\n“Don’t judge each day by the harvest you reap but by the seeds that you plant.”\n\n“No book is really worth reading at the age of ten which is not equally – and often far more – worth reading at the age of fifty and beyond.”\n― C.S. Lewis\n\n“Resist much, obey little.”\n― Walt Whitman, Leaves of Grass\n\n“She generally gave herself very good advice, (though she very seldom followed it).”\n― Lewis Carroll, Alice’s Adventures in Wonderland / Through the Looking-Glass\n\n“When his life was ruined, his family killed, his farm destroyed, Job knelt down on the ground and yelled up to the heavens, “Why god? Why me?” and the thundering voice of God answered, There’s just something about you that pisses me off.”\n― Stephen King, Storm of the Century\n\n“Whoever fights monsters should see to it that in the process he does not become a monster. And if you gaze long enough into an abyss, the abyss will gaze back into you.”\n― Friedrich Nietzsche\n\n“In the end, we will remember not the words of our enemies, but the silence of our friends.”\n― Martin Luther King Jr.\n\n“The weak can never forgive. Forgiveness is the attribute of the strong.”\n― Mahatma Gandhi\n\n“The best index to a person’s character is how he treats people who can’t do him any good, and how he treats people who can’t fight back.”\n― Abigail Van Buren\n\n“It is so hard to leave—until you leave. And then it is the easiest goddamned thing in the world.”\n\n“Monsters are real, and ghosts are real too. They live inside us, and sometimes, they win.”\n― Stephen King\n\n“The mind is its own place, and in itself can make a heaven of hell, a hell of heaven..”\n― John Milton, Paradise Lost\n\n“Twenty years from now you will be more disappointed by the things that you didn’t do than by the ones you did do. So throw off the bowlines. Sail away from the safe harbor. Catch the trade winds in your sails. Explore. Dream. Discover.”\n\n“All grown-ups were once children… but only few of them remember it.”\n― Antoine de Saint-Exupéry, The Little Prince\n\n“The most beautiful people we have known are those who have known defeat, known suffering, known struggle, known loss, and have found their way out of the depths. These persons have an appreciation, a sensitivity, and an understanding of life that fills them with compassion, gentleness, and a deep loving concern. Beautiful people do not just happen.”\n― Elisabeth Kübler-Ross\n\n“It’s not the load that breaks you down, it’s the way you carry it.”\n\n“It’s enough for me to be sure that you and I exist at this moment.”\n\n“If you have two friends in your lifetime, you’re lucky. If you have one good friend, you’re more than lucky.”\n\n“You never know what worse luck your bad luck has saved you from.”\n― Cormac McCarthy, No Country for Old Men\n\n“Knowledge speaks, but wisdom listens”\n\n“But in the end one needs more courage to live than to kill himself.”\n\n“Do you think that I count the days? There is only one day left, always starting over: it is given to us at dawn and taken away from us at dusk.”\n― Jean-Paul Sartre\n\n“Everything we hear is an opinion, not a fact. Everything we see is a perspective, not the truth.”\n― Marcus Aurelius , Meditations\n\n“Everything that irritates us about others can lead us to an understanding of ourselves.”\n― Carl Gustav Jung\n\n“Well, I never heard it before, but it sounds uncommon nonsense.”\n― Lewis Carroll, Alice in Wonderland\n\n“What do we live for, if it is not to make life less difficult for each other?”\n― George Eliot\n\n“A man who procrastinates in his choosing will inevitably have his choice made for him by circumstance.”\n\n“Every one of us is, in the cosmic perspective, precious. If a human disagrees with you, let him live. In a hundred billion galaxies, you will not find another.”\n― Carl Sagan, Cosmos\n\n“You don’t have to choose between being scientific and being compassionate.”\n― Robert M. Sapolsky\n\nIf there is a God, He will have to beg my forgiveness.\n\nSocialism never took root in America because the poor see themselves not as an exploited proletariat but as temporarily embarrassed millionaires\n\nBeware of overconcern for money, or position, or glory. Someday you will meet a man who cares for none of these things. Then you will know how poor you are.\n\nUntil you make the unconscious conscious, it will direct your life and you will call it fate.\n\nIf I’m sincere today, does it matter if I regret it tomorrow?\n\nSome stranger somewhere still remembers you because you were kind to them when no one else was.\n\nAnything that just costs money is cheap\n\nThe one chasing two rabbits, catches neither\n\nThe lonely one offers his hand too quickly to whomever he encounters\n\nI know a cure for everything, salt water.. sweat, tears, sea\n\n.. blur the line between work and play\n\nConceal a flaw, and the world will imagine the worst\n\nFirst step to learn is to admit that you don’t know\n\nPursue a path you can walk with love and reverence\n\nHow does it help.. to make troubles heavier by bemoaning them?\n\nWe suffer more in imagination than in reality\n\nDon’t explain your philosophy, embody it\n\nWords are loaded pistols\n\nCircumstances reveal the man\n\n"
        },
  
      {
        "title"    : "Web Experiments",
        "url"      : "/web-experiments/",
        "content"  : "Mechanical Watch – Bartosz Ciechanowski\n\nArchives - Bartosz Ciechanowski\n\n100,000 Stars (chromeexperiments.com)\n\nhttps://ncase.me\n\nhttps://explorabl.es\n\nhttps://sketchplanations.com\n\nwizard zines\n\nhttps://turbopuffer.com/blog/turbopuffer\n\n"
        },
  
      {
        "title"    : "Adjektiva",
        "url"      : "/adjektiva/",
        "content"  : "otevreno/zavreno open/closed\n\nblizko/daleko  near/far\n\nzapnuto/vypnuto on/off\n\ndovnitr/ven in/out\n\nšťastný / smutný - happy sad\n\n"
        },
  
      {
        "title"    : "Cas",
        "url"      : "/cas/",
        "content"  : "vcera dnes zitra\n\nvesmirny cas - spacetime\n\nminut - minuty\n\nhodin - hodiny\n\nden - dny\n\ntyden- tydny (week)\n\nmesic - mesice\n\nrok - roky\n\ndyny v tydnu\n\nv pondeli\n\nv utery\n\nve streda\n\nve ctvrtek\n\nv patek\n\nv sobota\n\nv nedele\n"
        },
  
      {
        "title"    : "Cestina",
        "url"      : "/cestina/",
        "content"  : "zvire\n\nzaba - frog\n\nzabka zabce\n\npockejte - wait\n\ntady - here\n\nkartou, nebo hotove? - cash\n\nmam rad cestinu, ma roztomila slova, jako pocitac, pockey\n\n\n\nsnadny slozity\n\nvcera dnes zitra\n\npekny pretty\n\nahoj tady Selim\n\n\n\nbyt\n\nja jsem\n\nty jsi\n\non ona ono je\n\nmy jsme\n\nvy jste\n\nony onu jsou\n\n\n\nmit have\n\nmam\n\nmas\n\nma\n\nmame\n\nmate\n\nmaji\n\n\n\nzit  live\n\ndelat do\n\ndat give\n\nspat sleep\n\nnejredsi ze vseho spiim\n\ni like to sleep the best\n\njist eat\n\nvidet see\n\nslyset hear\n\ncist read\n\npsat write\n\n\n\nprevence prevent\n\nnejlepsi best\n\npripravte prepare\n\nted now\n\nodpadky dovnitr, odpadky ven garbage in garbage out\n\nDelejte to nejlepsi, tady a ted\n\njednoduche simple\n\npomalu slowly\n\nemoce emotions\n\nnesmsyl nonsense\n\nto je jedno  doesnt matter\n\nstejny the same\n\npodobny similar\n\nvíce méně more less\n"
        },
  
      {
        "title"    : "Cisla",
        "url"      : "/cisla/",
        "content"  : "\n  nula\n  jedna\n  dva\n  tri\n  ctyri\n  pet\n  sest\n  sedm\n  osm\n  devet\n  \n    deset\n  \n  jedenact\n  dvanact\n  trinact\n  ctrnact\n  patnact\n  sestnact\n  sedmnacht\n  osmnact\n  \n    devetanact 19\n  \n  dvacet 20\n  \n  tricet 30\n  ctricet 40\n  padesat 50\n  sedesat 60\n  sedmdesat 70\n  osmdesat 80\n  devadesat 90\n  sto 100\n  \n  \n  dve ste\n  \n  tri sta\n  ctyri sta\n  \n  pet set\n  sest set\n  sedm set\n  osm set\n  devet set\n  \n  tisic 1000\n  \n\n"
        },
  
      {
        "title"    : "Domov",
        "url"      : "/domov/",
        "content"  : "kuchyne\n\nkoupelna\n\nloznice\n\n\n"
        },
  
      {
        "title"    : "Fraze",
        "url"      : "/fraze/",
        "content"  : "tak jo, jdeme na to  ok, here we go\n\nPojďme lets go\n\nto je jedno  it doesn’t matter\n\nto je v pořádku  it’s alright\n\nnesymsyl  nonsense\n\ntady a ted here and now\n\njednoduchý je nejlepší simple is the best\n\nmnoho podobnych slov many similar words\n\nUmím anglicky.\n\nmne taky me too\n\nPojďme ven - lets go out\n\n\n\ndobre rano\n\ndobry den\n\ndobry vecer\n\nNashledanou / cau\n\ndekuju moc\n\nprominte\n\nomlouvam se\n\nprosim\n\nmluvis anglicky? trochu?\n\nprominte, mluvite anglicky? trochu?\n\n\n\nahoj\n\nano\n\nne\n\njsem Selim, rad te poznavam\n\njsem doma\n\nnejsem doma\n\njdu ven\n"
        },
  
      {
        "title"    : "Koníčky",
        "url"      : "/kon%C3%AD%C4%8Dky/",
        "content"  : "pocitac - computer\n\nmam rad pocitace - i like computers\n\npracuji - i work\n\n\n\nmam rad prirodu  - i like nature \npsshirodu\n\nhora - mountain \nhori - mountains\n\nmore (moje) sea\n\nreka - river\n\nreky (jeky) - rivers\n\nmam rad prirodu, hory, reky, more.\n\ntrekking, kempovani, horske kolo,\n\nplaze (plaje), plavani, slunce (soleil),\n\nkytaru (klasiku), klavir, akordeon, harmoniku,\n\nkavu, caj, pomerancovy dzus\n"
        },
  
      {
        "title"    : "Podobna Slova",
        "url"      : "/podobna-slova/",
        "content"  : "https://www.ezglot.com/common-words?l=eng&amp;l2=ces\n\nemoce\n\nnegativita\n\npripravit\n\npistol\n\npolka\n\nrobot\n\nhokus-pokus\n\nskola\n\nstudenti\n\ntelevizi\n\nblog\n\nblok\n\nsvetr\n\nklub\n\nfollower\n\nintro\n\ntrailer\n\ninternet\n\nchat\n\nemail\n\nkorporat\n\nmanajer\n\nbzynys\n\nbrainstorming\n\nmainstream\n\nsteak\n\nfilet\n\ncookie\n\nbrownie\n\ncupcake\n\ncheesecake\n\nproblemi\n\npolicie\n\nplan plany\n\nstyl\n\nmoderni\n\nhotel\n\nproces\n\nsystemy\n\nsport\n\nmodel\n\nfilmy\n\nserie\n\nmotor\n\nabsolutne\n\nmaterial\n\nmoment\n\nprogram\n\naplikace\n\nserver\n\ndetaily\n\nwhisky\n\npopulace\n\nobjekt\n\nhumor\n\npacient\n\nsymbol\n\npartner\n\nexistence\n\nbanda\n\nlegenda\n\nrelativne\n\npersonal\n\nmetr\n\nbastardi\n\nsenator\n\nprezident\n\nparlament\n\npolitik\n\nrealite\n\ncirkus\n\nfinancne\n\npizza\n\nminuta\n\ntenpo\n\nmodule\n\nmetro\n"
        },
  
      {
        "title"    : "Predlozky",
        "url"      : "/predlozky/",
        "content"  : "v - in\n\nven - out\n\nna - on\n\nna kacabce - on ducklings\n\npro - for\n\nnejlepsi - best\n\nnejhorsi - worst\n\njeste - more, another\n"
        },
  
      {
        "title"    : "Slovesa",
        "url"      : "/slovesa/",
        "content"  : "cist - read (like cislo)\n\nnapíšu - i’ll write\n\n\n\nnech mě  let me\n\nnech me napsat\n\n\n\njit - to go - gitmek, yitmek\n\nPojďme - lets go\n\ntak jo, podjme\n\n\n\nnevim - i dont know\n\nmozna - maybe\n"
        },
  
      {
        "title"    : "Deutsch",
        "url"      : "/deutsch/",
        "content"  : "\n"
        },
  
      {
        "title"    : "English",
        "url"      : "/english/",
        "content"  : "\n"
        },
  
      {
        "title"    : "Languages",
        "url"      : "/languages/",
        "content"  : "Tag: words - Sketchplanations\n\n"
        },
  
      {
        "title"    : "Latin",
        "url"      : "/latin/",
        "content"  : "Acta, non verba\n\nIn dubio, abstine\n\nQui rogat, non errat.\n“(One) who asks, doesn’t err.”\n\nIgnavum fortuna repugnat.\n\nQuod nocet, saepe docet “That which harms, often teaches.”\n\nInnumeras curas secum adferunt liberi. Children bring with them countless troubles.\n\nMemento mori\n\nIn nocte consilium, take counsel of one’s pillow.\n\nNon quia difficilia sunt non audemus, sed quia non audemus, difficilia sunt.\n\n“It is not because things are difficult that we do not dare, but because we do not dare, things are difficult.”\n\nNon semper erit aestas, It will not always be summer\n\nPraestat cautela quam medela. Prevention is the best cure\n\n“He who has much desires more.” (Seneca)\n\nSemper tyrannis\n\nSic infit: So it begins\n\nSic vita est: such is life\n\n“Ars longa, vita brevis, occasio praeceps, experimentum periculosum, iudicium difficile.”\n\n“Life is short, craft long, opportunity fleeting, experiment treacherous, judgment difficult.”\n\nSapere aude, dare to know\n\nSolvitur ambulando, its solved by walking\n\nA healthy mind is worth a kingdom\n\nSi vis pacem, para bellum.\n\nGive neither salt nor counsel till you are asked for it.\n\nVeritas odium paret  Truth creates hatred\n"
        },
  
      {
        "title"    : "Metaphors",
        "url"      : "/metaphors/",
        "content"  : "Tag: metaphor - Sketchplanations\n\nhttps://sketchplanations.com/primary-metaphor\n\n\n\n\n\n\n\n\n\n\n\n\n"
        },
  
      {
        "title"    : "Modern Greek Alphabet",
        "url"      : "/modern-greek-alphabet/",
        "content"  : "\n\nΑ α alpha\n\nΒ β\n\nΓ γ\n\nΔ δ\n\nΕ ε\n\nΖ ζ\n\nΗ η  eta\n\nΘ θ\n\nΙ ι\n\nΚ κ\n\nΛ λ\n\nΜ μ\n\nΝ ν\n\nΞ ξ Xi\n\nΟ ο\n\nΠ π\n\nΡ ρ\n\nΣ σ\n\nΤ τ\n\nΥ υ\n\nΦ φ\n\nΧ χ  Chi\n\nΨ ψ\n\nΩ ω\n\n"
        },
  
      {
        "title"    : "NATO phonetic alphabet",
        "url"      : "/nato-phonetic-alphabet/",
        "content"  : "Alpha\n\nBravo\n\nCharlie\n\nDelta\n\nEcho\n\nFoxtrot\n\nGolf\n\nHotel\n\nIndia\n\nJuliett\n\nKilo\n\nLima\n\nMike\n\nNovember\n\nOscar\n\nPapa\n\nQuebec\n\nRomeo\n\nSierra\n\nTango\n\nUniform\n\nVictor\n\nWhiskey\n\nX-ray\n\nYankee\n\nZulu\n"
        },
  
      {
        "title"    : "Turkce",
        "url"      : "/turkce/",
        "content"  : "\n"
        },
  
      {
        "title"    : "Lists",
        "url"      : "/lists/",
        "content"  : "\n"
        },
  
      {
        "title"    : "2D Graph of All Pages",
        "url"      : "/graph-2d/",
        "content"  : "\n\n\n\n\n\n\n\n\n\n\n"
        },
  
      {
        "title"    : "3D Graph of All Pages",
        "url"      : "/graph-3d/",
        "content"  : "\n\n\n\n\n\n\n\n\n"
        },
  
      {
        "title"    : "Ideas",
        "url"      : "/ideas/",
        "content"  : "Tag: quote - Sketchplanations\n\nFamiliar and Unfamiliar Quotations (norvig.com)\n\n\n\nHow much of our lives have we spent fighting shadows rather than simply enjoying the sun?\n\nNever put off till tomorrow what may be done day after tomorrow just as well\n\nKnow where to stop\n\nMischief, thou art afoot, \n Take thou what course thou wilt!\n\nThree may keep a secret, if two of them are dead\n\nPain is inevitable. Suffering is optional\n\nOn the day they were to kill him, \n Santiago Nasar arose at five-thirty in the morning \n to wait for the boat carrying the bishop\n\nHope itself is often better than what you are hoping for\n\nThe fool doth think he is wise, \n but the wise man knows himself to be a fool\n\nThe work is forgotten, kindness and love remains\n\nJudge less, accept more\n\n..With all memory and fate, \n Driven deep beneath the waves\n\nI fell in love the way you fall asleep: slowly, and then all at once\n\nLife isn't about finding yourself. Life is about creating yourself\n\nI don't go looking for trouble. Trouble usually finds me\n\nAction is the antidote to despair\n\nIf you're too open-minded; your brains will fall out\n\nIf you can't forgive others, how can you forgive yourself?\n\nSuccess comes from genuine interest\n\nThe fear of death follows from the fear of life. A man who lives fully is prepared to die at any time\n\nTake a walk\n\nEverything you can imagine is real\n\nMay it be a light to you in dark places, \n when all other lights go out\n\nAnd the first one now \n Will later be last \n For the times they are a-changin'\n\nDon't let the bastards grind you down\n\nDon't compromise yourself - you're all you have\n\nIt's not personal\n\nIf you know when to stop, you are in no danger\n\nHere's to the crazy ones. The misfits. The rebels. \n The troublemakers. The round pegs in the square holes. The ones who see things differently\n\nYou can choose a different path\n\nMistakes of others are easier to notice than our own\n\nFalse hopes are more dangerous than fears\n\nThere is only one day left, always starting over\n\nLive as if you listen to music, or you play music\n\nSub specie aeternitatis\n\nKeep your friends close, but your enemies closer\n\nCriticize less, appreciate more\n\nWalk slowly but walk\n\nLife will follow its path, neither reverse nor check its course, nor remind you of its swiftness, but glide on quietly\n\nReality is that which, when you stop believing in it, doesn't go away\n\nConsider beginnings\n\nMy name is Ozymandias, King of Kings \n Look on my Works, ye Mighty, and despair!\n\nLove is the absence of judgment\n\nPast glories are poor feeding\n\nAshes to ashes\n\nThe more I see, the less I know, the more I like to let it go\n\nYou can have too much liberty, equality, or truth, \n yet not too much justice\n\nOnly with the heart one can see, \n what is essential is invisible to the eye\n\nA man's got to know his limitations\n\nThe truth is rarely pure and never simple\n\nWhat would your best version do?\n\nThe future depends on what you do today\n\nThis is it\n\n...remember that what has once been done may be done again\n\nYou make your habits, then your habits make you\n\nInside every old person is a young person wondering what happened\n\nDesire is the mind-killer\n\nThe best way to predict the future is to create it\n\nThe trouble with an open mind is that people will try to put things in it\n\nWe should all start to live before we get too old. Fear is stupid. So are regrets\n\nViolence is the last refuge of the incompetent\n\nStupidity is not ignorance, it is using the wrong mental model\n\nAll is well that ends well\n\nLet not future troubles you, for you will have the same reason\n\nShort cuts make long delays\n\nHappiness is not the absence of problems, it's the ability to deal with them\n\nStand at the brink of the abyss of despair, \n and when you see that you cannot bear it anymore, \n draw back a little and have a cup of tea\n\nI'd rather be happy than right any day\n\nFor the loser now \n Will be later to win \n For the times they are a-changin'\n\nI look at the world \n And I notice it's turning \n While my guitar gently weeps\n\nHappy slaves are the bitterest enemy of freedom\n\nWomen are meant to be loved, not to be understood\n\nIf at first you don't succeed, try, try again. Then quit. No use being a damn fool about it\n\nExperiences make us happier than material things\n\nEverybody gotta learn sometime\n\nDon't think or judge, just listen\n\nIf you got it, you'd be happy\n\nThe hour's getting late\n\nIt's impossible. \n No, it's necessary\n\nMan only likes to count his troubles; he doesn't calculate his happiness\n\nAny fool can know. The point is to understand\n\nThe weak can never forgive\n\nHell is truth seen too late\n\nThe point is, who will stop me?\n\nExpect everything, there might be no tomorrow morning for you\n\nOf course motivation is not permanent. But then, neither is bathing\n\nMan may have discovered fire, but women discovered how to play with it\n\nHow would you live if you had two years left? \n You may even have less\n\nNature doesn't hurry, yet everything is accomplished\n\nOne can't fight with oneself, for this battle has only one loser\n\nHow vain it is to sit down to write when you have not stood up to live\n\nAsk not what you can do for your country. Ask what's for lunch\n\nNever go to bed mad. Stay up and fight\n\nSuccess is not final, failure is not fatal: it is the courage to continue that counts\n\nNeither blame yourself nor others\n\nSuccess is being free\n\nThese violent delights have violent ends\n\nLiving is easy with eyes closed \n Misunderstanding all you see\n\nComparison is the thief of joy\n\nWhat happens to a dream deferred?\n\nThe future is not written yet \n It depends on what you do today\n\nBegin at the beginning, the King said, very gravely, \n and go on till you come to the end: then stop\n\nUnder the bludgeonings of chance, \n My head is bloody, but unbowed\n\nDon't be so humble, you're not that great\n\nPeople see/hear/think what they want\n\nContext is worth 80 IQ points\n\nEnjoy yourself, it's later than you think\n\nRide \n ride for ruin \n And the world's ending\n\nAction is the antidote to despair\n\nMany years later, as he faced the firing squad, \n Colonel Aureliano Buendia was to remember that distant afternoon \n when his father took him to discover ice\n\nFinish each day and be done with it \n Tomorrow is a new day, leave your old nonsense behind\n\nSome day you will be old enough to start reading fairy tales again\n\nSometimes the road less traveled is less traveled for a reason\n\nMake your mistakes, take your chances, look silly, but keep on going. Don’t freeze up\n\nIt won't be as good as you hope, neither as bad as you fear\n\nA distracted mind is a weak mind\n\nHow many roads must a man walk down \n Before you call him a man?\n\nHappy families are all alike; \n every unhappy family is unhappy in its own way\n\nTreat people with kindness and respect, \n out of principle, \n even when they don't deserve it\n\nThough this be madness, yet there is method in't\n\nLife is a great balancing act\n\nWherever you go, there you are\n\nThis is not misfortune, to bear this worthily is good fortune\n\nWith every mistake, \n We must surely be learning \n Still my guitar gently weeps\n\nI pensieri stretti ed il viso sciolto\n\nLife is a celebration\n\nWhatever it is you're seeking won't come in the form you're expecting\n\nIt's only terrible to have nothing to wait for\n\nYou never know what worse luck your bad luck has saved you from\n\nIt's too easy to take good health for granted\n\nIs this the most important thing you should work on?\n\nThe power of the unaided mind is highly overrated\n\nHave little and gain much \n Have much and be confused\n\nLife is what happens when you're not looking at a screen\n\nThe two most common elements in the universe are hydrogen and stupidity\n\nSoft overcomes hard \n Weak overcomes strong\n\nDo what is right, not what is easy nor what is popular\n\nNothing beside remains. Round the decay\n\nSic vita est\n\nBeing busy is wasting time\n\nHappiness, only real when shared\n\nGive a man a fire and he's warm for a day, but set fire to him and he's warm for the rest of his life\n\nRight words sound wrong\n\nAnd if you listen very hard \n The tune will come to you at last\n\nAll we have to decide is what to do with the time that is given us\n\nIf we knew what it was we were doing, it would not be called research, would it?\n\nThere must be some kind of way outta here, \n Said the joker to the thief\n\nHow many seas must a white dove sail \n Before she sleeps on the sand?\n\nWalk no more in shadows\n\nHalf doing is an expensive way of not doing\n\nFinally, from so little sleeping and so much reading, \n his brain dried up and he went completely out of mind\n\nFear both the heat and the cold of your heart, \n and try to have patience, if you can\n\n..The dawn mist glowing \n The water flowing \n The endless river \n Forever and ever\n\nMany that live deserve death \n  And some that die deserve life. \n Can you give it to them? Then do not be too eager to deal out death in judgment\n\nAnd you better start swimmin' \n Or you'll sink like a stone \n For the times they are a-changin'\n\nNever wrestle with a pig, you get dirty; and besides, the pig likes it\n\nExercise makes the day\n\nI'm not in this world to live up to your expectations and you're not in this world to live up to mine\n\n..The world will little note, nor long remember what we say here\n\nBeware the Jabberwock, my son! \n The jaws that bite, the claws that catch!\n\nOf all horrible religions, the most horrible is the worship of the god within\n\nThey love their hair because they're not smart enough to love something more interesting\n\nFEAR stands for fuck everything and run\n\nDon't be unhappy before the crisis comes\n\nGood is better than perfect\n\nDo nothing against your will, \n nor against community, \n nor without due examination, \n nor with reluctancy\n\nWe are what we pretend to be, so we must be careful about what we pretend to be\n\nThe way to get started is to quit talking and begin doing\n\nInformation isn't free, you pay for it with attention and focus\n\nThe measure of intelligence is the ability to change\n\nThe line it is drawn \n The curse it is cast \n The slow one now \n Will later be fast \n As the present now \n Will later be past \n The order is rapidly fadin'\n\nHow would your best version handle this?\n\nOften times we call a man cold when he is only sad\n\nAny fool can make a rule \n And any fool will mind it\n\nGive support, not advice\n\nThere is nothing new under the sun\n\nLeave it better than you found\n\nMake it work but also make it beautiful\n\nHell is empty and all the devils are here\n\nYou don't have to get everything right. \n Define the few that must be right, \n and let go of the rest\n\nI wandered lonely as a cloud\n\nThe trouble with being in the rat race is that even if you win, you're still a rat\n\nCreate more than you consume\n\nThe pain is neither unbearable nor unending, \n as long as you keep in mind its limits, \n and don't magnify them in your imagination\n\nThe people who are crazy enough to think they can change the world, are the ones who do\n\nDo not go gentle into that good night. \n Rage, rage against the dying of the light\n\nDo what you feel in your heart to be right – for you'll be criticized anyway\n\nWhat are the most important problems in your field, \n and why are you not working on them?\n\nLife is what happens to you while you're busy making other plans\n\nI read a book one day and my whole life was changed\n\nThe mind can make a heaven of hell, a hell of heaven\n\nNever attempt to teach a pig to sing; it wastes your time and annoys the pig\n\nWe are the Dead. Short days ago \n We lived, felt dawn, saw sunset glow\n\nAll could go wrong yet only a few did\n\nTrust yourself. You know more than you think you do\n\nA person often meets his destiny on the road he took to avoid it\n\nBe kind, for everyone you meet is fighting a harder battle\n\nI don't know enough about this to have an opinion\n\nNature doesn't make long speeches\n\nI think I've discovered the secret of life -- you just hang around until you get used to it\n\nI am free of all prejudice. I hate everyone equally\n\nFocus on what is important\n\nEnvironment affects us more than we suspect\n\nCalifornia dreamin' \n On such a winter's day\n\nArs longa, vita brevis, occasio praeceps, experimentum periculosum, iudicium difficile\n\nWe overvalue people we don't know and undervalue those we do\n\nDo nothing in anger\n\nNever forget what you are, for surely the world will not\n\nCast aside fear and regret, do the deed at hand\n\nExercise is a wonder drug\n\nMy ambition is handicapped by laziness\n\nWas du erlebst, kann keine macht der Welt dir rauben\n\nOld pond... \n a frog jumps in \n water's sound\n\nLife is pain, highness. Anyone who says differently is selling something\n\nI'm not young enough to know everything\n\nVery little is needed to make a happy life; \n it is all within yourself, \n in your way of thinking\n\nTake the best and spread it around\n\nLet's take the backstreet though\n\nOne day I will find the right words, and they will be simple\n\nI just did some calculations and I've been able to determine that you're full of shit\n\nSo through the night rode Paul Revere; \n In the hour of darkness and peril and need\n\nExpect less, give more\n\nLet no man pull you so low as to hate him\n\nIt's no use going back to yesterday, because I was a different person then\n\nIn the beginning, the universe was created. \n This has made a lot of people very angry and been widely regarded as a bad move\n\n古池や 蛙飛び込む 水の音\n\nWars not make one great\n\nYou can always choose your way\n\nDo. Or do not. There is no try\n\nI don't need no arms around me \n And I don't need no drugs to calm me\n\nI always arrive late at the office, but I make up for it by leaving early\n\nI'm gonna shoot 'em on general principle\n\nRare as is true love, true friendship is rarer\n\nYou can't stay in your corner of the Forest waiting for others to come to you. You have to go to them sometimes\n\nSet aside your opinion, listen with a beginner's mind\n\nBut yesterday the word of Caesar might \n Have stood against the world; \n now lies he there\n\nNever miss a good chance to shut up\n\nSuit up!\n\nStay humble\n\nIf you are making mistakes...you're Doing Something\n\nI'm killing time while I wait for life to shower me with meaning and happiness\n\nThe great way is low and plain, \n but people like shortcuts over the mountains\n\nWhen you get it, will you still want it?\n\nHope excites more hope, ambition more ambition\n\nNeither blame yourself nor others\n\nWhat does your heart tell you?\n\nSo it begins\n\n..Far from the twisted reach of crazy sorrow\n\nThis life's hard, but it's harder if you're stupid\n\nThings flourish then perish\n\nThe world owes you nothing. It was here first\n\nI have seen these trees innumerable times \n yet have I appreciated them?\n\nTo live till you die, \n is to live long enough\n\nEven the darkest night will end, \n and the sun will rise\n\nO snail \n Climb Mount Fuji, \n But slowly, slowly!\n\nNeed little, want less\n\nTruth has many faces\n\nExpect less, appreciate more\n\nWhat are men to rocks and mountains?\n\nIt's only a drop of possible troubles \n all could go wrong yet only a few did\n\nYou can, you should, and if you're brave enough to start, you will\n\nDon't take yourself too seriously\n\nThe best-laid plans of mice and men often go awry\n\nWhether to suffer the slings and arrows of outrageous fortune, \n Or to take arms against a sea of troubles\n\nA fit, healthy body is the best fashion statement\n\nAll that is gold does not glitter, \n Not all those who wander are lost\n\nSomewhere, something incredible is waiting to be known\n\nApril is the cruellest month\n\nYou can't argue with all the fools in the world\n\nTruly wonderful, the mind of a child is\n\nOutta order? I'll show you outta order!\n\nEach of us can heal\n\nGrinding your wheels won't solve your problem\n\nDo your thing and don't care if they like it\n\nYou become what you give your attention to\n\nNothing in excess\n\nWhen we are tired, we are attacked by ideas we conquered long ago\n\nSuspend judgment\n\nDifficulties vanish when faced boldly\n\nWhat do you NOT want in life?\n\nPast and future are only in your head\n\nOh well, whatever, never mind\n\nFocus on what is in your control\n\nI think that I shall never see \n A poem lovely as a tree\n\nIt's not personal\n\nWe deal out judgment to others and seek understanding for ourselves\n\n..silhouettes of strange illuminated mannequins\n\nIs this the real life? Is this just fantasy?\n\nYellow tigers crouched in jungles in her dark eyes\n\nGive your mind some space\n\nAll that we see or seem is but a dream within a dream\n\nMay it be a light to you in dark places, when all other lights go out\n\nAre you still young and dumb enough to know everything?\n\nIf you are going through hell, keep going\n\nThe best way to not feel hopeless is to get up and do something\n\nLike all magnificent things, it's very simple\n\nThe world needs a wash and a week's rest\n\nLay your weary head to rest\n\nThe most certain sign of wisdom is cheerfulness\n\nI see my red door and I want it painted black\n\nWealth is being content, greed is a curse\n\nShe generally gave herself very good advice, (though she seldom followed it)\n\nEnabling great good is also enabling great evil\n\nMade weak by time and fate, but strong in will\n\nPoets have been mysteriously silent on the subject of cheese\n\nBlessed is he who expects nothing, for he shall never be disappointed\n\nEnjoy the sun\n\nWhat is better than freedom and love?\n\nC'est la vie\n\nDust to dust\n\nTake a sad song and make it better\n\nRespect was invented to cover the empty place where love should be\n\nThings fall apart; the centre cannot hold; \n The best lack all conviction, \n while the worst, \n Are full of passionate intensity\n\nAttitude is a little thing that makes a big difference\n\nThe price of freedom is dear yet worths it\n\nThink of yourself as dead \n You have lived your life. \n Now take what's left and live it properly\n\nSometimes the questions are complicated and the answers are simple\n\nDon't panic\n\nIn real life, I assure you, there is no such thing as algebra\n\nNo good deed goes unpunished\n\nWe wear the mask that grins and lies\n\nGo take a walk\n\nGo take a walk\n\nDo not lie to yourself\n\nA problem well stated is a problem half-solved\n\nThree Rings for the Elven-kings under the sky, \n Seven for the Dwarf-lords in their halls of stone\n\nNothing really matters, Anyone can see\n\nYou cannot find peace by avoiding life\n\nDon't be a try-hard\n\nThe first draft of anything is shit\n\nConfidence is ignorance. If you're feeling cocky, it's because there's something you don't know\n\nIf you can keep your head when all about you \n Are losing theirs and blaming it on you\n\nHands of a king are hands of a healer\n\nWe jump to conclusions and oversimplify\n\nFriends, Romans, countrymen, lend me your ears; \n I come to bury Caesar, not to praise him\n\nAlways go to other people's funerals, otherwise they won't come to yours\n\nWhat matters most is how well you walk through the fire\n\nThere will come soft rains\n\nBe here and now\n\nMy course is set for an uncharted sea\n\nYou must make a decision that you are going to move on\n\nLuminous beings are we, not this crude matter\n\nDo not meddle in the affairs of wizards, \n for they are subtle and quick to anger\n\nYou're the average of the five people you spend the most time with\n\nFear leads to anger \n Anger leads to hate \n Hate leads to suffering\n\nJudge less, accept more\n\nBeautiful is the moment, \n When the heart indifferent \n But finds time to just be\n\nA clever person solves a problem. A wise person avoids it\n\nPredicting the future is overrated\n\nWhatever you are, be a good one\n\nWell, I never heard it before, but it sounds uncommon nonsense\n\nThe planet is fine. The people are fucked\n\nNothing that is worth knowing can be taught\n\nNo one will bring back the years; no one will restore you to yourself\n\nFear is the path to the dark side\n\nLook below the surface\n\nSell your cleverness and buy bewilderment\n\nExpect less, appreciate more\n\nHappiness consists in getting enough sleep. Just that, nothing more\n\nAll along the watchtower, princes kept a view\n\nAnd you will know I am the Lord when I lay my vengeance upon you\n\nTime is heavy only when it is empty\n\nhollowed out, clay makes a pot \n where the pot is not, is where it's useful\n\nAll in all it's just another brick in the wall\n\nIl faut cultiver notre jardin\n\nIt has to be simple to be reliable\n\nThere are years that ask questions and years that answer\n\nTreat the small as large, the few as many, easy as hard\n\nAus so krummem Holze, \n als woraus der Mensch gemacht ist, \n kann nichts ganz Gerades gezimmert werden\n\nCome out better on the other side\n\nIf cats looked like frogs we'd realize what nasty, cruel little bastards they are. \n Style. That's what people remember\n\nHappiness is having a large, loving, caring, close-knit family in another city\n\nWheresoever you go, go with all your heart\n\nIn the white room with black curtains \n Near the station\n\nI have substituted myself for providence in rewarding the good; \n may the God of vengeance now yield me his place to punish the wicked\n\nHow miserable to acquire by toil and keep by worry\n\nIt's good to learn from your mistakes, \n even better to learn from the mistakes of others\n\n'Tis better to have loved and lost than never to have loved at all\n\nFor even the very wise cannot see all ends\n\nFear is the mind-killer\n\nResist much, obey little\n\nThe price of anything is the amount of life you exchange for it\n\nCourage is found in unlikely places\n\nTake responsibility of your own happiness, never put it in other people's hands\n\nBe kind to yourself. If you won't, who will?\n\n..Be a simple man, be something you love and understand\n\n\n\n"
        },
  
      {
        "title"    : "Keyboard Shortcuts",
        "url"      : "/keyboard-shortcuts/",
        "content"  : "This website works without a mouse too\n\n\n  Arrow keys &lt; &gt; go back/forward\n  Shift+S search\n  Shift+P go to a random page\n\n\nTab navigation\n\n  Tab and Shift+Tab move focus\n  Shift+Enter open in a new window\n  Ctrl+Enter open in a new tab\n\n\nMac terminal\n\n1\nClear line: cmd U \n\n\nVSCode\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\nMultiple cursors: option + shift + click\n\nGo top: cmd ⬆️\nGo bottom: cmd ⬇️\n\nZoom in: cmd shift 0 \nZoom out: cmd - \n\nSelect next occurrence: cmd D\nSelect all occurrences: cmd + shift + L\n\nFold all: Ctrl + K + 0\nUnfold all: Ctrl + K + J\n\nSwith to explorer: cmd 0 \n\n\nVS\n\nCTRL + M + O collapse all.\n\nCTRL + M + L expand all\n\nAccessible Software\n"
        },
  
      {
        "title"    : "Metadata",
        "url"      : "/meta/",
        "content"  : "\n"
        },
  
      {
        "title"    : "Stats",
        "url"      : "/stats/",
        "content"  : "\n\n\n     541 pages \n\n\n\n   810 links\n\n\n\n\n    234 images\n \n \n\n\n    11 hours to read\n\n\n\n\n\n"
        },
  
      {
        "title"    : "Authors",
        "url"      : "/authors/",
        "content"  : "Antoine de Saint-Exupéry\n\nCervantes\n\nDostoyevski\n\nGabriel Garcia Marquez\n\nGogol\n\nHomer\n\nKafka\n\nMontaigne\n\nOrwell\n\nShakespeare\n\nTolkien\n\nTolstoy\n"
        },
  
      {
        "title"    : "Blogs",
        "url"      : "/blogs/",
        "content"  : "Drew DeVault’s blog\n\nAstral Codex Ten - Scott Alexander - Substack\n\nBlog @ tonsky.me\n\n250bpm - Martin Sustrik - Substack\n\nSeth’s Top 100 - Seth’s Blog (seths.blog)\n\nnotes\n\nHome — Gordon Brander\n\nLearning Notes - Notes (keyvanakbary.github.io)\n\n"
        },
  
      {
        "title"    : "Books",
        "url"      : "/books/",
        "content"  : "Schopenhauer - Die Kunst Glucklich zu sein\n\nSystemantics\n\n"
        },
  
      {
        "title"    : "Comics",
        "url"      : "/comics/",
        "content"  : "Calvin and Hobbes\n\nGarfield\n\nDilbert\n\nStrange Planet\n\nSarah Andersen\n\nPoorly Drawn Lines\n\nxkcd\n\nhttps://www.gocomics.com\n\n\n\nHumor\n"
        },
  
      {
        "title"    : "Essais",
        "url"      : "/essais/",
        "content"  : "\n"
        },
  
      {
        "title"    : "News",
        "url"      : "/news/",
        "content"  : "Slower News\n\nHacker News sorted by time\n\nAll Time Best - Hacker News Top Links (hntoplinks.com)\n\n"
        },
  
      {
        "title"    : "Documentaries",
        "url"      : "/documentaries/",
        "content"  : "To-watch\n\ngriefwalker\n\nLiked\n\nhttps://www.youtube.com/@eugeniomonesma-documentales\n\nDaguerréotypes, Agnès Varda, 1975\n\nCosmos, Carl Sagan, 1980\n\nThe Gleaners &amp; I, Agnès Varda, 2000\n\nPlanet Earth, David Attenborough, 2006\n\nCosmos: A Spacetime Odyssey, 2014\n\nPlanet Earth II, David Attenborough, 2016\n\nOur Planet, David Attenborough, 2019\n\nApollo 11, 2019\n\nOur Great National Parks, Barack Obama, 2022\n\n"
        },
  
      {
        "title"    : "Movies 🎬",
        "url"      : "/movies/",
        "content"  : "Casablanca (1942)\n\nIt’s a Wonderful Life (1946)\n\nBicycle Thieves (1948)\n\nIkiru (1952)\n\nSeven Samurai (1954)\n\n12 Angry Men (1957)\n\nWild Strawberries (1957)\n\nVertigo (1958)\n\nLawrence of Arabia (1962)\n\n8½ (1963)\n\nPersona (1966)\n\nThe Godfather (1972)\n\nOne Flew Over the Cuckoo’s Nest (1975)\n\nStar Wars: Episode V - The Empire Strikes Back (1980)\n\nAmadeus (1984)\n\nOnce Upon a Time in America (1984)\n\nBack to the Future (1985)\n\nThe Sacrifice (1986)\n\nGrave of the Fireflies (1988)\n\nThe Remains of the Day (1993)\n\nGroundhog Day (1993)\n\nLéon: The Professional (1994)\n\nPulp Fiction (1994)\n\nThe Shawshank Redemption (1994)\n\nBraveheart (1995)\n\nLa vita e bella (1997)\n\nThe Matrix (1999)\n\nGladiator (2000)\n\nThe Fellowship of the Ring (2001)\n\nA Beautiful Mind (2001)\n\nSpirited Away (2001)\n\nLost in Translation (2003)\n\nHotel Rwanda (2004)\n\nBlood Diamond (2006)\n\nThe Lives of Others (2006)\n\nRatatouille (2007)\n\nThe Dark Knight (2008)\n\nShutter Island (2010)\n\nInception (2010)\n\nThe Intouchables (2011)\n\n12 Years a Slave (2013)\n\nThe Imitation Game (2014)\n\nInterstellar (2014)\n\nCoco (2017)\n\nCapernaum (2018)\n\nSoul (2020)\n\n"
        },
  
      {
        "title"    : "Business",
        "url"      : "/business/",
        "content"  : "Tag: business - Sketchplanations\n\n"
        },
  
      {
        "title"    : "Company Culture",
        "url"      : "/company-culture/",
        "content"  : "In toxic cultures, people get promoted for results even if they destroy relationships. Abuse is a price to pay for high performance.\n\n“In healthy cultures, no level of individual excellence justifies undermining people. You’re not a high performer if you don’t elevate others.”\n\nAdam Grant\n\n“If they are working in an environment where excellence is expected, then they will do excellent work without anything but self-motivation. I’m talking about an environment in which excellence is noticed and respected and is in the culture. If you have that, you don’t have to tell people to do excellent work. They understand it from their surroundings.”\n\nSteve Jobs\n\n\n\nIf you see someone doing something positive and valuable, tell them you appreciate it.\n\nIf you see someone doing something unethical, call them out.\n\n\n\n\n  focus\n  simplicity\n  writing\n\n\n"
        },
  
      {
        "title"    : "Hiring",
        "url"      : "/hiring/",
        "content"  : "Hire people you would work for, people you trust and respect\n\nYou won’t be disappointed by hiring someone who is less technical but is a great human who cares for others\n\nWasted Talent\n\n“Recruiting is hard. It’s just finding the needles in the haystack. We do it ourselves and we spend a lot of time at it. I’ve participated in the hiring of maybe 5,000-plus people in my life. So I take it very seriously. You can’t know enough in a one-hour interview. So, in the end, it’s ultimately based on your gut. How do I feel about this person? What are they like when they’re challenged? Why are they here? I ask everybody: ‘Why are you here?’ The answers themselves are not what you’re looking for. It’s the meta-data.” Steve Jobs\n\n"
        },
  
      {
        "title"    : "How To Start A Business",
        "url"      : "/how-to-start-a-business/",
        "content"  : "What to work on?\n\nTeamwork\n\nDesign\n\nGet Things Done\n\nMarketing\n\nSales\n\nHiring\n\nCreativity\n\nHow to pitch?\n\nIn writing or people say it didn’t happen when it is convenient\n\nDo business with people you like. It’s great.\n\nDon’t take money from people you wouldn’t hire.\n\nDon’t hire people you wouldn’t work for.\n\n\n\n\n\nhttps://patrickcollison.com/fast\n\nJetBrains: $270M revenue, 405K paying users, $0 raised - Hacker News\n\nTaking something from 0 to 1 creates value, and so does taking it from 1 to 10\n\nCompanies keep competitors busy by releasing all kinds of crap so people spend their energy to keep up instead of focusing on what is important. Don’t get distracted.\n"
        },
  
      {
        "title"    : "Marketing",
        "url"      : "/marketing/",
        "content"  : "Marketing matters. It’s how people perceive your work.\n\nTag: marketing - Sketchplanations\n\n\n\n\n\n"
        },
  
      {
        "title"    : "Sales",
        "url"      : "/sales/",
        "content"  : "Don’t sell. Help.\n\nMake a genuine connection, build trust\n\n\n\nBe aware of how your product compares to others on the market,\n\nand be able to make a case for yours.\n\n\n\nPeople don’t buy the thing, they buy the feeling they imagine.\n\nSell results. Show how your product’s characteristics relevant to customer’s motivations\n\nCommunication\n"
        },
  
      {
        "title"    : "Communication",
        "url"      : "/communication/",
        "content"  : "\n\nListen with a beginner’s mind. Set aside your opinion. Listen to understand, not to answer, not to offer solutions\n\nSuspend judgment, it’s not personal, not about you. Argue less, listen more\n\nListen to what isn’t being said, too\n\n\n\nWords are irreversible. Think twice before you speak. Be careful with promises\n\nAvoid negativity, judging, excuses, exaggeration, or gossip\n\nEmotions drive the conversation. Have a positive, constructive attitude. Don’t try to prove anything, people believe what they want to believe. Say something good or say nothing.\n\nDon’t say it if you don’t believe it\n\nPeople can’t read minds. Something being obvious to you doesn’t mean it’s obvious to them\n\nPoeple often share a problem or vulnerability for emotional support, not for advice or solutions\n\nFrequent sharing organizes thoughts\n\n\n\n\n\n\n\nHow to Communicate When Trust Is Low (Without Digging Yourself Into A Deeper Hole) \n\nLeadership\n\nTag: advice - Sketchplanations\n\nTag: kindness - Sketchplanations\n"
        },
  
      {
        "title"    : "How to pitch?",
        "url"      : "/how-to-pitch/",
        "content"  : "\n  enemy\n  why now\n  promised land\n  obstacles/ how to get over\n  Don’t tell. Show. Present evidence.\n\n\nCommunication\n"
        },
  
      {
        "title"    : "Negotiations",
        "url"      : "/negotiations/",
        "content"  : "\n  No prep, no win\n  Approach it as a discovery, not battle, the point is winning without fighting\n  Define your goals and limits\n  The listener is in charge\n  Empathy\n  Critical thinking\n  Build rapport, stay positive and constructive\n  Pay attention to body langauge, voice, and little nuances\n  Clear the barriers first, label fears, list the worst, get a no\n  Pause after you talk\n  Paraphrase to make people feel understood and appreciated\n  Its not about you, they should accept it as their own idea\n  Use a summary to trigger that’s right\n  Ask open-ended questions, how and what\n  A different authority, another stake-holder\n  Cognitive Biases, Anchors, Deadlines, Loss aversion\n  Anger does not help, the guy is not the problem\n  Arguments dilute each other\n  65 85 95 100% +20-10-5\n  Specific numbers\n  Confirm execution with how questions, summaries and labels\n\n\n\n"
        },
  
      {
        "title"    : "Public speaking",
        "url"      : "/public-speaking/",
        "content"  : "Focus on the audience\n\nSpeak clearly, with enthusiasm\n\nRepeat the bottom line\n\nThesis, top arguments, thesis again\n\nKeep it short and sweet\n\n\n\n\n"
        },
  
      {
        "title"    : "On writing",
        "url"      : "/write-better/",
        "content"  : "Writing is one of the most powerful inventions. It organizes thoughts, sparks ideas, reveals cracks, and connects us to the past and the future.\n\n\n  “How vain it is to sit down to write\nwhen you have not stood up to live.”\n\n\nHow to write better?\n\n\n  Ask questions and set out to answer them\n  Use simple words\n  Write as you speak\n  Less is more, “If I had more time, I would have written a shorter letter.”\n  Write a lot and iterate. “The best writing is rewriting.”\n\n\n\n\n\n  “Il faut cultiver notre jardin”\n\n\nSee also\n\nZen Of Python\n\nHemingway Editor (hemingwayapp.com)\n\nTag: writing - Sketchplanations\n"
        },
  
      {
        "title"    : "Cooking",
        "url"      : "/cooking/",
        "content"  : "Tag: food-and-drink - Sketchplanations\n\nhttps://www.youtube.com/@townsends\n\n"
        },
  
      {
        "title"    : "Critical thinking",
        "url"      : "/critical-thinking/",
        "content"  : "\n  Dare to see with your own eyes\n  Look below the surface\n  “Delete the adjectives and you will have the facts.”\n  All models are wrong, some are useful\n  Systematic feedback, criticism, and correction\n  Open-ended questions\n  Less certainty, more probability\n  How well do your mental models match reality?\n  Have you done your due diligence?\n  Systems thinking\n  Know your limitations\n\n\nTruth has many faces, suspend judgment\n\nSee also\n\nSystems Thinking\n\nKnow thyself\n\nInsight And Strength\n\nQuestions\n\nBertrand Russell’s Nobel Prize Acceptance Speech\n\nEpoché\n"
        },
  
      {
        "title"    : "On Decisions",
        "url"      : "/decisions/",
        "content"  : "A little forethought can prevent a lot of pain.\n\nDon’t decide under physical discomfort or heavy emotion, wait until your mind is clear.\n\nPrevention is the best cure. It is easier to stay out than get out. Do without doing - Wu Wei 無爲\n\nFollow your gut for reversible decisions, follow due diligence for the important ones\n\nDo nothing against your will, nor against community, nor without due examination, nor with reluctancy\n\nThink twice before you speak and be careful with promises.\n\nDo or do not. There is no try.\n\nNeither chase pleasure nor avoid necessary pain. Do what feels right in your heart of hearts, over what is easy. \n\nGo with all your heart. When in doubt, the answer is no.\n\nAs with all matters of the heart, you’ll know it when you find it.\n\nDon’t get stuck, good enough is good.\n\nFree Will\n\nFreedom\n\nCritical thinking\n\nDo Not Lie To Yourself\n\nChoice\n"
        },
  
      {
        "title"    : "Do One Thing At A Time And Do It Well",
        "url"      : "/do-one-thing-at-a-time-and-do-it-well/",
        "content"  : "\n\n\n  First, do not harm\n  Consider beginnings\n  Solve it at the root\n  Focus leads to Mastery\n  Focus on the important few\n  Focus on what is in your control, what you need to get right\n  Don’t worry about the rest, use your energy to do what you can, here and now\n  Know Where To Stop\n  Go enjoy the rest of the day\n\n\n\n\nO snail\n\nClimb Mount Fuji,\n\nBut slowly, slowly!\n\nLightly Child\n\n"
        },
  
      {
        "title"    : "Do The Right Thing",
        "url"      : "/do-the-right-thing/",
        "content"  : "Do what you feel to be right in your heart of hearts. It might be hard, unsafe, or unpopular.\n\n\n\nThere comes a time when one must take a position\n\nthat is neither safe, nor politic, nor popular,\n\nbut he must take it because conscience tells him it is right.\n\n― Martin Luther King Jr.\n\n“If you accomplish something good with hard work, the labor passes but the good endures, \nif you do something shameful, the pleasure passes but the shame endures” Rufus\n\nCourage\n\nDo Not Lie To Yourself\n"
        },
  
      {
        "title"    : "Do without doing - Wu Wei 無爲",
        "url"      : "/do-without-doing/",
        "content"  : "Actionless action\n\nConsider beginnings\n\nSolve a problem before it is a problem\n\nThe point is winning without fighting\n\nNature does not hurry, yet everything is accomplished\n\nTo run things, don’t fuss with them. Nobody who fusses is fit to run things.\n\n"
        },
  
      {
        "title"    : "Drawing",
        "url"      : "/drawing/",
        "content"  : "Tag: drawing - Sketchplanations\n\nwizard zines\n\nIt’s Nicky Case! (ncase.me)\n\nExplorable Explanations\n\nArchives - Bartosz Ciechanowski\n"
        },
  
      {
        "title"    : "Driving",
        "url"      : "/driving/",
        "content"  : "Be predictable\n\nLookout scan: move your head,  focus on 3 different points: close, mid, far\n\nAlways look where you are going\n\nNo phone, no distractions\n\nBuy\n\ntop quality tyres\n\ndash cam\n"
        },
  
      {
        "title"    : "Drowning Does Not Look Dramatic",
        "url"      : "/drowning-does-not-look-dramatic/",
        "content"  : "http://spotthedrowningchild.com\n\nThe Instinctive Drowning Response – so named by Francesco A. Pia, Ph.D., is what people do to avoid actual or perceived suffocation in the water. And it does not look like what most people expect. There is very little splashing, no waving, and no yelling or calls for help of any kind. To get an idea of just how quiet and undramatic from the surface drowning can be, consider this: It is the number two cause of accidental death in children, age 15 and under (just behind vehicle accidents) – of the approximately 750 children who will drown next year, about 375 of them will do so within 25 yards of a parent or other adult. In ten percent of those drownings, the adult will actually watch them do it, having no idea it is happening.\n\nDrowning does not look like drowning – Dr. Pia, in an article in the Coast Guard’s On Scene Magazine, described the instinctive drowning response like this:\n\n\n  Except in rare circumstances, drowning people are physiologically unable to call out for help. The respiratory system was designed for breathing. Speech is the secondary or overlaid function. Breathing must be fulfilled, before speech occurs.\n  Drowning people’s mouths alternately sink below and reappear above the surface of the water. The mouths of drowning people are not above the surface of the water long enough for them to exhale, inhale, and call out for help. When the drowning people’s mouths are above the surface, they exhale and inhale quickly as their mouths start to sink below the surface of the water.\n  Drowning people cannot wave for help. Nature instinctively forces them to extend their arms laterally and press down on the water’s surface. Pressing down on the surface of the water, permits drowning people to leverage their bodies so they can lift their mouths out of the water to breathe. Throughout the Instinctive Drowning Response, drowning people cannot voluntarily control their arm movements. Physiologically, drowning people who are struggling on the surface of the water cannot stop drowning and perform voluntary movements such as waving for help, moving toward a rescuer, or reaching out for a piece of rescue equipment.\n  From beginning to end of the Instinctive Drowning Response people’s bodies remain upright in the water, with no evidence of a supporting kick. Unless rescued by a trained lifeguard, these drowning people can only struggle on the surface of the water from 20 to 60 seconds before submersion occurs.\nThis doesn’t mean that a person that is yelling for help and thrashing isn’t in real trouble – they are experiencing aquatic distress. Not always present before the instinctive drowning response, aquatic distress doesn’t last long – but unlike true drowning, these victims can still assist in their own rescue. They can grab lifelines, throw rings, etc.\n\n\nLook for these other signs of drowning when persons are in the water:\n\n\n  Head low in the water, mouth at water level\n  Head tilted back with mouth open\n  Eyes glassy and empty, unable to focus\n  Eyes closed\n  Hair over forehead or eyes\n  Not using legs – Vertical\n  Hyperventilating or gasping\n  Trying to swim in a particular direction but not making headway\n  Trying to roll over on the back\n  Appear to be climbing an invisible ladder.\n  Sometimes the most common indication that someone is drowning is that they don’t look like they’re drowning. They may just look like they are treading water and looking up. One way to be sure? Ask them, “Are you alright?” If they can answer at all – they probably are. If they return a blank stare, you may have less than 30 seconds to get to them.\n\n\nParents – children playing in the water make noise. When they get quiet, you get to them and find out why.\n"
        },
  
      {
        "title"    : "Exercise",
        "url"      : "/exercise/",
        "content"  : "\n  Make your heartbeat slower and more efficient\n  Increase life expectancy\n  Improve the quality of life\n  Sleep better\n  Better posture\n  Quality time\n  Healthier eating patterns\n\n\n\n\nDo not sit for long, walk\n\nStretch frequently\n\nYou don’t have the energy for a workout because you don’t work out\n\nCalisthenics\n\nStrength training, often performed with minimal equipment, as bodyweight exercises.\n\nYou don’t need a gym for stretching, push-ups, pull-ups, crunches, lunges, squats, planks, yoga poses\n"
        },
  
      {
        "title"    : "Get Things Done",
        "url"      : "/get-things-done/",
        "content"  : "\n  Define what to work on and why\n  Start small\n  Plan\n  Prioritize important over urgent\n  Eliminate\n  Delegate\n  Get feedback early and often\n  Set up small checkpoints\n  Know your brains rhythm, if it peaks in the morning, then spare the most important work for the morning\n  Start the day by working on your top goals\n  If less than 2 mins, do it right away\n  Draw a deadline\n  Batch work\n  Use checklists\n  Flow happens when the task slightly exceeds your skill level\n  Prepared, focused, short meetings\n  Rely on habits and systems\n  Ignore sunk costs\n  Work short, focused intervals and rest\n  Say no more often\n  Write more so you don’t have to remember everything\n  Save some easy tasks for low-motivation periods\n  End the day with a cliffhanger so it’s easier to start again\n  Stay professional, responsible and reliable.\n  Everything looks like a failure in the middle, keep going\n\n\nOn Decisions\n\nHabits\n\nSystems Thinking\n\nDo One Thing At A Time And Do It Well\n\nTake a walk\n\nThe Morning\n\nWhat to work on?\n\nTag: productivity - Sketchplanations\n"
        },
  
      {
        "title"    : "Growing Plants",
        "url"      : "/growing-plants/",
        "content"  : "\n\n\n"
        },
  
      {
        "title"    : "Home Life",
        "url"      : "/home-life/",
        "content"  : "\n\n"
        },
  
      {
        "title"    : "The Almanack of Naval Ravikant",
        "url"      : "/how-to-gain-wealth/",
        "content"  : "Seek wealth, not money or status.\n\nWealth is having assets that earn while you sleep.\n\nMoney is how we transfer time and wealth.\n\nStatus is your place in the social hierarchy.\n\n\n\nIgnore people playing status games.\n\nYou’re not going to get rich renting out your time. You must own equity - a piece of a business - to gain your financial freedom. Play long-term games with long-term people.\n\nPlay iterated games\n\n\n\nLearn to sell. Learn to build. If you can do both, you will be unstoppable.\n\n\n\nArm yourself with specific knowledge, accountability, and leverage.\n\nSpecific knowledge is the result of pursuing your genuine curiosity\n\nEmbrace accountability, and take business risks under your name. Society will reward you with responsibility, equity, and leverage.\n\nFortunes need leverage. Business leverage comes from 3 things,\ncapital, people, and products with no marginal cost of replication (code and media).\n\n\n\nThere is no skill called “business.” Avoid business magazines and business classes.\n\nStudy microeconomics, game theory, psychology, persuasion, ethics, mathematics, and computers.\n\n\n\nApply specific knowledge, with leverage, and you will get what you deserve.\n\n\n\nIf you want to live in the future, live in the freest place around. Because the innovators and creators will show up there.\n\n\n\nAn army of robots is available - it’s packed in data centers for heat and space efficiency. Use it.\n\n\n\nWhen you’re finally wealthy, you’ll realize that it wasn’t what you were seeking in the first place. But that’s for another day.\n\nHow To Start A Business\n"
        },
  
      {
        "title"    : "How to Grow Old, by Bertrand Russell",
        "url"      : "/how-to-grow-old-russell/",
        "content"  : "In spite of the title, this article will really be on how not to grow old, which, at my time of life, is a much more important subject. My first advice would be to choose your ancestors carefully. Although both my parents died young, I have done well in this respect as regards my other ancestors. My maternal grandfather, it is true, was cut off in the flower of his youth at the age of sixty-seven, but my other three grandparents all lived to be over eighty. Of remoter ancestors I can only discover one who did not live to a great age, and he died of a disease which is now rare, namely, having his head cut off. A great-grandmother of mine, who was a friend of Gibbon, lived to the age of ninety-two, and to her last day remained a terror to all her descendants. My maternal grandmother, after having nine children who survived, one who died in infancy, and many miscarriages, as soon as she became a widow devoted herself to women’s higher education. She was one of the founders of Girton College, and worked hard at opening the medical profession to women. She used to tell of how she met in Italy an elderly gentleman who was looking very sad. She asked him why he was so melancholy and he said that he had just parted from his two grandchildren. ‘Good gracious,’ she exclaimed, ‘I have seventy-two grandchildren, and if I were sad each time I parted from one of them, I should have a miserable existence!’ ‘Madre snaturale!,’ he replied. But speaking as one of the seventy-two, I prefer her recipe. After the age of eighty she found she had some difficulty in getting to sleep, so she habitually spent the hours from midnight to 3 a.m. in reading popular science. I do not believe that she ever had time to notice that she was growing old. This, I think, is the proper recipe for remaining young. If you have wide and keen interests and activities in which you can still be effective, you will have no reason to think about the merely statistical fact of the number of years you have already lived, still less of the probable shortness of your future.\n\nAs regards health, I have nothing useful to say as I have little experience of illness. I eat and drink whatever I like, and sleep when I cannot keep awake. I never do anything whatever on the ground that it is good for health, though in actual fact the things I like doing are mostly wholesome.\n\nPsychologically there are two dangers to be guarded against in old age. One of these is undue absorption in the past. It does not do to live in memories, in regrets for the good old days, or in sadness about friends who are dead. One’s thoughts must be directed to the future, and to things about which there is something to be done. This is not always easy; one’s own past is a gradually increasing weight. It is easy to think to oneself that one’s emotions used to be more vivid than they are, and one’s mind more keen. If this is true it should be forgotten, and if it is forgotten it will probably not be true.\n\nThe other thing to be avoided is clinging to youth in the hope of sucking vigour from its vitality. When your children are grown up they want to live their own lives, and if you continue to be as interested in them as you were when they were young, you are likely to become a burden to them, unless they are unusually callous. I do not mean that one should be without interest in them, but one’s interest should be contemplative and, if possible, philanthropic, but not unduly emotional. Animals become indifferent to their young as soon as their young can look after themselves, but human beings, owing to the length of infancy, find this difficult.\n\nI think that a successful old age is easiest for those who have strong impersonal interests involving appropriate activities. It is in this sphere that long experience is really fruitful, and it is in this sphere that the wisdom born of experience can be exercised without being oppressive. It is no use telling grownup children not to make mistakes, both because they will not believe you, and because mistakes are an essential part of education. But if you are one of those who are incapable of impersonal interests, you may find that your life will be empty unless you concern yourself with your children and grandchildren. In that case you must realise that while you can still render them material services, such as making them an allowance or knitting them jumpers, you must not expect that they will enjoy your company.\n\nSome old people are oppressed by the fear of death. In the young there there is a justification for this feeling. Young men who have reason to fear that they will be killed in battle may justifiably feel bitter in the thought that they have been cheated of the best things that life has to offer. But in an old man who has known human joys and sorrows, and has achieved whatever work it was in him to do, the fear of death is somewhat abject and ignoble. The best way to overcome it -so at least it seems to me- is to make your interests gradually wider and more impersonal, until bit by bit the walls of the ego recede, and your life becomes increasingly merged in the universal life. An individual human existence should be like a river: small at first, narrowly contained within its banks, and rushing passionately past rocks and over waterfalls. Gradually the river grows wider, the banks recede, the waters flow more quietly, and in the end, without any visible break, they become merged in the sea, and painlessly lose their individual being. The man who, in old age, can see his life in this way, will not suffer from the fear of death, since the things he cares for will continue. And if, with the decay of vitality, weariness increases, the thought of rest will not be unwelcome. I should wish to die while still at work, knowing that others will carry on what I can no longer do and content in the thought that what was possible has been done.\n\n[from “Portraits From Memory And Other Essays”]\n"
        },
  
      {
        "title"    : "Humor",
        "url"      : "/humor/",
        "content"  : "“Tell people there’s an invisible man in the sky who created the universe, and the vast majority will believe you. Tell them the paint is wet, and they have to touch it to be sure.”\n― George Carlin\n\n"
        },
  
      {
        "title"    : "Investing",
        "url"      : "/investing/",
        "content"  : "Long-term approach for reliable growth\n\n"
        },
  
      {
        "title"    : "Leadership",
        "url"      : "/leadership/",
        "content"  : "Tag: leadership - Sketchplanations\n"
        },
  
      {
        "title"    : "Learning",
        "url"      : "/learning/",
        "content"  : "People learn when they’re surprised\n\nIt’s an art and only genuine interest and passion create beautiful art\n\nBeginner’s Mind -&gt; “In the beginner’s mind there are many possibilities, but in the expert’s there are few.”\n\n“Learning should take place when it is needed, when the learner is interested, not according to some arbitrary, fixed schedule”\n― Donald A. Norman, Emotional Design\n\nSpaced repetition\n\nDeliberate practice\n\nSeparate work from leisure\n\nNo arbitrary, fixed schedule\n\nThe Learning Pit - Sketchplanations\n\n![[learning-pit.png]]\n\nTag: education - Sketchplanations\n\nTag: framework - Sketchplanations\n\n“The whole educational and professional training system is a very elaborate filter, which just weeds out people who are too independent, and who think for themselves, and who don’t know how to be submissive, and so on – because they’re dysfunctional to the institutions.”\n― Noam Chomsky\n"
        },
  
      {
        "title"    : "Making Videos",
        "url"      : "/making-videos/",
        "content"  : "My Youtube earnings - Brick Experiment Channel (wordpress.com)\n"
        },
  
      {
        "title"    : "Mastery",
        "url"      : "/mastery/",
        "content"  : "Mastery comes from focus and deliberate practice, from saying no to many good ideas to pursue important ones\n\nA wide variety of experiences might lead to well-roundedness, but not to greatness, nor even goodness.\n\nFor example, musicians get better by tackling harder and harder pieces, not by switching instruments or genres, nor by learning more and varied easy pieces.\n\nYou don’t level up by switching games all the time, but by sticking with one long enough to gain advanced skills.\n\nLess ego, more mastery\n\n"
        },
  
      {
        "title"    : "Motocycles",
        "url"      : "/motocycles/",
        "content"  : "https://www.youtube.com/@FortNine\n\nhttps://www.youtube.com/@ItchyBoots\n"
        },
  
      {
        "title"    : "Mountaineering",
        "url"      : "/mountaineering/",
        "content"  : "Mountaineering: The Freedom of the Hills\n"
        },
  
      {
        "title"    : "Outdoors",
        "url"      : "/outdoors/",
        "content"  : "Tag: nature - Sketchplanations\n\n\n\nelements\n\nwind\nwindbreaker mid layer\n\nrain\nmud \nsnow\n\nwater-resistant shoes with good grip\n\ncold\nlayers \nsleeping bag\n\nhot\nbreathable clothes and shoes\n\nsun\nsunscreen \nsunglasses\ncap\n\nhunger\nhigh calory healthy food like nuts, dates, dried fruits\ncamp stove \nfuel\n\nthirst\nwater\n\nsickness\nfirst aid kid \nbasic medicine\n\naccidents\ncommunication \ninformation\n\nnavigation\n\nGPS\n\nTake photos or prints of maps as backup\n\nclothing\n\nbase - mid - top\n\nmerino - merino or down - rain jacket\n\ngoretex shoes\n\ncleaning\n\nmisc\n\n\n\n\n\ntools\n\nlight \nlaser \ncompass \nmap \ngps \nsatellite phone \nemergency beacon \nknot rope\n"
        },
  
      {
        "title"    : "Parenting",
        "url"      : "/parenting/",
        "content"  : "Lead by example, actions matter more than words\n\nBe patient\n\nLet a child be angry\n\nRemember that they are children and you are the adult\n\nHow Inuit Parents Raise Kids Without Yelling — And Teach Them To Control Anger : Goats and Soda : NPR\n\nThey love responsibility\n\nTake them seriously and treat them with respect. It makes them feel like grown-ups and they love it. If you have a rule, explain the reason.\n\nThis way, they learn responsibility, how to solve problems, how to manage things on their own.\n\nOld enough\n\nIn Japan, small children take the subway and run errands alone, no parent in sight. The reason why has more to do with social trust than self-reliance.\n\nIt’s a common sight on Japanese mass transit: children troop through train cars, singly or in small groups, looking for seats.\n\nParents in Japan regularly send their kids out into the world at a very young age. A popular television show called Hajimete no Otsukai, or My First Errand, features children as young as two or three being sent out to do a task for their family. As they tentatively make their way to the greengrocer or bakery, their progress is secretly filmed by a camera crew. The show has been running for more than 25 years.\n\nTag: parenting - Sketchplanations\n\n“When I was a boy of 14, my father was so ignorant I could hardly stand to have the old man around. But when I got to be 21, I was astonished at how much the old man had learned in seven years.”\n― Mark Twain\n"
        },
  
      {
        "title"    : "Problem Solving",
        "url"      : "/problem-solving/",
        "content"  : "\n  Prevention is the best\n  Don’t panic\n  Sanity check\n  A problem well stated is a problem half-solved\n  Start small\n  Go see the source\n  See examples\n  Define the problem, goals, inputs, assumptions, and constraints\n  Ask a lot of questions and refine the definitions\n  Test hypotheses with systematic Critical thinking\n  Take a walk\n\n\nTag: problem-solving - Sketchplanations\n\n\n"
        },
  
      {
        "title"    : "Skills",
        "url"      : "/skills/",
        "content"  : "Tag: lifehack - Sketchplanations\n\nTag: advice - Sketchplanations\n"
        },
  
      {
        "title"    : "Teaching",
        "url"      : "/teaching/",
        "content"  : "https://ncase.me\n\nhttps://explorabl.es\n\nhttps://sketchplanations.com\n\nhttps://betterexplained.com/\n\nhttps://www.youtube.com/@crashcourse\n\nwizard zines\n\nTag: education - Sketchplanations\n"
        },
  
      {
        "title"    : "Trading",
        "url"      : "/trading/",
        "content"  : "Short-term profit-maximizing approach to markets\n\n"
        },
  
      {
        "title"    : "Travelling",
        "url"      : "/travelling/",
        "content"  : "Tag: travel - Sketchplanations\n\nTravelling is romanticized and hyped because it’s good for business\n\n“Travelers change their sky but not their soul.”\n\n“Wherever you go, there you are”\n\nNot Far Away\n\n"
        },
  
      {
        "title"    : "Used Car Checklist",
        "url"      : "/used-car-checklist/",
        "content"  : "Driving\n\noutside\n\n  panels\n  tires\n  under the car\n  carton under for leaks\n  check the seams\n  handles\n  all 4 tires\n  trunk\n  the spare wheel\n\n\nhood\n\n  transmission fluid - not burnt\n  brake fluid\n  engine oil\n  belts\n  cables\n  corrosion\n  rust\n  antifreeze\n\n\ninside\n\n  obd2 codes\n  windows\n  air conditioning\n  heater\n  horn\n  lights\n  wipers\n  seatbelts\n  turn signals\n\n\ntest drive\n\n  brakes\n  engine temperature\n  engine noise in silence\n  listen to the car\n  rattle\n  let go of the wheel -  swerve?\n  take it to a trusted mechanic\n\n\nPsy\n\n  do not seem too interested\n  do not talk good or bad about the car\n\n\n"
        },
  
      {
        "title"    : "Architecture",
        "url"      : "/architecture/",
        "content"  : "\n"
        },
  
      {
        "title"    : "Being Poor",
        "url"      : "/being-poor/",
        "content"  : "from https://whatever.scalzi.com/2005/09/03/being-poor/ by John Scalzi\n\nBeing poor is knowing exactly how much everything costs.\n\nBeing poor is getting angry at your kids for asking for all the crap they see on TV.\n\nBeing poor is having to keep buying $800 cars because they’re what you can afford, and then having the cars break down on you, because there’s not an $800 car in America that’s worth a damn.\n\nBeing poor is hoping the toothache goes away.\n\nBeing poor is knowing your kid goes to friends’ houses but never has friends over to yours.\n\nBeing poor is going to the restroom before you get in the school lunch line so your friends will be ahead of you and won’t hear you say “I get free lunch” when you get to the cashier.\n\nBeing poor is living next to the freeway.\n\nBeing poor is coming back to the car with your children in the back seat, clutching that box of Raisin Bran you just bought and trying to think of a way to make the kids understand that the box has to last.\n\nBeing poor is wondering if your well-off sibling is lying when he says he doesn’t mind when you ask for help.\n\nBeing poor is off-brand toys.\n\nBeing poor is a heater in only one room of the house.\n\nBeing poor is knowing you can’t leave $5 on the coffee table when your friends are around.\n\nBeing poor is hoping your kids don’t have a growth spurt.\n\nBeing poor is not enough space for everyone who lives with you.\n\nBeing poor is feeling the glued soles tear off your supermarket shoes when you run around the playground.\n\nBeing poor is your kid’s school being the one with the 15-year-old textbooks and no air conditioning.\n\nBeing poor is thinking $8 an hour is a really good deal.\n\nBeing poor is relying on people who don’t give a damn about you.\n\nBeing poor is an overnight shift under florescent lights.\n\nBeing poor is finding the letter your mom wrote to your dad, begging him for the child support.\n\nBeing poor is a bathtub you have to empty into the toilet.\n\nBeing poor is stopping the car to take a lamp from a stranger’s trash.\n\nBeing poor is making lunch for your kid when a cockroach skitters over the bread, and you looking over to see if your kid saw.\n\nBeing poor is believing a GED actually makes a goddamned difference.\n\nBeing poor is people angry at you just for walking around in the mall.\n\nBeing poor is not taking the job because you can’t find someone you trust to watch your kids.\n\nBeing poor is the police busting into the apartment right next to yours.\n\nBeing poor is not talking to that girl because she’ll probably just laugh at your clothes.\n\nBeing poor is hoping you’ll be invited for dinner.\n\nBeing poor is a sidewalk with lots of brown glass on it.\n\nBeing poor is people thinking they know something about you by the way you talk.\n\nBeing poor is needing that 35-cent raise.\n\nBeing poor is your kid’s teacher assuming you don’t have any books in your home.\n\nBeing poor is six dollars short on the utility bill and no way to close the gap.\n\nBeing poor is crying when you drop the mac and cheese on the floor.\n\nBeing poor is knowing you work as hard as anyone, anywhere.\n\nBeing poor is people surprised to discover you’re not actually stupid.\n\nBeing poor is people surprised to discover you’re not actually lazy.\n\nBeing poor is a six-hour wait in an emergency room with a sick child asleep on your lap.\n\nBeing poor is never buying anything someone else hasn’t bought first.\n\nBeing poor is picking the 10 cent ramen instead of the 12 cent ramen because that’s two extra packages for every dollar.\n\nBeing poor is having to live with choices you didn’t know you made when you were 14 years old.\n\nBeing poor is getting tired of people wanting you to be grateful.\n\nBeing poor is knowing you’re being judged.\n\nBeing poor is a box of crayons and a $1 coloring book from a community center Santa.\n\nBeing poor is checking the coin return slot of every soda machine you go by.\n\nBeing poor is deciding that it’s all right to base a relationship on shelter.\n\nBeing poor is knowing you really shouldn’t spend that buck on a Lotto ticket.\n\nBeing poor is hoping the register lady will spot you the dime.\n\nBeing poor is feeling helpless when your child makes the same mistakes you did, and won’t listen to you beg them against doing so.\n\nBeing poor is a cough that doesn’t go away.\n\nBeing poor is making sure you don’t spill on the couch, just in case you have to give it back before the lease is up.\n\nBeing poor is a $200 paycheck advance from a company that takes $250 when the paycheck comes in.\n\nBeing poor is four years of night classes for an Associates of Art degree.\n\nBeing poor is a lumpy futon bed.\n\nBeing poor is knowing where the shelter is.\n\nBeing poor is people who have never been poor wondering why you choose to be so.\n\nBeing poor is knowing how hard it is to stop being poor.\n\nBeing poor is seeing how few options you have.\n\nBeing poor is running in place.\n\nBeing poor is people wondering why you didn’t leave.\n"
        },
  
      {
        "title"    : "Books",
        "url"      : "/books-social/",
        "content"  : "A Promised Land, Obama\n\nAtomic Habits\n\nFreakonomics\n\nMetaphors We Live By\n\nNever Split the Difference\n\nPredictably Irrational\n\nSapiens: A Brief History of Humankind\n\nSkill with People\n\nSteve Jobs by Walter Isaacson\n\nThe Diary of a Young Girl, Anne Frank\n\nThe Lessons of History, Will Durant\n\nThinking, Fast and Slow\n\nUnderstanding Power: The Indispensable Chomsky\n\nAsk HN: What books changed the way you think about almost everything? - Hacker News (ycombinator.com)\n"
        },
  
      {
        "title"    : "Chomsky",
        "url"      : "/chomsky/",
        "content"  : "“As long as the general population is passive, apathetic, diverted to consumerism or hatred of the vulnerable, then the powerful can do as they please, and those who survive will be left to contemplate the outcome.”\n\n“The general population doesn’t know what’s happening, and it doesn’t even know that it doesn’t know.”\n\n“The beauty of our system is that it isolates everybody. Each person is sitting alone in front of the tube, you know. It’s very hard to have ideas or thoughts under those circumstances. You can’t fight the world alone.”\n\n\n\n“If you quietly accept and go along no matter what your feelings are, ultimately you internalize what you’re saying, because it’s too hard to believe one thing and say another. I can see it very strikingly in my own background. Go to any elite university and you are usually speaking to very disciplined people, people who have been selected for obedience. And that makes sense. If you’ve resisted the temptation to tell the teacher, “You’re an asshole,” which maybe he or she is, and if you don’t say, “That’s idiotic,” when you get a stupid assignment, you will gradually pass through the required filters. You will end up at a good college and eventually with a good job.”\n\n“Do you train for passing tests or do you train for creative inquiry?”\n\n“If anybody thinks they should listen to me because I’m a professor at MIT, that’s nonsense. You should decide whether something makes sense by its content, not by the letters after the name of the person who says it.”\n\n“…the qualifications that I have to speak on world affairs are exactly the same ones Henry Kissinger has, and Walt Rostow has, or anybody in the Political Science Department, professional historians—none, none that you don’t have. The only difference is, I don’t pretend to have qualifications, nor do I pretend that qualifications are needed. I mean, if somebody were to ask me to give a talk on quantum physics, I’d refuse—because I don’t understand enough. But world affairs are trivial: there’s nothing in the social sciences or history or whatever that is beyond the intellectual capacities of an ordinary fifteen-year-old. You have to do a little work, you have to do some reading, you have to be able to think but there’s nothing deep—if there are any theories around that require some special kind of training to understand, then they’ve been kept a carefully guarded secret.”\n\n\n\n“The intellectual tradition is one of servility to power, and if I didn’t betray it I’d be ashamed of myself.”\n\n“If by ‘intellectual’ you mean people who are a special class who are in the business of imposing thoughts and forming ideas for people in power, and telling people what they should believe…they’re really more a kind of secular priesthood, whose task it is to uphold the doctrinal truths of the society. And the population should be anti-intellectual in that repect.”\n\n“My guess is that you would find that the intellectual elite is the most heavily indoctrinated sector [of society], for good reasons. It’s their role as a secular priesthood to really believe the nonsense that they put forth. Other people can repeat it, but it’s not that crucial that they really believe it. But for the intellectual elite themselves, it’s crucial that they believe it because, after all, they are the guardians of the faith. Except for a very rare person who’s an outright liar, it’s hard to be a convincing exponent of the faith unless you’ve internalized it and come to believe it.”\n\n“Unfortunately, you can’t vote the rascals out, because you never voted them in, in the first place”\n\n“Propaganda is to a democracy what the bludgeon is to a totalitarian state.”\n\n“It is quite possible–overwhelmingly probable, one might guess–that we will always learn more about human life and personality from novels than from scientific psychology”\n\n“How it is we have so much information, but know so little?”\n\n“It’s ridiculous to talk about freedom in a society dominated by huge corporations. What kind of freedom is there inside a corporation? They’re totalitarian institutions - you take orders from above and maybe give them to people below you. There’s about as much freedom as under Stalinism.”\n\n“Science is a bit like the joke about the drunk who is looking under a lamppost for a key that he has lost on the other side of the street, because that’s where the light is. It has no other choice.”\n\n“We still name our military helicopter gunships after victims of genocide. Nobody bats an eyelash about that: Blackhawk. Apache. And Comanche. If the Luftwaffe named its military helicopters Jew and Gypsy, I suppose people would notice.”\n\n“In the US, there is basically one party - the business party. It has two factions, called Democrats and Republicans, which are somewhat different but carry out variations on the same policies. By and large, I am opposed to these policies. As is most of the population.”\n\n“In my own professional work I have touched on a variety of different fields. I’ve done work in mathematical linguistics, for example, without any professional credentials in mathematics; in this subject I am completely self-taught, and not very well taught. But I’ve often been invited by universities to speak on mathematical linguistics at mathematics seminars and colloquia. No one has ever asked me whether I have the appropriate credentials to speak on these subjects; the mathematicians couldn’t care less. What they want to know is what I have to say. No one has ever objected to my right to speak, asking whether I have a doctor’s degree in mathematics, or whether I have taken advanced courses in the subject. That would never have entered their minds. They want to know whether I am right or wrong, whether the subject is interesting or not, whether better approaches are possible… the discussion dealt with the subject, not with my right to discuss it.\nBut on the other hand, in discussion or debate concerning social issues or American foreign policy…. The issue is constantly raised, often with considerable venom. I’ve repeatedly been challenged on grounds of credentials, or asked, what special training do I have that entitles you to speak on these matters. The assumption is that people like me, who are outsiders from a professional viewpoint, are not entitled to speak on such things.\nCompare mathematics and the political sciences… it’s quite striking. In mathematics, in physics, people are concerned with what you say, not with your certification. But in order to speak about social reality, you must have the proper credentials, particularly if you depart from the accepted framework of thinking. Generally speaking, it seems fair to say that the richer the intellectual substance of a field, the less there is a concern for credentials, and the greater is the concern for content.”\n\n“Globalization is the result of powerful governments, especially that of the United States, pushing trade deals and other accords down the throats of the world’s people to make it easier for corporations and the wealthy to dominate the economies of nations around the world without having obligations to the peoples of those nations.”\n\n“Students who acquire large debts putting themselves through school are unlikely to think about changing society. When you trap people in a system of debt . they can’t afford the time to think. Tuition fee increases are a “disciplinary technique,” and, by the time students graduate, they are not only loaded with debt, but have also internalized the “disciplinarian culture.” This makes them efficient components of the consumer economy.”\n\n“As long as individuals are compelled to rent themselves on the market to those who are willing to hire them, as long as their role in production is simply that of ancillary tools, then there are striking elements of coercion and oppression that make talk of democracy very limited, if meaningful.”\n\n“If you care about other people, that’s now a very dangerous idea. If you care about other people, you might try to organize to undermine power and authority. That’s not going to happen if you care only about yourself. Maybe you can become rich, but you don’t care whether other people’s kids can go to school, or can afford food to eat, or things like that. In the United States, that’s called “libertarian” for some wild reason. I mean, it’s actually highly authoritarian, but that doctrine is extremely important for power systems as a way of atomizing and undermining the public.”\n\n“Another thing they talk about a lot is water—and that’s a very crucial thing, which is not discussed very much in the United States but it’s probably the main reason why Israel is never going to give up the West Bank. See, this is a very arid region, so water is more important than oil, and there are very limited water resources in Israel. In fact, a lot of the wars in the Middle East have been about water—for instance, the wars involving Israel and Syria have usually been about the headwaters of the Jordan, which come from Syria, Jordan, and Lebanon. And as a matter of fact, one of the main reasons why Israel is holding on to the so-called “Security Zone” it seized in southern Lebanon [in the 1982 invasion] is that that area includes a mountain, Mount Hermon, which is a big part of the watershed that brings water to the region.”\n\n“I do not feel that we should set up people as “models”; rather actions, thoughts, principles.”\n\nIf you act on the assumption that things can change, well, maybe they will. Okay, the only rational choice, given those alternatives, is to forget the pessimism.”\n\n“authority, unless justified, is inherently illegitimate and that the burden of proof is on those in authority. If this burden can’t be met, the authority in question should be dismantled.”\n\n“Real education is about getting people involved in thinking for themselves- and that’s a tricky business to know how to do well, but clearly it requires that whatever it is you’re looking at has to somehow catch people’s interest and make them want to think, and make them want to pursue and explore.”\n\n“Neoliberal democracy. Instead of citizens, it produces consumers. Instead of communities, it produces shopping malls. The net result is an atomized society of disengaged individuals who feel demoralized and socially powerless.”\n\n“Propaganda is to a democracy what the bludgeon is to a totalitarian state.”\n\n“The beauty of our system is that it isolates everybody. Each person is sitting alone in front of the tube, you know. It’s very hard to have ideas or thoughts under those circumstances. You can’t fight the world alone.”\n"
        },
  
      {
        "title"    : "Economics",
        "url"      : "/economics/",
        "content"  : "Price vs Value\n\nA high price doesn’t mean high value or high quality, the same for low price\n\nYou can pay a lot and get little value, or get a lot of value for a reasonable price\n\nEmotions drive industries\n\nInsecurity and fear, cosmetics, arms\n\ndiscontent, envy, luxury\n\n..\n\nSpending for happiness\n\nYour Lifestyle Has Already Been Designed (raptitude.com)\n\nHappy people are bad for big business, it’s better for them if you have money but not enough time so you buy things to feel a bit better and try to make up for your lack of time\n\nImpulsive spending\nWait a bit before buying something because we don’t really want most things.\n\nFour day work week\n\nAn easy way to improve both the economy and happiness\n\nWhy don’t we do it so? Because everyone else is not doing it\n\nCommons\n\n\n\nSee also\n\nTag: economics - Sketchplanations\n"
        },
  
      {
        "title"    : "Wage Theft",
        "url"      : "/wage-theft/",
        "content"  : "Wage theft—employers’ failure to pay workers money they are legally entitled to—affects far more people than more well-known and feared forms of theft\n\nEmployers steal billions of dollars from their employees each year by working them off the clock, by failing to pay the minimum wage, or by cheating them of overtime pay they have a right to receive.\n\nhttps://www.epi.org/publication/wage-theft-bigger-problem-forms-theft-workers/\n"
        },
  
      {
        "title"    : "Wasted Talent",
        "url"      : "/wasted-talent/",
        "content"  : "Talent is everywhere, opportunity is not. We are all losing out because of this - Our World in Data\n\nBillions of children grow up in appalling poverty.\n\nHow many are the greatest minds of our time?\n\nHow many deserve better than they get?\n\nWhy are we wasting so much natural intelligence?\n\nTalent is everywhere but opportunity is not.\n\nBusiness\n"
        },
  
      {
        "title"    : "12000",
        "url"      : "/12000/",
        "content"  : "\n  \n    \n      Thousand years ago\n      Millennia\n      Period\n       \n    \n  \n  \n    \n      12 - 11\n      1\n      10 000 BC-9000 BC\n      Agriculture\n    \n    \n      11-10\n      2\n      9-8\n      The first temple Göbekli Tepe\n    \n    \n      10-9\n      3\n      8-7\n      First cities in Mesopotamia\n    \n    \n      9-8\n      4\n      7-6\n      Sumerians\n    \n    \n      8-7\n      5\n      6-5\n      Uruk, Gilgamesh\n    \n    \n      7-6\n      6\n      5-4\n      Copper\n    \n    \n      6-5\n      7\n      4-3\n      Wheel\n    \n    \n      5-4\n      8\n      3-2\n      Ancient Egypt, writing, bronze\n    \n    \n      4-3\n      9\n      2-1\n      Ancient Greece, Trojan War, Iron, Babylonia, Hittites\n    \n    \n      3-2\n      10\n      1000 BC - 0 AD\n      Rome found, Achas, Mayas\n    \n    \n      2-1\n      11\n      0 - 1000\n      The fall of Roman Empire, Middle Ages\n    \n    \n      1-0\n      12\n      1000s\n      Crusades, Plague, Renaissance, Industry, World Wars, Moon landings, Computers\n    \n    \n      0\n      13\n      2000s\n       \n    \n  \n\n\n\n"
        },
  
      {
        "title"    : "121st century",
        "url"      : "/121st-century/",
        "content"  : "The most well-known part of human history starts with the end of the last age, around 12 000 years ago.\n\nAgriculture, first settlements, cities, religions, kingdoms, wars, and explorations followed, bringing us to this very day.\n\nIf we take the end of last glacial period ~12 000 years ago as year 0, now is the year 12 024. And we are in the 121st century of Human Era, not 21st\n\nEach dot is a decade\n\n\n\n\n\n\n\nSee also\n\n\n"
        },
  
      {
        "title"    : "Farming Trap",
        "url"      : "/farming-trap/",
        "content"  : "Hunter-gatherers had their worries and fears but this is the price of freedom, freedom costs dearly but it’s worth it\n\nThey had diverse and healthy diets, ample leisure time, fit bodies, a deep connection with nature, and superb survival skills\n\nOverall it is like being a free wild animal compared to being a farm or zoo animal\n\nhttp://www.ditext.com/diamond/mistake.html\n\n\n\nThe Worst Mistake in the History of the Human Race\n\nBy Jared Diamond \nUniversity of California at Los Angeles Medical School\n\nTo science we owe dramatic changes in our smug self-image. Astronomy taught us that our earth isn’t the center of the universe but merely one of billions of heavenly bodies. From biology we learned that we weren’t specially created by God but evolved along with millions of other species. Now archaeology is demolishing another sacred belief: that human history over the past million years has been a long tale of progress. In particular, recent discoveries suggest that the adoption of agriculture, supposedly our most decisive step toward a better life, was in many ways a catastrophe from which we have never recovered. With agriculture came the gross social and sexual inequality, the disease and despotism, that curse our existence.\nAt first, the evidence against this revisionist interpretation will strike twentieth century Americans as irrefutable. We’re better off in almost every respect than people of the Middle Ages, who in turn had it easier than cavemen, who in turn were better off than apes. Just count our advantages. We enjoy the most abundant and varied foods, the best tools and material goods, some of the longest and healthiest lives, in history. Most of us are safe from starvation and predators. We get our energy from oil and machines, not from our sweat. What neo-Luddite among us would trade his life for that of a medieval peasant, a caveman, or an ape?\n\nFor most of our history we supported ourselves by hunting and gathering: we hunted wild animals and foraged for wild plants. It’s a life that philosophers have traditionally regarded as nasty, brutish, and short. Since no food is grown and little is stored, there is (in this view) no respite from the struggle that starts anew each day to find wild foods and avoid starving. Our escape from this misery was facilitated only 10,000 years ago, when in different parts of the world people began to domesticate plants and animals. The agricultural revolution spread until today it’s nearly universal and few tribes of hunter-gatherers survive.\n\nFrom the progressivist perspective on which I was brought up, to ask “Why did almost all our hunter-gatherer ancestors adopt agriculture?” is silly. Of course they adopted it because agriculture is an efficient way to get more food for less work. Planted crops yield far more tons per acre than roots and berries. Just imagine a band of savages, exhausted from searching for nuts or chasing wild animals, suddenly grazing for the first time at a fruit-laden orchard or a pasture full of sheep. How many milliseconds do you think it would take them to appreciate the advantages of agriculture?\n\nThe progressivist party line sometimes even goes so far as to credit agriculture with the remarkable flowering of art that has taken place over the past few thousand years. Since crops can be stored, and since it takes less time to pick food from a garden than to find it in the wild, agriculture gave us free time that hunter-gatherers never had. Thus it was agriculture that enabled us to build the Parthenon and compose the B-minor Mass.\n\nWhile the case for the progressivist view seems overwhelming, it’s hard to prove. How do you show that the lives of people 10,000 years ago got better when they abandoned hunting and gathering for farming? Until recently, archaeologists had to resort to indirect tests, whose results (surprisingly) failed to support the progressivist view. Here’s one example of an indirect test: Are twentieth century hunter-gatherers really worse off than farmers? Scattered throughout the world, several dozen groups of so-called primitive people, like the Kalahari bushmen, continue to support themselves that way. It turns out that these people have plenty of leisure time, sleep a good deal, and work less hard than their farming neighbors. For instance, the average time devoted each week to obtaining food is only 12 to 19 hours for one group of Bushmen, 14 hours or less for the Hadza nomads of Tanzania. One Bushman, when asked why he hadn’t emulated neighboring tribes by adopting agriculture, replied, “Why should we, when there are so many mongongo nuts in the world?”\n\nWhile farmers concentrate on high-carbohydrate crops like rice and potatoes, the mix of wild plants and animals in the diets of surviving hunter-gatherers provides more protein and a bettter balance of other nutrients. In one study, the Bushmen’s average daily food intake (during a month when food was plentiful) was 2,140 calories and 93 grams of protein, considerably greater than the recommended daily allowance for people of their size. It’s almost inconceivable that Bushmen, who eat 75 or so wild plants, could die of starvation the way hundreds of thousands of Irish farmers and their families did during the potato famine of the 1840s.\n\nSo the lives of at least the surviving hunter-gatherers aren’t nasty and brutish, even though farmes have pushed them into some of the world’s worst real estate. But modern hunter-gatherer societies that have rubbed shoulders with farming societies for thousands of years don’t tell us about conditions before the agricultural revolution. The progressivist view is really making a claim about the distant past: that the lives of primitive people improved when they switched from gathering to farming. Archaeologists can date that switch by distinguishing remains of wild plants and animals from those of domesticated ones in prehistoric garbage dumps.\n\nHow can one deduce the health of the prehistoric garbage makers, and thereby directly test the progressivist view? That question has become answerable only in recent years, in part through the newly emerging techniques of paleopathology, the study of signs of disease in the remains of ancient peoples.\n\nIn some lucky situations, the paleopathologist has almost as much material to study as a pathologist today. For example, archaeologists in the Chilean deserts found well preserved mummies whose medical conditions at time of death could be determined by autopsy (Discover, October). And feces of long-dead Indians who lived in dry caves in Nevada remain sufficiently well preserved to be examined for hookworm and other parasites.\n\nUsually the only human remains available for study are skeletons, but they permit a surprising number of deductions. To begin with, a skeleton reveals its owner’s sex, weight, and approximate age. In the few cases where there are many skeletons, one can construct mortality tables like the ones life insurance companies use to calculate expected life span and risk of death at any given age. Paleopathologists can also calculate growth rates by measuring bones of people of different ages, examine teeth for enamel defects (signs of childhood malnutrition), and recognize scars left on bones by anemia, tuberculosis, leprosy, and other diseases.\n\nOne straight forward example of what paleopathologists have learned from skeletons concerns historical changes in height. Skeletons from Greece and Turkey show that the average height of hunger-gatherers toward the end of the ice ages was a generous 5’ 9’’ for men, 5’ 5’’ for women. With the adoption of agriculture, height crashed, and by 3000 B. C. had reached a low of only 5’ 3’’ for men, 5’ for women. By classical times heights were very slowly on the rise again, but modern Greeks and Turks have still not regained the average height of their distant ancestors.\n\nAnother example of paleopathology at work is the study of Indian skeletons from burial mounds in the Illinois and Ohio river valleys. At Dickson Mounds, located near the confluence of the Spoon and Illinois rivers, archaeologists have excavated some 800 skeletons that paint a picture of the health changes that occurred when a hunter-gatherer culture gave way to intensive maize farming around A. D. 1150. Studies by George Armelagos and his colleagues then at the University of Massachusetts show these early farmers paid a price for their new-found livelihood. Compared to the hunter-gatherers who preceded them, the farmers had a nearly 50 per cent increase in enamel defects indicative of malnutrition, a fourfold increase in iron-deficiency anemia (evidenced by a bone condition called porotic hyperostosis), a theefold rise in bone lesions reflecting infectious disease in general, and an increase in degenerative conditions of the spine, probably reflecting a lot of hard physical labor. “Life expectancy at birth in the pre-agricultural community was bout twenty-six years,” says Armelagos, “but in the post-agricultural community it was nineteen years. So these episodes of nutritional stress and infectious disease were seriously affecting their ability to survive.”\n\nThe evidence suggests that the Indians at Dickson Mounds, like many other primitive peoples, took up farming not by choice but from necessity in order to feed their constantly growing numbers. “I don’t think most hunger-gatherers farmed until they had to, and when they switched to farming they traded quality for quantity,” says Mark Cohen of the State University of New York at Plattsburgh, co-editor with Armelagos, of one of the seminal books in the field, Paleopathology at the Origins of Agriculture. “When I first started making that argument ten years ago, not many people agreed with me. Now it’s become a respectable, albeit controversial, side of the debate.”\n\nThere are at least three sets of reasons to explain the findings that agriculture was bad for health. First, hunter-gatherers enjoyed a varied diet, while early fanners obtained most of their food from one or a few starchy crops. The farmers gained cheap calories at the cost of poor nutrition, (today just three high-carbohydrate plants – wheat, rice, and corn – provide the bulk of the calories consumed by the human species, yet each one is deficient in certain vitamins or amino acids essential to life.) Second, because of dependence on a limited number of crops, farmers ran the risk of starvation if one crop failed. Finally, the mere fact that agriculture encouraged people to clump together in crowded societies, many of which then carried on trade with other crowded societies, led to the spread of parasites and infectious disease. (Some archaeologists think it was the crowding, rather than agriculture, that promoted disease, but this is a chicken-and-egg argument, because crowding encourages agriculture and vice versa.) Epidemics couldn’t take hold when populations were scattered in small bands that constantly shifted camp. Tuberculosis and diarrheal disease had to await the rise of farming, measles and bubonic plague the appearnce of large cities.\n\nBesides malnutrition, starvation, and epidemic diseases, farming helped bring another curse upon humanity: deep class divisions. Hunter-gatherers have little or no stored food, and no concentrated food sources, like an orchard or a herd of cows: they live off the wild plants and animals they obtain each day. Therefore, there can be no kings, no class of social parasites who grow fat on food seized from others. Only in a farming population could a healthy, non-producing elite set itself above the disease-ridden masses. Skeletons from Greek tombs at Mycenae c. 1500 B. C. suggest that royals enjoyed a better diet than commoners, since the royal skeletons were two or three inches taller and had better teeth (on the average, one instead of six cavities or missing teeth). Among Chilean mummies from c. A. D. 1000, the elite were distinguished not only by ornaments and gold hair clips but also by a fourfold lower rate of bone lesions caused by disease.\n\nSimilar contrasts in nutrition and health persist on a global scale today. To people in rich countries like the U. S., it sounds ridiculous to extol the virtues of hunting and gathering. But Americans are an elite, dependent on oil and minerals that must often be imported from countries with poorer health and nutrition. If one could choose between being a peasant farmer in Ethiopia or a bushman gatherer in the Kalahari, which do you think would be the better choice?\n\nFarming may have encouraged inequality between the sexes, as well. Freed from the need to transport their babies during a nomadic existence, and under pressure to produce more hands to till the fields, farming women tended to have more frequent pregnancies than their hunter-gatherer counterparts – with consequent drains on their health. Among the Chilean mummies for example, more women than men had bone lesions from infectious disease.\n\nWomen in agricultural societies were sometimes made beasts of burden. In New Guinea farming communities today I often see women staggering under loads of vegetables and firewood while the men walk empty-handed. Once while on a field trip there studying birds, I offered to pay some villagers to carry supplies from an airstrip to my mountain camp. The heaviest item was a 110-pound bag of rice, which I lashed to a pole and assigned to a team of four men to shoulder together. When I eventually caught up with the villagers, the men were carrying light loads, while one small woman weighing less than the bag of rice was bent under it, supporting its weight by a cord across her temples.\n\nAs for the claim that agriculture encouraged the flowering of art by providing us with leisure time, modern hunter-gatherers have at least as much free time as do farmers. The whole emphasis on leisure time as a critical factor seems to me misguided. Gorillas have had ample free time to build their own Parthenon, had they wanted to. While post-agricultural technological advances did make new art forms possible and preservation of art easier, great paintings and sculptures were already being produced by hunter-gatherers 15,000 years ago, and were still being produced as recently as the last century by such hunter-gatherers as some Eskimos and the Indians of the Pacific Northwest.\n\nThus with the advent of agriculture and elite became better off, but most people became worse off. Instead of swallowing the progressivist party line that we chose agriculture because it was good for us, we must ask how we got trapped by it despite its pitfalls.\n\nOne answer boils down to the adage “Might makes right.” Farming could support many more people than hunting, albeit with a poorer quality of life. (Population densities of hunter-gatherers are rarely over one person per ten square miles, while farmers average 100 times that.) Partly, this is because a field planted entirely in edible crops lets one feed far more mouths than a forest with scattered edible plants. Partly, too, it’s because nomadic hunter-gatherers have to keep their children spaced at four-year intervals by infanticide and other means, since a mother must carry her toddler until it’s old enough to keep up with the adults. Because farm women don’t have that burden, they can and often do bear a child every two years.\n\nAs population densities of hunter-gatherers slowly rose at the end of the ice ages, bands had to choose between feeding more mouths by taking the first steps toward agriculture, or else finding ways to limit growth. Some bands chose the former solution, unable to anticipate the evils of farming, and seduced by the transient abundance they enjoyed until population growth caught up with increased food production. Such bands outbred and then drove off or killed the bands that chose to remain hunter-gatherers, because a hundred malnourished farmers can still outfight one healthy hunter. It’s not that hunter-gatherers abandoned their life style, but that those sensible enough not to abandon it were forced out of all areas except the ones farmers didn’t want.\n\nAt this point it’s instructive to recall the common complaint that archaeology is a luxury, concerned with the remote past, and offering no lessons for the present. Archaeologists studying the rise of farming have reconstructed a crucial stage at which we made the worst mistake in human history. Forced to choose between limiting population or trying to increase food production, we chose the latter and ended up with starvation, warfare, and tyranny.\n\nHunter-gatherers practiced the most successful and longest-lasting life style in human history. In contrast, we’re still struggling with the mess into which agriculture has tumbled us, and it’s unclear whether we can solve it. Suppose that an archaeologist who had visited from outer space were trying to explain human history to his fellow spacelings. He might illustrate the results of his digs by a 24-hour clock on which one hour represents 100,000 years of real past time. If the history of the human race began at midnight, then we would now be almost at the end of our first day. We lived as hunter-gatherers for nearly the whole of that day, from midnight through dawn, noon, and sunset. Finally, at 11:54 p. m. we adopted agriculture. As our second midnight approaches, will the plight of famine-stricken peasants gradually spread to engulf us all? Or will we somehow achieve those seductive blessings that we imagine behind agriculture’s glittering facade, and that have so far eluded us?\n"
        },
  
      {
        "title"    : "History Of Technology",
        "url"      : "/history-of-technology/",
        "content"  : "1608\nTelescope\n\n1698\nSteam Engine\n\n1800s\nElectricity\nDC Motor\nCombustion Engine\nThe Origin of Species\nLightbulb\nTelephone\nCar\nAC Motor\nRadio\n\n1900s\nFirst Flight\nTelevision\nEdwin Hubble finds Expansion of the Universe\nEinstein formulates the equivalence of matter and energy, relativity of time and space\nDigital Computer ENIAC\nAtomic Bomb\nTransistor\nPolio Vaccine (1948-1955)\nCOBOL, Fortran\nDNA Double Helix (1953)\nIntegrated Circuit (1958)\n\n1960s\nPrototype of the modern computer with a mouse and graphical user interface (1964)\nThe Birth of the Internet (1965-1995)\nApollo 1 (1967)\nIntel (1968)\nUNIX (1969)\nApollo 11 (1969)\n\n1970s\nFloppy Disk (1971)\nC Programming Language (1972)\nApollo 17 (1972)\nEthernet (1973)\nFirst Cell Phone (1973)\nFirst Personal Computers (1974-1977)\nALTAIR 8800, Microsoft (1975)\nApple (1976)\nVisiCalc, the first spreadsheet program (1978)\nWordStar, word processing (1979)\n\n1980s\nIBM PC\nCommodore 64 (1982)\nMacintosh (1984)\nCRISPR (1987)\nC++ (1985)\nThe first domain (symbolics.com)\n\n1990s\nHubble (1990)\nIMDb, Python, Haskell (1990)\nDolly Cloned (1993)\nPentium Processor, Mosaic Browser (1993)\nNetscape Navigator, Internet Explorer, Yahoo, Amazon, PHP (1994)\nJava, Ruby, JavaScript, PostgreSQL (1996)\nGoogle (1998)\nInternational Space Station Launched (1998)\nWi-Fi (1999)\n\n2000s\nWikipedia (2001)\nSpaceX (2002)\nSafari, Tesla (2003)\nGmail, Facebook (2004)\nArduino, Reddit, YouTube (2005)\nTwitter, MacBook Pro (2006)\niPhone, Kindle (2007)\nMacBook Air (2008)\nGitHub, WhatsApp (2009)\n\n2010s\nInstagram (2010)\nSnapchat (2011)\nTesla Model S (2012)\nApple Watch (2015)\nCRISPR in Human Trials (2016)\nGPT-3 (2019)\n\n2020s\n5G Networks (2020)\nCOVID-19 mRNA Vaccines (2020) \nJames Webb Space Telescope (2021)\nChatGPT (2022)\nQuantum Supremacy Claims (2022)\nGenerative AI Expansion (2023)\n\nmisc.\n\nhttps://drewdevault.com/time\n\nhttps://www.computerhistory.org/timeline/computers/\n"
        },
  
      {
        "title"    : "History",
        "url"      : "/history/",
        "content"  : "https://acoup.blog/2022/08/26/collections-why-no-roman-industrial-revolution/\n\nhttps://www.youtube.com/@townsends\n\nTag: history - Sketchplanations\n"
        },
  
      {
        "title"    : "Some events in the last 14 billion years",
        "url"      : "/since-big-bang/",
        "content"  : "\n  Big Bang: 13.8 billion years ago\n  Formation of Milky Way Galaxy: 13.6 billion years ago\n  Formation of Solar System: 4.6 billion years ago\n  Formation of Earth: 4.5 billion years ago\n  First Single-Celled Life: 3.5 billion years ago\n  First Multicellular Life: 600 million years ago\n  Cambrian Explosion: 541 million years ago\n  First Land Plants: 470 million years ago\n  First Dinosaurs: 230 million years ago\n  First Mammals: 200 million years ago\n  First Hominids: 7 million years ago\n  Last Common Ancestor of Humans and Chimps: 6 million years ago\n  First Humans (Genus Homo): 2.8 million years ago\n  First Stone Tools: 2.6 million years ago\n  Controlled Use of Fire: 1 million years ago\n  Homo Sapiens: 300,000 years ago\n  Cave Paintings: 40,000 years ago\n  End of the Last Ice Age: ~12,000 years ago\n  Agriculture: ~12,000 years ago\n  First Temple (Göbekli Tepe): 11,600 years ago\n  First Cities: 9,500 years ago\n  Copper Age: 7,000 years ago\n  Wheel: 6,500 years ago\n  Bronze Age: 5,300 years ago\n  Ancient Egypt: 5000 years ago\n  First Writings (Sumerians): 5000 years ago\n  Pyramids: 4,500 years ago\n  Iron Age: 3,200 years ago\n  Classical Greece: 2,500 to 2,400 years ago\n  Hellenistic Period: 2,300 to 2,100 years ago\n  Roman Republic: 2,500 to 2,100 years ago\n  Roman Empire: 2,100 to 1,500 years ago\n  Renaissance: 700 to 400 years ago\n  Industrial Revolution: 300 to 50 years ago\n  World War I: 1914 - 1918\n  World War II: 1939 - 1945\n\n\n\n"
        },
  
      {
        "title"    : "If the Earth is 45 years old",
        "url"      : "/time-scale/",
        "content"  : "The earth is about 4.5 billion years old.\n\nLet’s take it to human-scale and say the Earth is 45 years old.\n\n100 000 000 years for us is like one year to her.\n\nThen the Milky Way is 136 years old,\n\nand Big Bang happened 138 years ago.\n\n\n\nBy the same scale,\n\nA decade is 3 seconds\n\na century, 30 seconds\n\n200 years, a minute\n\n1000 years, 5 minutes\n\n300 000 years, a day\n\nA human lifetime is about 20 seconds\n\n\n\n\n\n    \n    \n    \n    \n\n\nFor the 45 years old Mother Earth,\n\nDinosaurs appeared 2 years ago and lived for ~1.5 years\n\nHuman species evolved during the last two weeks\n\nMade early stone tools a week ago\n\nLearned to control fire in the last few days\n\nAgriculture started an hour ago (12 000 years)\n\nSumer, writing, wheel, 30 minutes ago\n\nAncient Egypt 25 minutes ago\n\nBabylonia 20 minutes ago\n\nTrojan War 16 minutes ago\n\nRome was found 14 minutes ago\n\nRenaissance 3 minutes ago\n\nIndustry a minute ago\n\nWW2 was 25 seconds ago\n\nMoon landings were 16 seconds ago\n\nEach decade is about 3 seconds, in a 138 years old universe\n"
        },
  
      {
        "title"    : "Law",
        "url"      : "/law/",
        "content"  : "\n"
        },
  
      {
        "title"    : "Asimov",
        "url"      : "/asimov/",
        "content"  : "“Society is much more easily soothed than one’s own conscience.”\n― Isaac Asimov, Foundation and Empire\n"
        },
  
      {
        "title"    : "Brave New World",
        "url"      : "/brave-new-world/",
        "content"  : "“People will come to love their oppression, to adore the technologies that undo their capacities to think.” - Aldous HuxleyP\n"
        },
  
      {
        "title"    : "Look Down And Around",
        "url"      : "/look-down-and-around/",
        "content"  : "A Left-Handed Commencement Address\n\nUrsula K. Le Guin\n\n…\n\nBecause you are human beings you are going to meet failure. You are going to meet disappointment, injustice, betrayal, and irreparable loss. You will find you’re weak where you thought yourself strong. You’ll work for possessions and then find they possess you. You will find yourself – as I know you already have – in dark places, alone, and afraid.\n\n…\n\nI’m talking about society, the so-called man’s world of institutionalized competition, aggression, violence, authority, and power.\n\n…\n\nI hope you live without the need to dominate, and without the need to be dominated. I hope you are never victims, but I hope you have no power over other people. And when you fail, and are defeated, and in pain, and in the dark, then I hope you will remember that darkness is your country, where you live, where no wars are fought and no wars are won, but where the future is.\n\nOur roots are in the dark; the earth is our country. Why did we look up for blessing – instead of around, and down? What hope we have lies there. Not in the sky full of orbiting spy-eyes and weaponry, but in the earth we have looked down upon. Not from above, but from below. Not in the light that blinds, but in the dark that nourishes, where human beings grow human souls.\n"
        },
  
      {
        "title"    : "Orwell",
        "url"      : "/orwell/",
        "content"  : "“All animals are equal, but some animals are more equal than others.”\n\n“The creatures outside looked from pig to man, and from man to pig, and from pig to man again; but already it was impossible to say which was which.”\n\n“War is peace.\nFreedom is slavery.\nIgnorance is strength.”\n\n“Who controls the past controls the future. Who controls the present controls the past.”\n"
        },
  
      {
        "title"    : "Politics",
        "url"      : "/politics/",
        "content"  : "The strong do what they can, and the weak suffer what they must. Because the weak don’t come together and resist. The most common way people give up their power is by thinking they don’t have any.\n\n\n\n“The most dangerous creation of any society is the man who has nothing to lose.” James Baldwin\n\n“People whose power is real fulfill their obligations;\npeople whose power is hollow insist on their claims.”\n\n“Insight sees the insignificant.\nStrength knows how to yield.”\n\n“Strike the shepherd and the sheep will scatter”\n\n“Despise The Free Lunch”\n\n“Our lives begin to end the day we become silent about things that matter.”\n\n“Violence is the last refuge of the incompetent.”\n\n“My course is set for an uncharted sea.”\n― Dante Alighieri\n\nIf they can make you ask the wrong questions, they don’t have to worry about answers\n\n“Never interrupt your enemy when he is making a mistake.”\n― Napoleon Bonaparte\n\nSoft power: Shaping the preferences through appeal and attraction\n\n\n\nThe Politics of Obedience: The Discourse of Voluntary Servitude\n\n“It is incredible how as soon as a people become subject, it\npromptly falls into such complete forgetfulness of its freedom\nthat it can hardly be roused to the point of regaining it,\nobeying so easily and willingly that one is led to say that this\npeople has not so much lost its liberty as won its enslavement.”\n\n“It is true that in the beginning men submit under constraint and by force; but those who come after them obey without regret and perform willingly what their predecessors had done because they had to. This is why men born under the yoke and then nourished and reared in slavery are content, without further effort, to live in their native circumstance, unaware of any other state or right, and considering as quite natural the condition into which they were born.”\n\n“Resolve to serve no more, and you are at once freed. I do not ask that you place hands upon the tyrant to topple him over, but simply that you support him no longer; then you will behold him, like a great Colossus whose pedestal has been pulled away, fall of his own weight and break in pieces.”\n\n― Étienne de La Boétie, \n\nAlso see\n\nDo The Right Thing\n"
        },
  
      {
        "title"    : "Prince",
        "url"      : "/prince/",
        "content"  : "Zeitgeist\n\nIrrevocable judgement\n\n“i pensieri stretti &amp; il viso sciolto.”\n"
        },
  
      {
        "title"    : "Questioning People Seen As A Threat To Status Quo",
        "url"      : "/questioning-people-seen-as-a-threat-to-status-quo/",
        "content"  : "https://www.madinamerica.com/2012/02/why-anti-authoritarians-are-diagnosed-as-mentally-ill/\n\nIn my career as a psychologist, I have talked with hundreds of people previously diagnosed by other professionals with oppositional defiant disorder, attention deficit hyperactive disorder, anxiety disorder and other psychiatric illnesses, and I am struck by\n(1) how many of those diagnosed are essentially anti-authoritarians,\n(2) how those professionals who have diagnosed them are not.\n\n…\n\nSo authoritarians financially marginalize those who buck the system, they criminalize anti-authoritarianism, they psychopathologize anti-authoritarians, and they market drugs for their “cure.”\n"
        },
  
      {
        "title"    : "The Triumph of Stupidity, Bertrand Russell",
        "url"      : "/the-triumph-of-stupidity/",
        "content"  : "What has been happening in Germany is a matter of the gravest portent for the whole civilised world. Throughout the last hundred and fifty years, individual Germans have done more to further civilisation than the individuals of any other country; during the latter half of this period, Germans, collectively, have been equally effective in degrading civilisation.\n\nAt the present day the most distinguished names in the world of learning are still German; the most degraded and brutal government is also German. Of the individual Germans whose work has caused Germany to be respected, some are in exile, some in hiding, and some have disappeared, their fate unknown. Given a few years of Nazi rule, Germany will sink to the level of a horde of Goths.\nWhat has happened? What has happened is quite simple. Those elements of the population which are both brutal and stupid (and these two qualities usually go together) have combined against the rest. By murder, by torture, by imprisonment, by the terrorism of armed forces, they have subjected the intelligent and humane parts of the nation and seized power with the view of furthering the glory of the Fatherland.\n\nWhat has happened in Germany may well happen elsewhere. The British Fascists are not as yet a large party, but they are growing rapidly, and if at any future time there should be danger of a Labour Government that meant business, they would win the support of most of the governing classes. Meanwhile, the British government of India is a form of Fascism, all the worse for being alien. The British in India, like the Hitlerites in Germany, can only govern by putting the best people in prison.\n\nBrute force plays a much larger part in the government of the world than it did before 1914, and what is especially alarming, force tends increasingly to fall into the hands of those who are enemies of civilisation. The danger is profound and terrible; it cannot be waved aside with easy optimism.\nThe fundamental cause of the trouble is that in the modern world the stupid are cocksure while the intelligent are full of doubt. Even those of the intelligent who believe that they have a nostrum are too individualistic to combine with other intelligent men from whom they differ on minor points. This was not always the case. A hundred years ago the philosophical radicals formed a school of intelligent men who were just as sure of themselves as the Hitlerites are; the result was that they dominated politics and that the world advanced rapidly both in intelligence and in material well-being.\n\nIt is quite true that the intelligence of the philosophical radicals was very limited. It is, I think, undeniable that the best men of the present day have a wider and truer outlook, but the best men of that day had influence, while the best men of this are impotent spectators. Perhaps we shall have to realise that scepticism and intellectual individualism are luxuries which in our tragic age must be forgone, and if intelligence is to be effective, it will have to be combined with a moral fervour which it usually possessed in the past but now usually lacks.\n\nIn this gloomy state of affairs, the brightest spot is America. In America democracy still appears well established, and the men in powered deal with what is amiss by constructive measures, not by pogroms and wholesale imprisonment. After the defeat of the French Revolution, democracy; discredited by the reign of terror, reconquered the world from America. Perhaps America is destined once more to save Europe from the consequences of its excesses.\n\n(10 May 1933)\n"
        },
  
      {
        "title"    : "Warfare Is Deception",
        "url"      : "/warfare-is-deception/",
        "content"  : "Warfare is deception\n\nAppear weak when you are strong, and strong when you are weak.\n\nif you can attack, seem unable\n\nseem inactive if you are active\n\nseem far when near, near when far\n\n\n\nPretend to be weak so they grow arrogant\n\nIrritate the enemy, make them angry\n\nIf you can’t control your anger, you lose\n\n\n\nAttack unexpectedly. Be prepared and wait to take them unprepared\n\nThe Art of War\n"
        },
  
      {
        "title"    : "Who Goes Nazi",
        "url"      : "/who-goes-nazi/",
        "content"  : "“Cruelty springs from weakness.”\n\nWho Goes Nazi by Dorothy Thompson\n\nIt is an interesting and somewhat macabre parlor game to play at a large gathering of one’s acquaintances: to speculate who in a showdown would go Nazi. By now, I think I know. I have gone through the experience many times—in Germany, in Austria, and in France. I have come to know the types: the born Nazis, the Nazis whom democracy itself has created, the certain-to-be fellow-travelers. And I also know those who never, under any conceivable circumstances, would become Nazis.\n\nIt is preposterous to think that they are divided by any racial characteristics. Germans may be more susceptible to Nazism than most people, but I doubt it. Jews are barred out, but it is an arbitrary ruling. I know lots of Jews who are born Nazis and many others who would heil Hitler tomorrow morning if given a chance. There are Jews who have repudiated their own ancestors in order to become “Honorary Aryans and Nazis”; there are full-blooded Jews who have enthusiastically entered Hitler’s secret service. Nazism has nothing to do with race and nationality. It appeals to a certain type of mind.\n\nIt is also, to an immense extent, the disease of a generation—the generation which was either young or unborn at the end of the last war. This is as true of Englishmen, Frenchmen, and Americans as of Germans. It is the disease of the so-called “lost generation.”\n\nSometimes I think there are direct biological factors at work—a type of education, feeding, and physical training which has produced a new kind of human being with an imbalance in his nature. He has been fed vitamins and filled with energies that are beyond the capacity of his intellect to discipline. He has been treated to forms of education which have released him from inhibitions. His body is vigorous. His mind is childish. His soul has been almost completely neglected.\n\nAt any rate, let us look round the room.\n\nThe gentleman standing beside the fireplace with an almost untouched glass of whiskey beside him on the mantelpiece is Mr. A, a descendant of one of the great American families. There has never been an American Blue Book without several persons of his surname in it. He is poor and earns his living as an editor. He has had a classical education, has a sound and cultivated taste in literature, painting, and music; has not a touch of snobbery in him; is full of humor, courtesy, and wit. He was a lieutenant in the World War, is a Republican in politics, but voted twice for Roosevelt, last time for Willkie. He is modest, not particularly brilliant, a staunch friend, and a man who greatly enjoys the company of pretty and witty women. His wife, whom he adored, is dead, and he will never remarry.\n\nHe has never attracted any attention because of outstanding bravery. But I will put my hand in the fire that nothing on earth could ever make him a Nazi. He would greatly dislike fighting them, but they could never convert him. . . . Why not?\n\nBeside him stands Mr. B, a man of his own class, graduate of the same preparatory school and university, rich, a sportsman, owner of a famous racing stable, vice-president of a bank, married to a well-known society belle. He is a good fellow and extremely popular. But if America were going Nazi he would certainly join up, and early. Why? . . . Why the one and not the other?\n\nMr. A has a life that is established according to a certain form of personal behavior. Although he has no money, his unostentatious distinction and education have always assured him a position. He has never been engaged in sharp competition. He is a free man. I doubt whether ever in his life he has done anything he did not want to do or anything that was against his code. Nazism wouldn’t fit in with his standards and he has never become accustomed to making concessions.\n\nMr. B has risen beyond his real abilities by virtue of health, good looks, and being a good mixer. He married for money and he has done lots of other things for money. His code is not his own; it is that of his class—no worse, no better, He fits easily into whatever pattern is successful. That is his sole measure of value—success. Nazism as a minority movement would not attract him. As a movement likely to attain power, it would.\n\nThe saturnine man over there talking with a lovely French emigree is already a Nazi. Mr. C is a brilliant and embittered intellectual. He was a poor white-trash Southern boy, a scholarship student at two universities where he took all the scholastic honors but was never invited to join a fraternity. His brilliant gifts won for him successively government positions, partnership in a prominent law firm, and eventually a highly paid job as a Wall Street adviser. He has always moved among important people and always been socially on the periphery. His colleagues have admired his brains and exploited them, but they have seldom invited him—or his wife—to dinner.\n\nHe is a snob, loathing his own snobbery. He despises the men about him—he despises, for instance, Mr. B—because he knows that what he has had to achieve by relentless work men like B have won by knowing the right people. But his contempt is inextricably mingled with envy. Even more than he hates the class into which he has insecurely risen, does he hate the people from whom he came. He hates his mother and his father for being his parents. He loathes everything that reminds him of his origins and his humiliations. He is bitterly anti-Semitic because the social insecurity of the Jews reminds him of his own psychological insecurity.\n\nPity he has utterly erased from his nature, and joy he has never known. He has an ambition, bitter and burning. It is to rise to such an eminence that no one can ever again humiliate him. Not to rule but to be the secret ruler, pulling the strings of puppets created by his brains. Already some of them are talking his language—though they have never met him.\n\nThere he sits: he talks awkwardly rather than glibly; he is courteous. He commands a distant and cold respect. But he is a very dangerous man. Were he primitive and brutal he would be a criminal—a murderer. But he is subtle and cruel. He would rise high in a Nazi regime. It would need men just like him—intellectual and ruthless. But Mr. C is not a born Nazi. He is the product of a democracy hypocritically preaching social equality and practicing a carelessly brutal snobbery. He is a sensitive, gifted man who has been humiliated into nihilism. He would laugh to see heads roll.\n\nI think young D over there is the only born Nazi in the room. Young D is the spoiled only son of a doting mother. He has never been crossed in his life. He spends his time at the game of seeing what he can get away with. He is constantly arrested for speeding and his mother pays the fines. He has been ruthless toward two wives and his mother pays the alimony. His life is spent in sensation-seeking and theatricality. He is utterly inconsiderate of everybody. He is very good-looking, in a vacuous, cavalier way, and inordinately vain. He would certainly fancy himself in a uniform that gave him a chance to swagger and lord it over others.\n\nMrs. E would go Nazi as sure as you are born. That statement surprises you? Mrs. E seems so sweet, so clinging, so cowed. She is. She is a masochist. She is married to a man who never ceases to humiliate her, to lord it over her, to treat her with less consideration than he does his dogs. He is a prominent scientist, and Mrs. E, who married him very young, has persuaded herself that he is a genius, and that there is something of superior womanliness in her utter lack of pride, in her doglike devotion. She speaks disapprovingly of other “masculine” or insufficiently devoted wives. Her husband, however, is bored to death with her. He neglects her completely and she is looking for someone else before whom to pour her ecstatic self-abasement. She will titillate with pleased excitement to the first popular hero who proclaims the basic subordination of women.\n\nOn the other hand, Mrs. F would never go Nazi. She is the most popular woman in the room, handsome, gay, witty, and full of the warmest emotion. She was a popular actress ten years ago; married very happily; promptly had four children in a row; has a charming house, is not rich but has no money cares, has never cut herself off from her own happy-go-lucky profession, and is full of sound health and sound common sense. All men try to make love to her; she laughs at them all, and her husband is amused. She has stood on her own feet since she was a child, she has enormously helped her husband’s career (he is a lawyer), she would ornament any drawing-room in any capital, and she is as American as ice cream and cake.\n\nII\n\nHow about the butler who is passing the drinks? I look at James with amused eyes. James is safe. James has been butler to the ‘ighest aristocracy, considers all Nazis parvenus and communists, and has a very good sense for “people of quality.” He serves the quiet editor with that friendly air of equality which good servants always show toward those they consider good enough to serve, and he serves the horsy gent stiffly and coldly.\n\nBill, the grandson of the chauffeur, is helping serve to-night. He is a product of a Bronx public school and high school, and works at night like this to help himself through City College, where he is studying engineering. He is a “proletarian,” though you’d never guess it if you saw him without that white coat. He plays a crack game of tennis—has been a tennis tutor in summer resorts—swims superbly, gets straight A’s in his classes, and thinks America is okay and don’t let anybody say it isn’t. He had a brief period of Youth Congress communism, but it was like the measles. He was not taken in the draft because his eyes are not good enough, but he wants to design airplanes, “like Sikorsky.” He thinks Lindbergh is “just another pilot with a build-up and a rich wife” and that he is “always talking down America, like how we couldn’t lick Hitler if we wanted to.” At this point Bill snorts.\n\nMr. G is a very intellectual young man who was an infant prodigy. He has been concerned with general ideas since the age of ten and has one of those minds that can scintillatingly rationalize everything. I have known him for ten years and in that time have heard him enthusiastically explain Marx, social credit, technocracy, Keynesian economics, Chestertonian distributism, and everything else one can imagine. Mr. G will never be a Nazi, because he will never be anything. His brain operates quite apart from the rest of his apparatus. He will certainly be able, however, fully to explain and apologize for Nazism if it ever comes along. But Mr. G is always a “deviationist.” When he played with communism he was a Trotskyist; when he talked of Keynes it was to suggest improvement; Chesterton’s economic ideas were all right but he was too bound to Catholic philosophy. So we may be sure that Mr. G would be a Nazi with purse-lipped qualifications. He would certainly be purged.\n\nH is an historian and biographer. He is American of Dutch ancestry born and reared in the Middle West. He has been in love with America all his life. He can recite whole chapters of Thoreau and volumes of American poetry, from Emerson to Steve Benet. He knows Jefferson’s letters, Hamilton’s papers, Lincoln’s speeches. He is a collector of early American furniture, lives in New England, runs a farm for a hobby and doesn’t lose much money on it, and loathes parties like this one. He has a ribald and manly sense of humor, is unconventional and lost a college professorship because of a love affair. Afterward he married the lady and has lived happily ever afterward as the wages of sin.\n\nH has never doubted his own authentic Americanism for one instant. This is his country, and he knows it from Acadia to Zenith. His ancestors fought in the Revolutionary War and in all the wars since. He is certainly an intellectual, but an intellectual smelling slightly of cow barns and damp tweeds. He is the most good-natured and genial man alive, but if anyone ever tries to make this country over into an imitation of Hitler’s, Mussolini’s, or Petain’s systems H will grab a gun and fight. Though H’s liberalism will not permit him to say it, it is his secret conviction that nobody whose ancestors have not been in this country since before the Civil War really understands America or would really fight for it against Nazism or any other foreign ism in a showdown.\n\nBut H is wrong. There is one other person in the room who would fight alongside H and he is not even an American citizen. He is a young German emigre, whom I brought along to the party. The people in the room look at him rather askance because he is so Germanic, so very blond-haired, so very blue-eyed, so tanned that somehow you expect him to be wearing shorts. He looks like the model of a Nazi. His English is flawed—he learned it only five years ago. He comes from an old East Prussian family; he was a member of the post-war Youth Movement and afterward of the Republican “Reichsbanner.” All his German friends went Nazi—without exception. He hiked to Switzerland penniless, there pursued his studies in New Testament Greek, sat under the great Protestant theologian, Karl Barth, came to America through the assistance of an American friend whom he had met in a university, got a job teaching the classics in a fashionable private school; quit, and is working now in an airplane factory—working on the night shift to make planes to send to Britain to defeat Germany. He has devoured volumes of American history, knows Whitman by heart, wonders why so few Americans have ever really read the Federalist papers, believes in the United States of Europe, the Union of the English-speaking world, and the coming democratic revolution all over the earth. He believes that America is the country of Creative Evolution once it shakes off its middle-class complacency, its bureaucratized industry, its tentacle-like and spreading government, and sets itself innerly free.\n\nThe people in the room think he is not an American, but he is more American than almost any of them. He has discovered America and his spirit is the spirit of the pioneers. He is furious with America because it does not realize its strength and beauty and power. He talks about the workmen in the factory where he is employed. . . . He took the job “in order to understand the real America.” He thinks the men are wonderful. “Why don’t you American intellectuals ever get to them; talk to them?”\n\nI grin bitterly to myself, thinking that if we ever got into war with the Nazis he would probably be interned, while Mr. B and Mr. G and Mrs. E would be spreading defeatism at all such parties as this one. “Of course I don’t like Hitler but . . .”\n\nMr. J over there is a Jew. Mr. J is a very important man. He is immensely rich—he has made a fortune through a dozen directorates in various companies, through a fabulous marriage, through a speculative flair, and through a native gift for money and a native love of power. He is intelligent and arrogant. He seldom associates with Jews. He deplores any mention of the “Jewish question.” He believes that Hitler “should not be judged from the standpoint of anti-Semitism.” He thinks that “the Jews should be reserved on all political questions.” He considers Roosevelt “an enemy of business.” He thinks “It was a serious blow to the Jews that Frankfurter should have been appointed to the Supreme Court.”\n\nThe saturnine Mr. C—the real Nazi in the room—engages him in a flatteringly attentive conversation. Mr. J agrees with Mr. C wholly. Mr. J is definitely attracted by Mr. C. He goes out of his way to ask his name—they have never met before. “A very intelligent man.”\n\nMr. K contemplates the scene with a sad humor in his expressive eyes. Mr. K is also a Jew. Mr. K is a Jew from the South. He speaks with a Southern drawl. He tells inimitable stories. Ten years ago he owned a very successful business that he had built up from scratch. He sold it for a handsome price, settled his indigent relatives in business, and now enjoys an income for himself of about fifty dollars a week. At forty he began to write articles about odd and out-of-the-way places in American life. A bachelor, and a sad man who makes everybody laugh, he travels continually, knows America from a thousand different facets, and loves it in a quiet, deep, unostentatious way. He is a great friend of H, the biographer. Like H, his ancestors have been in this country since long before the Civil War. He is attracted to the young German. By and by they are together in the drawing-room. The impeccable gentleman of New England, the country-man—intellectual of the Middle West, the happy woman whom the gods love, the young German, the quiet, poised Jew from the South. And over on the other side are the others.\n\nMr. L has just come in. Mr. L is a lion these days. My hostess was all of a dither when she told me on the telephone, “ . . . and L is coming. You know it’s dreadfully hard to get him.” L is a very powerful labor leader. “My dear, he is a man of the people, but really fascinating.” L is a man of the people and just exactly as fascinating as my horsy, bank vice-president, on-the-make acquaintance over there, and for the same reasons and in the same way. L makes speeches about the “third of the nation,” and L has made a darned good thing for himself out of championing the oppressed. He has the best car of anyone in this room; salary means nothing to him because he lives on an expense account. He agrees with the very largest and most powerful industrialists in the country that it is the business of the strong to boss the weak, and he has made collective bargaining into a legal compulsion to appoint him or his henchmen as “labor’s” agents, with the power to tax pay envelopes and do what they please with the money. L is the strongest natural-born Nazi in this room. Mr. B regards him with contempt tempered by hatred. Mr. B will use him. L is already parroting B’s speeches. He has the brains of Neanderthal man, but he has an infallible instinct for power. In private conversation he denounces the Jews as “parasites.” No one has ever asked him what are the creative functions of a highly paid agent, who takes a percentage off the labor of millions of men, and distributes it where and as it may add to his own political power.\n\nIII\n\nIt’s fun—a macabre sort of fun—this parlor game of “Who Goes Nazi?” And it simplifies things—asking the question in regard to specific personalities.\n\nKind, good, happy, gentlemanly, secure people never go Nazi. They may be the gentle philosopher whose name is in the Blue Book, or Bill from City College to whom democracy gave a chance to design airplanes—you’ll never make Nazis out of them. But the frustrated and humiliated intellectual, the rich and scared speculator, the spoiled son, the labor tyrant, the fellow who has achieved success by smelling out the wind of success—they would all go Nazi in a crisis.\n\nBelieve me, nice people don’t go Nazi. Their race, color, creed, or social condition is not the criterion. It is something in them.\n\nThose who haven’t anything in them to tell them what they like and what they don’t—whether it is breeding, or happiness, or wisdom, or a code, however old-fashioned or however modern, go Nazi. It’s an amusing game. Try it at the next big party you go to.\n\n"
        },
  
      {
        "title"    : "Bias For Unhappiness",
        "url"      : "/bias-for-unhappiness/",
        "content"  : "From Feeling Good: The New Mood Therapy by David D. Burns\n\n\n  All or nothing\n  Expectation\n  Negativity\n  Black filter\n  Ignoring positives\n  Jumping to conclusions\n  Mind reading\n  Exaggeration\n  Should would sentences\n  Labeling\n  Taking it personal\n  Hedonic adaptation\n  Unfit mental models\n\n\nHard Times\n"
        },
  
      {
        "title"    : "Cognitive Biases",
        "url"      : "/cognitive-biases/",
        "content"  : "tldr\n\nWe know almost nothing yet think we know the best.\n\nWe often follow the easy path.\n\nWe make decisions for trivial reasons and pretend otherwise.\n\nWe often have double standards.\n\nWe follow stories, winners, bandwagons, ..\n\nWe do almost everything to feel a bit better.\n\nPride and Prejudice\n\nWe think we are better than we are because the mistakes of others are easier to notice than our own\n\nBrains evolved to save energy so we jump to conclusions, oversimplify, overgeneralize, exaggerate, and stereotype. We do what is quick, easy, and comfortable over what is important.\n\nWe deal out judgment to others and seek understanding for ourselves\n\n\n\nAn action has a motive, often the motive is to feel a bit better, or feeling more free, more secure, more powerful, more liked, feared, or respected. People chase such emotions, money and status are just a proxy\n\nEven a seemingly selfless act makes us feel better about ourselves, though it doesn’t make the act less valuable\n\n\n\nWe love stories, a good story can easily win over the facts. Emotions make decisions. Reason comes later and justifies.\n\nPeople believe what they want yet we still try to prove something or to change people.\n\nWe can’t read minds or predict other people yet we like to pretend so, as I am doing here\n\nPeople see what they look for, and hear what they listen for.\n\n\n\nWe make ourselves unhappy by comparison, negativity, regret, and worry\n\nWe like to cry over spilled milk\n\nLike a gambler, we think our luck will turn after a streak of losses, but every turn is different and no one is keeping the score\n\n\n\nEnvironment shapes us more than we think.\n\nWe often make friends with whoever is close by\n\nWe love bandwagons, all these people can’t be wrong?\n\nPeople like you more than you know but they seldom think about you\n\n\n\nWe generally like to be consistent, to keep commitments\n\nWe fear and respect what we don’t know.\n\nWe like to fill in the blanks\n\n\n\nWe want to associate with winners and avoid losers.\n\nWe think success is earned and failure is deserved but most things are so random.\n\nWe feel envy but wouldn’t want to completely swap ourselves with another person\n\n\n\nWe tend to do something even when doing nothing is better\n\nWe often don’t know where to stop\n\nSee also\n\nTag: cognitive-bias - Sketchplanations\n\nBias For Unhappiness\n\nOvervaluing Short Term\n\nHeuristics That Almost Always Work - by Scott Alexander (astralcodexten.com)\n"
        },
  
      {
        "title"    : "Overvaluing Short Term",
        "url"      : "/overvaluing-short-term/",
        "content"  : "From https://cdixon.org/2009/09/19/climbing-the-wrong-hill\n\nHow can smart, ambitious people stay working in an area where they have no long term ambitions? I think a good analogy for the mistake they are making can be found in computer science.\n\nLocal Maximum\n\nGoing back to the job candidate, he has the benefit of having a less foggy view of his terrain.   He knows (or at least believes) he wants to end up at the top of a different hill than he is presently climbing.  He can see that higher hill from where he stands.\n\nBut the lure of the current hill is strong. There is a natural human tendency to make the next step an upward one. He ends up falling for a common trap highlighted by behavioral economists: people tend to systematically overvalue near term over long term rewards.  This effect seems to be even stronger in more ambitious people. Their ambition seems to make it hard for them to forgo the nearby upward step.\n\nPeople early in their career should learn from computer science: meander some in your walk (especially early on), randomly drop yourself into new parts of the terrain, and when you find the highest hill, don’t waste any more time on the current hill no matter how much better the next step up might appear.\n\nLeadership\n"
        },
  
      {
        "title"    : "Anger",
        "url"      : "/anger/",
        "content"  : "\n  What is bothering me? Is it the situation or my interpretation of it?\n  What is under this anger?\n  Am I in charge when angry or when calm?\n  Why must I take it too seriously?\n  Is it personal? Even so?\n  Does it really matter?\n  “We suffer more in imagination than in reality”\n  Why should I get so surprised? What is so unexpected?\n\n\nFear leads to anger, anger leads to hate.\n\n“The longer I live, the more I observe that carrying around anger is the most debilitating to the person who bears it.”\n― Katharine Graham\n"
        },
  
      {
        "title"    : "Anxiety",
        "url"      : "/anxiety/",
        "content"  : "What I have is a tiny drop of possible troubles,\n\nAll could go wrong yet only a few did\n\nAnxiety fades as gratitude settles in\n\n“Today I escaped from anxiety. Or no, I discarded it, because it was within me, in my own perceptions-not outside.”\n\nTag: anxiety - Sketchplanations\n"
        },
  
      {
        "title"    : "Arrogance",
        "url"      : "/arrogance/",
        "content"  : "Confident people are humble. Arrogance is a weakness.\n\n\n  Are you more important than others?\n  Are they not also living beings?\n  Are they worthless or beneath you?\n  Does it look like delusions of a weak mind?\n  Why show contempt instead of being happy with using your good qualities?\n  Do you have to prove something?\n  Do you need to pretend to be more than you are?\n\n"
        },
  
      {
        "title"    : "Courage",
        "url"      : "/courage/",
        "content"  : "Standing up for what you believe to be right even if you fear\n\nNot fearlessness, you may fear yet you still do what is right\n\nNot bravery, since bravery is instinctual, without thinking, courage is a conscious choice\n\n“The bravest people are the ones who don’t mind looking like cowards.”\n"
        },
  
      {
        "title"    : "Ego",
        "url"      : "/ego/",
        "content"  : "\n  It is not personal\n  It is not about you\n  Understand and accept that you will make mistakes.\n  Keep some distance -&gt; Not my problem, the problem; Not my idea, the idea\n  Treat people who know less than you with respect and patience\n\n"
        },
  
      {
        "title"    : "Emotions",
        "url"      : "/emotions/",
        "content"  : "Tag: emotions - Sketchplanations\n"
        },
  
      {
        "title"    : "Empathy",
        "url"      : "/empathy/",
        "content"  : "Social skills naturally arise from genuine empathy\n\nWe deal out judgment to others and seek understanding for ourselves\n\n\n\n\n"
        },
  
      {
        "title"    : "Hope",
        "url"      : "/hope/",
        "content"  : "“It won’t be as good as you hope, neither as bad as you fear”\n\n“Hope itself is often better than what you are hoping for”\n\n“False hopes are more dangerous than fears.”\n\n“A ship shouldn’t ride on a single anchor nor life on a single hope” Epictetus\n\n\n"
        },
  
      {
        "title"    : "Loneliness",
        "url"      : "/loneliness/",
        "content"  : "“The lonely one offers his hand too quickly to whomever he encounters” Nietzsche\n\nsee vs Solitude\n"
        },
  
      {
        "title"    : "Love",
        "url"      : "/love/",
        "content"  : "\n  Tis better to have loved and lost\n\n  Than never to have loved at all.\n\n\n“What is hell? I maintain that it is the suffering of being unable to love.”\n― Fyodor Dostoevsky, The Brothers Karamazov\n\n“Love doesn’t just sit there, like a stone, it has to be made, like bread; remade all the time, made new.”\n"
        },
  
      {
        "title"    : "Respect",
        "url"      : "/respect/",
        "content"  : "Respect was invented to cover the empty place where love should be\n"
        },
  
      {
        "title"    : "Trust",
        "url"      : "/trust/",
        "content"  : "Trust is the most delicate thing. Be impeccable with your word.\n\nPeople will never forget how you made them feel.\n"
        },
  
      {
        "title"    : "Unmet Needs",
        "url"      : "/unmet-needs/",
        "content"  : "Humans need to be seen, heard, loved, accepted, respected.\n\nAnger, greed, pride, and other toxic behavior signals an unmet need.\n"
        },
  
      {
        "title"    : "Vulnerability",
        "url"      : "/vulnerability/",
        "content"  : "“Conceal a flaw and the world will imagine the worst” MA\n"
        },
  
      {
        "title"    : "Gaslighting",
        "url"      : "/gaslighting/",
        "content"  : "\n"
        },
  
      {
        "title"    : "Habits",
        "url"      : "/habits/",
        "content"  : "\n  Focus and feel a bad habit to break it\n  Make good habits easy, visible, and rewarding\n  Set a clear time and place\n\n\n"
        },
  
      {
        "title"    : "How To Spot A Liar",
        "url"      : "/how-to-spot-a-liar/",
        "content"  : "These are not proof of deception but when they come in clusters, this is your signal\n\n\n\nJests, mimics, fake smiles, too little or too much eye contact\n\nLiers may look down, lower voice, set up a barrier, pepper it with irrelevant details\n\n\n\nLet go of your anger and contempt.\n\nSwitch to the curiosity mode.\n\nAsk specific questions, go backward.\n"
        },
  
      {
        "title"    : "Persuasion",
        "url"      : "/persuasion/",
        "content"  : "Persuasion has 2 main parts,\n\nattention and emotion\n\nAttention is fragile so keep it short and sweet, clear and fun\n\nEmotions make decisions, reason justifies later.\n\nCreate a story, appeal to emotion.\n\nNegotiations\n"
        },
  
      {
        "title"    : "Procrastination",
        "url"      : "/procrastination/",
        "content"  : "Why do I not want to do it?\n\nNot always harmful\n\nDo I think its unnecessary or unimportant, deep down\n\n\n\n\n  Lack of Interest: Do you find the task boring or unimportant?\n  Fear of Failing: Are you avoiding the task because you’re worried you might mess up?\n  Perfectionism: Are you holding off because you want everything to be perfect?\n  Feeling Overwhelmed: Is the task too big or complex, making it hard to start?\n  Distractions: Are there things around you pulling your attention away?\n  Time Management Issues: Are you struggling with planning or sticking to a schedule?\n  Skill Gaps: Do you feel unsure about your ability to complete the task?\n\n"
        },
  
      {
        "title"    : "Psychology",
        "url"      : "/psychology/",
        "content"  : "Tag: psychology - Sketchplanations\n\nTag: behavioral-psychology - Sketchplanations\n\nTag: cognitive-bias - Sketchplanations\n\n“It is quite possible–overwhelmingly probable, one might guess–that we will always learn more about human life and personality from novels than from scientific psychology”\n― Noam Chomsky\n"
        },
  
      {
        "title"    : "Relationships",
        "url"      : "/relationships/",
        "content"  : "A happy relationship consists of two happy people\n\nYour first relationship is with yourself, and if you are not at peace with yourself, how can you be happy with someone else?\n\nSuccessful relationships tend to bring up even little things that bother them. They don’t let things slide, they continually try to repair their relationship\n"
        },
  
      {
        "title"    : "Solitude",
        "url"      : "/solitude/",
        "content"  : "“All of humanity’s problems stem from man’s inability to sit quietly in a room alone” Blaise Pascal\n\n\n\n“What would you like to tell young people?”\n\n“I don’t know… I think I’d like to say only that they should learn to be alone and try to spend as much time as possible by themselves. I think one of the faults of young people today is that they try to come together around events that are noisy, almost aggressive at times. This desire to be together in order to not feel alone is an unfortunate symptom, in my opinion. Every person needs to learn from childhood how to spend time with oneself. That doesn’t mean he should be lonely, but that he shouldn’t grow bored with himself because people who grow bored in their own company seem to me in danger, from a self-esteem point of view.”\n\nAndrei Tarkovsky\n"
        },
  
      {
        "title"    : "Stages Of Grief",
        "url"      : "/stages-of-grief/",
        "content"  : "\n"
        },
  
      {
        "title"    : "Stress",
        "url"      : "/stress/",
        "content"  : "Chronic stress is harmful yet moderate levels of acute stress helps you grow\n"
        },
  
      {
        "title"    : "Distractions",
        "url"      : "/distractions/",
        "content"  : "A distracted mind can’t successfully pursue any activity, since a distracted mind absorbs nothing deeply\n\n– Seneca\n"
        },
  
      {
        "title"    : "Flow",
        "url"      : "/flow/",
        "content"  : "\n\n\n\n"
        },
  
      {
        "title"    : "How to start?",
        "url"      : "/how-to-start/",
        "content"  : "You need a driving emotion\n\nIt could be anger, greed, fear, hope, ..\n\nSome are more preferable than others\n\nFor example, curiosity depends on hope\n\nThis is also the gist of scientific method\n\n\n"
        },
  
      {
        "title"    : "Overcoming Obstacles",
        "url"      : "/overcoming-obstacles/",
        "content"  : "Overcoming obstacles is a great pleasure,\n\nso people make up fake struggles when they lack a genuine one\n\n“What man actually needs is not a tensionless state but rather the striving and struggling for some goal worthy of him” Viktor Frankl\n\n\n"
        },
  
      {
        "title"    : "Praise And Motivation",
        "url"      : "/praise-and-motivation/",
        "content"  : "“Recipients of praise do work harder, but only initially.\n\nOnce they sense the manipulation behind the appreciation, their productivity drops\n\nThe beauty of appreciation is spoiled by the lurking intent to get something out of them.”\n\nLeadership\n"
        },
  
      {
        "title"    : "Setting Rules",
        "url"      : "/setting-rules/",
        "content"  : "People adopt rules more easily when they understand the reason and can see how they align with their own incentives.\n\n“Simple rules produce complex behavior. Complex rules produce stupid behavior.”\n\nLeadership\n"
        },
  
      {
        "title"    : "Social Sciences",
        "url"      : "/social-sciences/",
        "content"  : "\n"
        },
  
      {
        "title"    : "Social Change",
        "url"      : "/social-change/",
        "content"  : "People imagine change as dramatic and revolutionary.\n\nYet most changes are very undramatic, slow changes in bureaucracy and systematic organization\n\nThe same for the change for worse\n\n\n"
        },
  
      {
        "title"    : "Social Class",
        "url"      : "/social-class/",
        "content"  : "\n"
        },
  
      {
        "title"    : "Social Groups",
        "url"      : "/social-groups/",
        "content"  : "I Can Tolerate Anything Except The Outgroup - Slate Star Codex\n"
        },
  
      {
        "title"    : "Chaos",
        "url"      : "/chaos/",
        "content"  : "Basic building blocks follow simple rules and create complex systems\n\nUnder a complexity threshold, there is convergence\n\nFor example, organic molecules converge to a finite number of possible stable states, proteins\n\nPlants and animals in a desert end up with a small set of strategies to survive\n\n\n\nAfter passing a complexity threshold, a system enters into the land of chaos.\n\nA minor change can create enormous differences\n\nThere is no ideal and optimal point to arrive,\n\nThe only way is to wait and see.\n\n\n\n"
        },
  
      {
        "title"    : "Systems Thinking",
        "url"      : "/systems/",
        "content"  : "A complex system that works is invariably found to have evolved from a simple system that worked. A complex system designed from scratch never works and cannot be patched up to make it work. You have to start over with a working simple system.\n\n– John Gall (Systemantics: How Systems Really Work and How They Fail)\n\nWhen systems look broken, it’s often because the function they’re really trying to serve is not what we think. Companies, schools, hospitals, politics, ..\n\nFeedback loops\n\nBottlenecks\n\nConstraints\n\nEquilibrium\n\nChurn\n\nCompunding\n\nAtomicity\n\nMargin of Safety\n\nBackup Systems\n\nCriticality\n\nEmergence\n"
        },
  
      {
        "title"    : "Urban Planning",
        "url"      : "/urban-planning/",
        "content"  : "College Campuses Are Designed at Human-Scale. Our Cities Can Be Too. (strongtowns.org)\n\nWe live in a world built mostly for cars\n\nMetropolis Japan\n\nSidewalk Garden - Zach Klein\n\n\n\n\n"
        },
  
      {
        "title"    : "Welcome, friend!",
        "url"      : "/about/",
        "content"  : "This is Selim, yet another being on Planet Earth\n\nWriting here to share and remember\n\nSkipped the authors of most quotes and paintings since,\n\n  they are easily accessible public information\n  when you don’t attribute, you can’t misattribute\n  what’s important is whether something makes sense by its content\n\n\n\n\ngithub.com/selimslab\n\nlinkedin.com/in/time\n"
        },
  
      {
        "title"    : "Pub",
        "url"      : "/pub/",
        "content"  : "pub\n"
        },
  
      {
        "title"    : "Resume",
        "url"      : "/resume/",
        "content"  : "Download as pdf\n\nlinkedin.com/in/time\n\ngithub.com/selimslab\n\nProjects\n"
        }
  
]
