[
  
    
      {
        "title"    : "Array",
        "category" : "",
        "tags"     : "",
        "url"      : "/algo/arr/",
        "date"     : "2022-09-25 16:35:07 +0300",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\ndef countPrimes(self, n: int) -&gt; int:\n    \"\"\"\n    Mark non-primes, \n    2s, 3s, \n    \"\"\"\n    primes = [True] * n\n    \n    for i in range(2, int(sqrt(n))+1):\n        if primes[i] is False: \n            continue \n        for j in range(i*i, n, i):\n            primes[j] = False\n            \n    return sum(1 if primes[i] else 0 for i in range(2,n))\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\nfunc plusOne(digits []int) []int {\n  /*\n  Given a non-empty array of digits representing a non-negative integer, plus one to the integer.\n  The digits are stored such that the most significant digit is at the head of the list, and each element in the array contain a single digit.\n  You may assume the integer does not contain any leading zero, except the number 0 itself.\n  Example 1:\n  Input: [1,2,3]\n  Output: [1,2,4]\n  Explanation: The array represents the integer 123.\n  Example 2:\n  Input: [4,3,2,1]\n  Output: [4,3,2,2]\n  Explanation: The array represents the integer 4321.\n  */\n    for i:= len(digits)-1; i&gt;=0; i-- {\n        if digits[i]&lt;9{\n            digits[i]++\n            return digits\n        }\n        digits[i] = 0\n    }\n    \n    //  cases like 100..   \n    newDigits := make([]int, len(digits)+1)\n    newDigits[0] = 1\n    return newDigits   \n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\"\"\"\nInput: [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"],\nOutput:\n[\n  [\"ate\",\"eat\",\"tea\"],\n  [\"nat\",\"tan\"],\n  [\"bat\"]\n]\n\"\"\"\ndef groupAnagrams(self, strs: List[str]) -&gt; List[List[str]]:\n    ans = collections.defaultdict(list)\n    for s in strs:\n        count = [0]*26\n        for c in s:\n            count[ord(c)-ord(\"a\")] +=1\n\n        ans[tuple(count)].append(s)\n\n    return ans.values()\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\"\"\"\nInput: nums = [3, 6, 1, 0]\nOutput: 1\nExplanation: 6 is the largest integer, and for every other number in the array x,\n6 is more than twice as big as x.  The index of value 6 is 1, so we return 1.\n\"\"\"\n\n\ndef dominant_index(nums) -&gt; int:\n    max_index = 0\n    max_num = nums[0]\n    for i, num in enumerate(nums):\n        if num &gt; max_num:\n            max_index = i\n            max_num = num\n\n    for i, num in enumerate(nums):\n        if max_num &lt; 2 * num and i != max_index:\n            return -1\n\n    return max_index\n\nassert dominant_index([3, 6, 1, 0]) == 1\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\"\"\"\nInput: 5\nOutput:\n[\n     [1],\n    [1,1],\n   [1,2,1],\n  [1,3,3,1],\n [1,4,6,4,1]\n]\n\"\"\"\n\ndef generate_pascals_triangle(self, numRows: int) -&gt; List[List[int]]:\n    pascal = list()\n\n    for i in range(1,numRows+1):\n        new_row = [1] * i\n        pascal.append(new_row)\n        for j in range(1,i-1):\n            pascal[i-1][j] = pascal[i-2][j-1] + pascal[i-2][j]\n\n    return pascal\n\nassert generate_pascals_triangle(5) == [\n    [1],\n    [1, 1],\n    [1, 2, 1],\n    [1, 3, 3, 1],\n    [1, 4, 6, 4, 1],\n]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\"\"\"\nInput: \nnums = [1, 7, 3, 6, 5, 6]\nOutput: 3\nExplanation: \nThe sum of the numbers to the left of index 3 (nums[3] = 6) is equal to the sum of numbers to the right of index 3.\nAlso, 3 is the first index where this occurs.\n\"\"\"\n\n\ndef pivot_index(self, nums) -&gt; int:\n    n = len(nums)\n\n    total = sum(nums)\n    left = 0\n    right = total\n\n    for i in range(n):\n        right -= nums[i]\n        if right == left:\n            return i\n        left += nums[i]\n\n    return -1\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n/*\n\nInput: nums = [6,5,4,8]\nOutput: [2,1,0,3]\n\nInput: nums = [7,7,7,7]\nOutput: [0,0,0,0]\n\n*/\nvar smallerNumbersThanCurrent = function(nums) {\n    const sorted = [...nums].sort((a, b) =&gt; a - b);\n    return nums.map(num =&gt; sorted.indexOf(num));\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n/*\nGiven nums = [2, 7, 11, 15], target = 9,\n\nBecause nums[0] + nums[1] = 2 + 7 = 9,\nreturn [0, 1].\n*/\n\npublic int[] twoSum(int[] nums, int target) {\n    Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();\n    for (int i = 0; i &lt; nums.length; i++) {\n        int complement = target - nums[i];\n        if (map.containsKey(complement)) {\n            return new int[] { map.get(complement), i };\n        }\n        map.put(nums[i], i);\n    }\n    throw new IllegalArgumentException(\"No two sum solution\");\n}\n\nassert new Solution().twoSum([2, 7, 11, 15], 9) == [0, 1]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n// UniqueMorseRepresentations returns number of possible morse codes\nfunc UniqueMorseRepresentations(words []string) int {\n    morse := []string{\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\n              \"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\n              \".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\n              \"--..\"}\n    tf := make(map[string]bool)\n    \n    for _, word := range words {\n        rep := \"\"\n        for _, r := range word {\n            c := rune(r)\n            i := int(c)-97 // 97 is ascii for a\n            rep +=  morse[i]\n        }\n        tf[rep] = true\n    }\n    return len(tf)\n}\n\n\n1\n2\n3\n# dedup \nl = [1, 2, 2, 3, 3, 3, 4, 4, 5]\nassert list(dict.fromkeys(l)) == [1, 2, 3, 4, 5]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n/*\nleft rotate a size n array by d  \n\n5 4\n1 2 3 4 5\n\n5 1 2 3 4\n\n*/\n\nimport java.io.*;\nimport java.util.*;\nimport java.math.*;\n\n\npublic class LeftRotation {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        int n = scan.nextInt();\n        int d = scan.nextInt();\n        int[] array = new int[n];\n        for(int i=0; i&lt;n;i++) {\n            array[(i+n-d)%n] = scan.nextInt();\n        }\n        for(int i=0; i&lt;n;i++) {\n            System.out.print(array[i] + \" \");\n        }      \n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\ndef longestConsecutive(nums: List[int]) -&gt; int:\n    numset = set(nums)\n    ans = 0\n\n    def streak(num):\n        streak = 1\n\n        while num + 1 in numset:\n            streak += 1\n            num += 1\n\n        return streak\n\n    for num in nums:\n        if num - 1 in numset:\n            continue\n        ans = max(ans, streak(num))\n\n    return ans\n\n\nassert longestConsecutive([100, 4, 200, 1, 3, 2]) == 4  # 1,2,3,4\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\nclass Solution {\npublic:\n    void rotate(vector&lt;vector&lt;int&gt;&gt;&amp; matrix) {\n        reverse(matrix.begin(), matrix.end());\n        for (int i = 0; i &lt; matrix.size(); i++) {\n            for (int j = i + 1; j &lt; matrix[i].size(); j++){\n                swap(matrix[i][j], matrix[j][i]);\n            }\n        }\n        \n    }\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\nGiven an integer array nums of length n and an integer target, find three integers in nums such that the sum is closest to target.\n\nReturn the sum of the three integers.\n\nYou may assume that each input would have exactly one solution.\n\n\nInput: nums = [-1,2,1,-4], target = 1\nOutput: 2\nExplanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).\n\n    def threeSumClosest(self, nums: List[int], target: int) -&gt; int:\n        \n        n = len(nums)\n        \n        nums.sort()\n\n        res = None\n        \n        resdif = float(\"inf\")\n        \n    \n        for i,num in enumerate(nums):\n  \n            \n            # skip dups \n            if i&gt;0 and num==nums[i-1]: \n                continue\n    \n            l = i+1\n            r = n-1\n            \n            while l&lt;r:\n\n                total = num + nums[l] + nums[r] \n\n                if total == target:\n                    return target \n                \n                # update diff \n                diff = abs(total-target)\n                if diff &lt; resdif:\n                    res = total\n                    resdif = diff \n                    \n                \n                if total &lt; target:\n                    l += 1\n                else:\n                    r -= 1\n\n        return res \n\n\nMapReduce\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\nfunction map(func, array) {\n    var result = [];\n    forEach(array, function (element) {\n      result.push(func(element));\n    });\n    return result;\n  }\n  \n  show(map(Math.round, [0.01, 2, 9.89, Math.PI]));\n\n\n  function reduce(combine, base, array) {\n    // or fold in lisp \n    forEach(array, function (element) {\n      base = combine(base, element);\n    });\n    return base;\n  }\n  \n  function add(a, b) {\n    return a + b;\n  }\n  \n  function sum(numbers) {\n    return reduce(add, 0, numbers);\n  }\n  \n  // or \n  \n  var array = [1, 2, 3, 4]\n  \n  const sum = (acc, value) =&gt; acc + value\n  const product = (acc, value) =&gt; acc * value\n  \n  var sumOfArrayElements = array.reduce(sum, 0)\n  var productOfArrayElements = array.reduce(product, 1)\n\n"
        },
    
      {
        "title"    : "Backtrack",
        "category" : "",
        "tags"     : "",
        "url"      : "/algo/backtrack/",
        "date"     : "2022-09-25 16:35:07 +0300",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\nbacktrack(current, args):\n    if done:\n        add to results\n        return \n    if go this way:\n        backtrack(current + x, updated args)\n    elif go that way:\n        backtrack(current + y, updated args)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\"\"\"\nn=3\n[\n  \"((()))\",\n  \"(()())\",\n  \"(())()\",\n  \"()(())\",\n  \"()()()\"\n]\nWe can start an opening bracket if we still have one (of n) left to place. \nAnd we can start a closing bracket if it would not exceed the number of opening brackets.\n\"\"\"\ndef generateParenthesis(self, N):\n    ans = []\n    def backtrack(S = '', left = 0, right = 0):\n        if len(S) == 2 * N:\n            ans.append(S)\n            return\n        if left &lt; N:\n            backtrack(S+'(', left+1, right)\n        if right &lt; left:\n            backtrack(S+')', left, right+1)\n\n    backtrack()\n    return ans\n\nassert generateParenthesis(3) == [\"((()))\", \"(()())\", \"(())()\", \"()(())\", \"()()()\"]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n\"\"\"\nfind all unique combinations in candidates where the candidate numbers sums to target.\nInput: candidates = [2,3,6,7], target = 7,\nA solution set is:\n[\n  [7],\n  [2,2,3]\n]\nInput: candidates = [2,3,5], target = 8,\nA solution set is:\n[\n  [2,2,2,2],\n  [2,3,3],\n  [3,5]\n]\n\"\"\"\n\ndef combinationSum(self, candidates: List[int], target: int) -&gt; List[List[int]]:\n\n    def backtrack(target, comb, idx):\n        if target == 0: # found a valid combination\n            res.append(comb)\n        for i, val in enumerate(candidates[idx:]):\n            if val &gt; target: break # dead end \n            backtrack(target-val, comb + [val], idx + i)\n\n    res = []\n    candidates.sort()\n    backtrack(target, [], 0)\n\n    return res \n\n\nSubsets\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\nsubsets(nums):\n  start with empty set \n\n  for num in nums:\n    newseen = []\n    for set in seen:\n      add (set + num) to newseen\n\n    merge newseen with seen\n\n"
        },
    
      {
        "title"    : "Bitworks",
        "category" : "",
        "tags"     : "",
        "url"      : "/algo/bits/",
        "date"     : "2022-09-25 16:35:07 +0300",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\nGet \nnum &amp; 1&lt;&lt;i \n\nSet \nnum | 1&lt;&lt;i\n\nClear \nnum &amp; ~(1&lt;&lt;i)\n\nmasks\n\n(1&lt;&lt;i)-1 = 0100 \n0100 - 1 = 0011\n\n-1 &lt;&lt; (i+1) = 1111 \n1111 &lt;&lt; 2 =  1100 \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\nfunc reverseBits(num uint32) uint32 {\n    /*\n    Input: 00000010100101000001111010011100\n    Output: 00111001011110000010100101000000\n    */\n    res := uint32(0)\n    power := uint32(31)\n    for num != 0 {\n        res += (num &amp; 1) &lt;&lt; power\n        num = num &gt;&gt; 1\n        power -= 1\n    }\n    return res\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\ndef readBinaryWatch(self, num: int) -&gt; List[str]:    \n    \"\"\"\n    Given a non-negative integer n which represents the number of LEDs that are currently on, \n    return all possible times a binary watch could represent.\n    Example:\n    Input: n = 1\n    Return: [\"1:00\", \"2:00\", \"4:00\", \"8:00\", \"0:01\", \"0:02\", \"0:04\", \"0:08\", \"0:16\", \"0:32\"]\n    \"\"\"\n    return ['%d:%02d' % (h, m)\n            for h in range(12) for m in range(60)\n            if (bin(h) + bin(m)).count('1') == num]\n\n"
        },
    
      {
        "title"    : "Tree, Binary Search Tree",
        "category" : "",
        "tags"     : "",
        "url"      : "/algo/bst/",
        "date"     : "2022-09-25 16:35:07 +0300",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\ndef sortedArrayToBST(self, nums: List[int]) -&gt; TreeNode:\n    \"\"\"\n    Given an array where elements are sorted in ascending order, convert it to a height balanced BST.\n    For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.\n    Example:\n    Given the sorted array: [-10,-3,0,5,9],\n    One possible answer is: [0,-3,9,-10,null,5], which represents the following height balanced BST:\n          0\n         / \\\n       -3   9\n       /   /\n     -10  5\n    \"\"\"\n    def go(left,right):\n        if left&gt;right:\n            return None\n        mid = (left+right) // 2\n        root = TreeNode(nums[mid])\n        root.left = go(left, mid-1)\n        root.right = go(mid+1, right)\n        return root\n\n    return go(0, len(nums)-1)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\ndef sortedListToBST(self, head: ListNode) -&gt; TreeNode:\n    \"\"\"\n  \n    Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.\n    For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.\n    Example:\n    Given the sorted linked list: [-10,-3,0,5,9],\n    One possible answer is: [0,-3,9,-10,null,5], which represents the following height balanced BST:\n          0\n         / \\\n       -3   9\n       /   /\n     -10  5\n    \"\"\"\n    if not head:\n        return None \n    if not head.next:\n        return TreeNode(head.val)\n\n    pre, slow, fast = None, head, head\n\n    # when fast is at the end, slow will be at mid \n    while fast and fast.next:\n        pre, slow, fast = slow, slow.next, fast.next.next\n    if pre:\n        # cut the parts from mid \n        pre.next = None\n\n\n    root = TreeNode(slow.val)\n    root.left = self.sortedListToBST(head)\n    root.right = self.sortedListToBST(slow.next)\n\n    return root \n\n"
        },
    
      {
        "title"    : "Dijkstra",
        "category" : "",
        "tags"     : "",
        "url"      : "/algo/dijkstra/",
        "date"     : "2022-09-25 16:35:07 +0300",
        "content"  : "\n\n"
        },
    
      {
        "title"    : "Dynamic",
        "category" : "",
        "tags"     : "",
        "url"      : "/algo/dynamic/",
        "date"     : "2022-09-25 16:35:07 +0300",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\ndef dynamic(n):\n    if base case:\n        return  \n\n    if n not in memo:\n        memo[n] = recurrence relation \n    \n    return memo[n]\n\n\nFibonacci\n\n1\n2\n3\n4\n5\n6\ndef fib(n):\n    if n &lt; 2:\n        return n\n    if n not in memo.keys():\n        memo[n] = fib(n - 1) + fib(n - 2)\n    return memo.get(n)\n\n\nStairs\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\nfunc climbStairs(n int) int {\n    memo := map[int]int{\n        1:1,\n        2:2,\n    }\n    var climb func(n int) int\n\n    climb = func (n int) int {\n        _, ok := memo[n];\n        if !ok {\n            memo[n] = climb(n-1) + climb(n-2)\n        }\n        return memo[n] \n    }\n    return climb(n)\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\nOn a staircase, the i-th step has some non-negative cost cost[i] assigned (0 indexed).\n\nOnce you pay the cost, you can either climb one or two steps. \nYou need to find minimum cost to reach the top of the floor, \nand you can either start from the step with index 0, or the step with index 1.\n\nExample 1:\nInput: cost = [10, 15, 20]\nOutput: 15\nExplanation: Cheapest is start on cost[1], pay that cost and go to the top.\n\nExample 2:\nInput: cost = [1, 100, 1, 1, 1, 100, 1, 1, 100, 1]\nOutput: 6\nExplanation: Cheapest is start on cost[0], and only step on 1s, skipping cost[3].\n\nNote:\ncost will have a length in the range [2, 1000].\nEvery cost[i] will be an integer in the range [0, 999].\n\nfunc minCostClimbingStairs(cost []int) int {\n    c1,c2 := cost[0], cost[1]\n    var min = func(a int,b int) int {\n        if a&lt;b{\n            return a\n        }\n        return b \n    }\n    \n    for i:=2; i&lt;len(cost); i++{\n        c1, c2 = c2, cost[i] + min(c1,c2)\n    }\n            \n    return min(c1,c2)\n            \n}\n\n\ncoinChange\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\ndef coinChange(coins: List[int], amount: int) -&gt; int:\n    # coinChange([1,2,5],11) == 3\n    min_coins = [0] + [float('inf')]*amount\n    for sub_amount in range(amount+1):\n        for coin in coins:\n            if coin &lt;= sub_amount:\n                min_coins[sub_amount] = min(min_coins[sub_amount], min_coins[sub_amount-coin]+1)\n    \n    if min_coins[-1] == float('inf'):\n        return -1\n    else: \n        return min_coins[-1]\n\n\nUnique BST\n\nhttps://leetcode.com/problems/unique-binary-search-trees\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\"\"\"\nInput: 3\nOutput: 5\nExplanation:\nGiven n = 3, there are a total of 5 unique BST's:\n\n   1         3     3      2      1\n    \\       /     /      / \\      \\\n     3     2     1      1   3      2\n    /     /       \\                 \\\n   2     1         2                 3\n\"\"\"\ndef numTrees(self, n: int) -&gt; int:  \n    dp = [0] * (n+1) # d[n] is the possible num of trees for n elements \n    dp[0] = dp[1] = 1 # there are only 1 possible tree for no element or 1 element \n\n    for i in range(2,n+1): # we know numTrees for 0 and 1 elements so we start from 2  \n        for j in range(1,i+1): \n            # eg. d2 = d1d1, d3= d2 + d1d1 + d2, d4 = d3 + d1d2+ d2d1 + d3\n            dp[i] += dp[j-1] * dp[i-j]\n\n    return dp[n]\n\n\nHouse Robber\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\ndef rob(nums: List[int]) -&gt; int:\n    # max robbery, no adjacent homes\n    if not nums:\n        return 0\n\n    dp = {}\n    n = len(nums)\n\n    def decide(i):\n        if i &lt; 2:\n            return max(nums[: i + 1])\n\n        if i not in dp:\n            rob = decide(i - 2) + nums[i]\n            skip = decide(i - 1)\n            dp[i] = max(rob, skip)\n            \n        return dp[i]\n\n\n    return decide(n - 1)\n\n# since we use only last 2, it could be optimized to \ndef rob():\n    for num in nums:\n        prev1, prev2 = max(prev2+num, prev1), prev1\n\ndef rob_circular(nums: List[int]) -&gt; int:\n\n    return max of (0 to n-2) vs (1 to n-1) homes\n\ndef rob_tree(nums: List[int]) -&gt; int:\n    node.rob = node.val + left.skip + right.skip\n    node.skip = max(left.rob, left.skip) + max(right.rob, right.skip)\n\n\nStocks with 1 day cooldown\n\nhttps://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/submissions/\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\nfunc maxProfit(prices []int) int {\n    /*\n    it's a state machine with 3 states \n\n    can_buy, can_sell, cool_down\n\n    can_buy -&gt; (buy) -&gt; can_sell -&gt; (sell) -&gt; cool_down -&gt; can_buy\n    */\n    \n    // the game starts with can_buy, \n    can_buy := 0  \n\n    // can_sell and cool_down are minInt because they will be possible after buying \n    can_sell := math.MinInt32 \n    cool_down :=  math.MinInt32 \n    \n    for _, p := range(prices) {\n        // either all has to be in a single line or we need to remember a prev value  \n        can_sell_prev := can_sell\n        can_sell = max(can_sell, can_buy-p) \n        can_buy = max(can_buy, cool_down) \n        cool_down = can_sell_prev + p \n    }\n    \n    // the game should end with no stock at hand \n    return max(can_buy, cool_down)\n}\n\n\nMin steps notepad\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n/*\nInitially on a notepad only one character 'A' is present. \n\nYou can perform two operations on this notepad for each step:\n\nCopy All: You can copy all the characters present on the notepad (partial copy is not allowed).\n\nPaste: You can paste the characters which are copied last time.\n \nGiven a number n. You have to get exactly n 'A' on the notepad \nby performing the minimum number of steps permitted. \n\nOutput the minimum number of steps to get n 'A'.\n\nExample:\nInput: 3\nOutput: 3\n\nExplanation:\nIntitally, we have one character 'A'.\nIn step 1, we use Copy All operation.\nIn step 2, we use Paste operation to get 'AA'.\nIn step 3, we use Paste operation to get 'AAA'.\n*/\n\nfunc minSteps(n int) int {\n    dp := make(map[int]int)\n    // the key insight is that it is always better to multiply\n    for i := 2; i&lt;=n; i++ {\n        dp[i] = i\n        // find the biggest factor of i\n        // then just copy it and paste it (i/j)-1 times \n        for j:= i/2; j&gt;1; j-- {\n            if i%j == 0 {\n                dp[i] = dp[j] + i/j // 1 copy + (i/j)-1 paste\n                break // we don't need a smaller factor \n            }\n        }\n    }\n    return dp[n]\n}\n\n\nEdit Distance\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\nimport \"fmt\"\n\ntype key struct {\n    x,y int \n}\n\nfunc dist(word1 string, word2 string, table map[key]int, i int, j int ) int {\n    if j == 0 {\n        return i\n    }\n    if i == 0 {\n        return j\n    }\n    \n    if val, ok := table[key{i,j}]; ok{\n        return val \n    }\n        \n    if word1[i-1] == word2[j-1] {\n        return dist(word1,word2,table, i-1, j-1)\n    } \n    \n    ins := dist(word1,word2,table, i-1, j ) + 1\n    del := dist(word1,word2,table, i, j-1 ) + 1\n    rep := dist(word1,word2,table, i-1, j-1 ) + 1\n\n    ans := min(del, ins ,rep)   \n    table[key{i,j}] = ans\n    return ans \n}\n\nfunc minDistance(word1 string, word2 string) int {\n    i, j := len(word1), len(word2)\n    table := map[key]int{}\n    return dist(word1,word2,table, i, j )\n}\n\n\nMin steps to make words same\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\ndef minDistance(word1: str, word2: str) -&gt; int:\n    \"\"\"\n        Given two strings word1 and word2, \n        return the minimum number of steps \n        required to make word1 and word2 the same.\n\n\n        Input: word1 = \"sea\", word2 = \"eat\"\n        Output: 2\n        Explanation: You need one step to make \"sea\" to \"ea\" \n        and another step to make \"eat\" to \"ea\".\n\n        Input: word1 = \"leetcode\", word2 = \"etco\"\n        Output: 4\n\n    \"\"\"\n    m,n = len(word1), len(word2)\n\n    if n&lt;m:\n        return minDistance(word2, word1)\n    \n    pre = [0]*(len(word1)+1)\n    dp = [0]*(len(word1)+1)\n\n    for i in range(1,n+1):\n        for j in range(1,m+1):\n            if word1[j-1] == word2[i-1]: \n                dp[j] = pre[j-1] + 1\n            else:\n                dp[j] = max(dp[j-1], pre[j])         \n        pre = dp[::]\n\n    lcs = dp[-1]\n    \n    del_ops = m+n-(2*lcs)\n    \n    return del_ops\n\n\nWord Break\n\nhttps://leetcode.com/problems/word-break/\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\nGiven a non-empty string s and a dictionary wordDict containing a list of non-empty words, determine if s can be segmented into a space-separated sequence of one or more dictionary words.\n\nNote:\n\nThe same word in the dictionary may be reused multiple times in the segmentation.\nYou may assume the dictionary does not contain duplicate words.\nExample 1:\n\nInput: s = \"leetcode\", wordDict = [\"leet\", \"code\"]\nOutput: true\nExplanation: Return true because \"leetcode\" can be segmented as \"leet code\".\nExample 2:\n\nInput: s = \"applepenapple\", wordDict = [\"apple\", \"pen\"]\nOutput: true\nExplanation: Return true because \"applepenapple\" can be segmented as \"apple pen apple\".\n             Note that you are allowed to reuse a dictionary word.\nExample 3:\n\nInput: s = \"catsandog\", wordDict = [\"cats\", \"dog\", \"sand\", \"and\", \"cat\"]\nOutput: false\n\ndef wordBreak(self, s: str, wordDict: List[str]) -&gt; bool:\n    \"\"\"\n    this can be broken down to subproblems\n    if we know a string is ok up to the 42nd index, it's enough to check from there \n    a list can keep track of this, ok = []\n    if up to ith index of s is ok, ok[i] will be True \n    eg. \n    s=\"cars\" \n    wordDict = [car, ca, rs]\n    start walking from the start\n    ok = [t,f,f,f,f,f]\n    c, ca -&gt; yes ca in dict, so ok becomes [t,f,t,f,f]\n    a, ar, ars nope\n    r, rs -&gt; yes rs in dict, ok becomes [t,f,t,f,t]\n    \"\"\"\n\n    ok = [True] + [False] * (len(s))\n\n    for i in range(1,len(s)+1): \n        for j in range(i): # j is the start index\n            # start point has to be ok, \n            # otherwise starting from here does not make sense\n            if ok[j] and s[j:i] in wordDict: \n                    # we are ok up to index j \n                    ok[i] = True\n                    break \n    return ok[-1]\n\n\nThe longest increasing subsequence\n\nhttps://leetcode.com/problems/longest-increasing-subsequence/\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n/*\nGiven an unsorted array of integers, find the length of longest increasing subsequence.\n\nExample:\n\nInput: [10,9,2,5,3,7,101,18]\nOutput: 4 \nExplanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4. \nNote:\n\nThere may be more than one LIS combination, it is only necessary for you to return the length.\nYour algorithm should run in O(n2) complexity.\nFollow up: Could you improve it to O(n log n) time complexity?\n*/\n\n\nfunc lengthOfLIS(nums []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    \n    lis := make([]int, len(nums)) // lis[i] holds the length of max LIS up to the index i \n\n    lis[0]=1 // there is number itself, so it starts from 1 \n    ans := 1 \n    \n    for i:=1; i&lt;len(nums); i++{\n        gt := 0 \n        for j:=0; j&lt;i; j++{\n            if nums[i]&gt;nums[j]{\n                // when you are greater than a previous number\n                // your sequence is at least as long as theirs or longer \n                gt = max(gt, lis[j]) \n            } \n        }\n        lis[i] = gt + 1 // the current number is bigger than gt numbers before, including \n        ans = max(ans,lis[i])\n    }\n    return ans \n}\n\n\nTarget Sum\n\nhttps://leetcode.com/problems/target-sum/\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n/*\nYou are given a list of non-negative integers, a1, a2, ..., an, and a target, S. Now you have 2 symbols + and -. For each integer, you should choose one from + and - as its new symbol.\n\nFind out how many ways to assign symbols to make sum of integers equal to target S.\n\nExample 1:\n\nInput: nums is [1, 1, 1, 1, 1], S is 3. \nOutput: 5\nExplanation: \n\n-1+1+1+1+1 = 3\n+1-1+1+1+1 = 3\n+1+1-1+1+1 = 3\n+1+1+1-1+1 = 3\n+1+1+1+1-1 = 3\n\nThere are 5 ways to assign symbols to make the sum of nums be target 3.\n*/\n\ntype pair struct {\n    x,y int \n}\n\nfunc calc(nums[]int, i int, current_sum int, S int, memo map[pair]int) int {\n    if count, ok := memo[pair{i,current_sum}]; ok{\n        return count\n    }\n    \n    if i == len(nums) {\n        if current_sum == S {\n            return 1\n        } else {\n            return 0 \n        }\n    }\n    \n    pos := calc(nums, i+1, current_sum+nums[i],S, memo)\n    neg := calc(nums, i+1, current_sum-nums[i],S, memo)\n    memo[pair{i,current_sum}] = pos + neg \n    return memo[pair{i,current_sum}]\n    }\n\n\nfunc findTargetSumWays(nums []int, S int) int {\n    memo := map[pair]int{}\n    return calc(nums, 0,0,S, memo)\n}\n\n\nmaximalSquare\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n\"\"\"\nGiven a 2D binary matrix filled with 0's and 1's, \nfind the largest square containing only 1's and return its area.\n1 0 1 0 0\n1 0 1 1 1\n1 1 1 1 1\n1 0 0 1 0\nOutput: 4\n\"\"\"\n\n\ndef maximalSquare(self, matrix: List[List[str]]) -&gt; int:\n    rows = len(matrix)\n    if rows:\n        cols = len(matrix[0])\n    else:\n        cols = 0\n\n    dp = [0] * (cols + 1)\n    maxsq = 0\n    prev = 0\n\n    for i in range(1, rows + 1):\n        for j in range(1, cols + 1):\n            temp = dp[j]\n            if matrix[i - 1][j - 1] == \"1\":\n                min_prev = min(dp[j - 1], prev)\n                min_cur = min(min_prev, dp[j])\n                dp[j] = min_cur + 1\n                maxsq = max(maxsq, dp[j])\n            else:\n                dp[j] = 0\n\n            prev = temp\n\n    return maxsq * maxsq\n\n\nMin path sum\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\nfunc minPathSum(grid [][]int) int {\n\t/*\n\tInput: grid = [[1,3,1],[1,5,1],[4,2,1]]\n\tOutput: 7\n\tExplanation: Because the path 1 → 3 → 1 → 1 → 1 minimizes the sum.\n\t*/\n    rows := len(grid)\n    cols := len(grid[0])\n    \n    // sum top row\n    for j := 1; j &lt; cols; j++ {\n        grid[0][j] += grid[0][j-1]\n    }\n    \n    // sum left column\n    for j := 1; j &lt; rows; j++ {\n        grid[j][0] += grid[j-1][0]\n    }\n    \n    for i := 1; i &lt; rows; i++ {\n        for j := 1; j &lt; cols; j++ {\n            grid[i][j] += min(grid[i-1][j],grid[i][j-1])\n        }\n    }\n    \n    return grid[rows-1][cols-1]\n}\n\n"
        },
    
      {
        "title"    : "Graph",
        "category" : "",
        "tags"     : "",
        "url"      : "/algo/graph/",
        "date"     : "2022-09-25 16:35:07 +0300",
        "content"  : "Search\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\ndfs(node):\n    if node is not visited:\n        visit node \n        for n in neighbours:\n            dfs(n)\n\nbfs(start_node):\n    add start_node to q \n    while q:\n        get a node from q\n        if node is not visited:\n            add neighbors to q \n            visit node \n\n\nSort\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\ntopo(graph):  \n\n    tfs(node):\n        for n in neighbours:\n            if n is not seen:\n                tfs(n)\n\n        if node is not seen:\n            mark as seen \n            add to stack \n\n    for node in graph:\n        tfs(node) \n\n    return reversed stack \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\nfrom collections import deque\n\n\ndef bfs(graph, start_node):\n    queue = deque()\n    queue.append(start_node)\n\n    result = list()\n\n    while queue:\n        node = queue.popleft()\n        if node not in result:\n            queue += graph.get(node, [])\n            result.append(node)\n\n    return result\n\n\ndef dfs(graph, start_node, visited=None):\n    if not visited:\n        visited = list()\n\n    if start_node not in visited:\n        visited.append(start_node)\n        for node in graph.get(start_node, []):\n            dfs(graph, node, visited)\n\n    return visited\n\n\ndef toposort(graph):\n    visited = list()\n\n    def topo(node):\n        for neigh in graph.get(node, []):\n            if neigh not in visited:\n                topo(neigh)\n\n        # mark as visited only after visiting all neighbours\n        if node not in visited:\n            visited.append(node)\n\n    for node in graph:\n        topo(node)\n\n    return visited[::-1]\n\n\ndef test():\n    graph1 = {\n        1: [2, 3],\n        2: [4, 5],\n        3: [6],\n    }\n\n    assert bfs(graph1, 1) == [1, 2, 3, 4, 5, 6]\n    assert dfs(graph1, 1) == [1, 2, 4, 5, 3, 6]\n    assert toposort(graph1) == [1, 3, 6, 2, 5, 4]\n\n    graph2 = {\n        6: [4, 5],\n        5: [2, 0],\n        4: [0, 1],\n        2: [3],\n        3: [1],\n    }\n\n    assert bfs(graph2, 6) == [6, 4, 5, 0, 1, 2, 3]\n    assert dfs(graph2, 6) == [6, 4, 0, 1, 5, 2, 3]\n    assert toposort(graph2) == [6, 5, 2, 3, 4, 1, 0]\n\n\nif __name__ == \"__main__\":\n    test()\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\npackage main\n\nimport \"fmt\"\n\nfunc bfs(graph map[string][]string, name string) []string {\n\n\tvar searchQueue []string\n\tsearchQueue = append(searchQueue, graph[name]...)\n\tsearched := make(map[string]bool)\n\n\tres := []string{}\n\n\tfor len(searchQueue) &gt; 0 {\n\t\tvar person = searchQueue[0]\n\t\tsearchQueue = searchQueue[1:]\n\t\tpersonAlreadySearched := searched[person]\n\n\t\tif !personAlreadySearched {\n\t\t\tres = append(res, person)\n\t\t\tsearchQueue = append(searchQueue, graph[person]...)\n\t\t\tsearched[person] = true\n\t\t}\n\n\t}\n\treturn res\n\n}\n\nfunc dfs(graph map[string][]string, start_node string, visited map[string]bool) []string {\n\tif _, ok := visited[start_node]; !ok {\n\t\tvisited[start_node] = true\n\t\tfor _, node := range graph[start_node] {\n\t\t\tdfs(graph, node, visited)\n\t\t}\n\t}\n\n\tkeys := make([]string, 0, len(visited))\n\tfor k := range visited {\n\t\tkeys = append(keys, k)\n\t}\n\n\treturn keys\n\n}\n\nfunc main() {\n\tgraph := make(map[string][]string)\n\tgraph[\"you\"] = []string{\"alice\", \"bob\", \"claire\"}\n\tgraph[\"bob\"] = []string{\"anuj\", \"peggy\"}\n\tgraph[\"alice\"] = []string{\"peggy\"}\n\tgraph[\"claire\"] = []string{\"thom\", \"jonny\"}\n\tgraph[\"anuj\"] = []string{}\n\tgraph[\"peggy\"] = []string{}\n\tgraph[\"thom\"] = []string{}\n\tgraph[\"jonny\"] = []string{}\n\n\tfmt.Println(bfs(graph, \"you\"))\n\t// [alice bob claire peggy anuj thom jonny]\n\n\tfmt.Println(dfs(graph, \"you\", make(map[string]bool)))\n\t// [you alice peggy bob anuj claire thom jonny]\n\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\ndef levelOrder(self, root: \"TreeNode\") -&gt; \"List[List[int]]\":\n    levelorder = list()\n\n    current_level = [root]\n\n    while root and current_level:\n        next_level = list()\n        current_vals = list()\n\n        for node in current_level:\n            current_vals.append(node.val)\n\n            if node.left:\n                next_level.append(node.left)\n\n            if node.right:\n                next_level.append(node.right)\n\n        levelorder.append(current_vals)\n        current_level = next_level\n\n    return levelorder\n\n"
        },
    
      {
        "title"    : "Greedy",
        "category" : "",
        "tags"     : "",
        "url"      : "/algo/greedy/",
        "date"     : "2022-09-25 16:35:07 +0300",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\"\"\"\nInput: [[1,4],[4,5]]\nOutput: [[1,5]]\nExplanation: Intervals [1,4] and [4,5] are considered overlapping.\n\"\"\"\n\ndef mergeIntervals(self, intervals):\n    intervals.sort(key=lambda x: x.start)\n\n    merged = []\n    for interval in intervals:\n        # if the list of merged intervals is empty or if the current\n        # interval does not overlap with the previous, simply append it.\n        if not merged or merged[-1].end &lt; interval.start:\n            merged.append(interval)\n        else:\n            # otherwise, there is overlap, so we merge the current and previous\n            # intervals.\n            merged[-1].end = max(merged[-1].end, interval.end)\n\n    return merged\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n\"\"\"\nInput: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\nOutput: 8\nExplanation: \nA -&gt; B -&gt; idle -&gt; A -&gt; B -&gt; idle -&gt; A -&gt; B\nThere is at least 2 units of time between any two same tasks.\n\n\nInput: tasks = [\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"], n = 2\nOutput: 16\nExplanation: \nOne possible solution is\nA -&gt; B -&gt; C -&gt; A -&gt; D -&gt; E -&gt; A -&gt; F -&gt; G -&gt; A -&gt; idle -&gt; idle -&gt; A -&gt; idle -&gt; idle -&gt; A\n\"\"\"\nimport collections \n\ndef leastInterval(self, tasks: List[str], n: int) -&gt; int:        \n\n    # tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"]\n    # n = 2 \n\n    counts = list(collections.Counter(tasks).values()) # [3,3]\n    max_count = max(counts) # 3\n    num_of_chars_with_max_count = counts.count(max_count) # 2, A and B\n\n    num_of_chunks_with_idles = max_count-1 # 2  -&gt; A  A  A\n\n    # either a task will fill an empty place or the place stays idle, \n    # either way the chunk size stays the same  \n    length_of_a_chunk_with_idle = n+1  # 3 -&gt; A _ _ A _ _ A \n\n    # on the final chunk, there will only be most frequent letters \n    length_of_the_final_chunk = num_of_chars_with_max_count  # 2  \n\n    length_of_all_chunks = (num_of_chunks_with_idles*length_of_a_chunk_with_idle) + length_of_the_final_chunk # 2*3 + 2 = 8 \n    # -&gt; A B _ A B _ A B \n\n    return max(len(tasks), length_of_all_chunks)\n\nassert leastInterval([\"A\", \"A\", \"A\", \"B\", \"B\", \"B\"], 2) == 8\n# A -&gt; B -&gt; idle -&gt; A -&gt; B -&gt; idle -&gt; A -&gt; B\n# There is at least 2 units of time between any two same tasks.\n\nassert (\n    leastInterval([\"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\"], n=2)\n    == 16\n)\n# One possible solution is\n# A -&gt; B -&gt; C -&gt; A -&gt; D -&gt; E -&gt; A -&gt; F -&gt; G -&gt; A -&gt; idle -&gt; idle -&gt; A -&gt; idle -&gt; idle -&gt; A\n\n\n"
        },
    
      {
        "title"    : "Linked Lists",
        "category" : "",
        "tags"     : "",
        "url"      : "/algo/linked-list/",
        "date"     : "2022-09-25 16:35:07 +0300",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\nimport \"sort\"\n\nfunc sortList(head *ListNode) *ListNode {\n\tvals := []int{}\n\ttemp := head\n\tfor temp != nil {\n\t\tvals = append(vals, temp.Val)\n\t\ttemp = temp.Next\n\t}\n\tsort.Ints(vals)\n\n\tp := &amp;ListNode{0, nil}\n\tt := p\n\tfor _, val := range vals {\n\t\tp.Next = &amp;ListNode{val, nil}\n\t\tp = p.Next\n\t}\n\treturn t.Next\n}\n\n\nhttps://leetcode.com/problems/sort-list/\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\ntype ListNode struct {\n    Val int\n    Next *ListNode\n}\n\nimport \"sort\"\n\nfunc sortList(head *ListNode) *ListNode {\n    vals := []int{}\n    temp := head\n    for temp != nil {\n        vals = append(vals,temp.Val)\n        temp = temp.Next\n    }\n    sort.Ints(vals)\n    \n    t := head\n    for _, val := range(vals) {\n        t.Val = val\n        t = t.Next \n    }\n    return head\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\"\"\"\nDetect a cycle in a linked list. Note that the head pointer may be 'None' if the list is empty.\nA Node is defined as: \n \nclass Node(object):\n  def __init__(self, data = None, next_node = None):\n      self.data = data\n      self.next = next_node\n\"\"\"\n\n\ndef has_cycle(head):\n    if not head:\n        return False\n    slow, fast = head, head.next\n    \n    while slow != fast:\n        if fast is None or fast.next is None:\n            return False\n        slow = slow.next\n        fast = fast.next.next\n    \n    return True\n\n\n1\n2\n3\n4\n5\n6\n7\n8\ndef getIntersectionNode(self, headA: ListNode, headB: ListNode) -&gt; ListNode:\n    p1, p2 = headA, headB\n\n    while p1 or p2:\n        if p1 is p2:\n            return p1 \n        p1 = headB if not p1 else p1.next\n        p2 = headA if not p2 else p2.next\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\"\"\"\nInput:  1-&gt;2-&gt;6-&gt;3-&gt;4-&gt;5-&gt;6, val = 6\nOutput: 1-&gt;2-&gt;3-&gt;4-&gt;5\n\"\"\"\n\ndef removeElements(self, head: ListNode, val: int) -&gt; ListNode:\n    \n    head, head.next = ListNode(0), head\n    p = head\n    \n    while p.next:\n        if p.next.val == val:\n            p.next = p.next.next\n        else:\n            p = p.next\n            \n    return head.next\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n/*\nGiven linked list: 1-&gt;2-&gt;3-&gt;4-&gt;5, and n = 2.\nAfter removing the second node from the end, the linked list becomes 1-&gt;2-&gt;3-&gt;5.\n*/\n\npublic ListNode removeNthFromEnd(ListNode head, int n) {\n    ListNode dummy = new ListNode(0);\n    dummy.next = head;\n    ListNode first = dummy;\n    ListNode second = dummy;\n    // Advances first pointer so that the gap between first and second is n nodes apart\n    for (int i = 1; i &lt;= n + 1; i++) {\n        first = first.next;\n    }\n    // Move first to the end, maintaining the gap\n    while (first != null) {\n        first = first.next;\n        second = second.next;\n    }\n    second.next = second.next.next;\n    return dummy.next;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n/*\nInput:\n[\n  1-&gt;4-&gt;5,\n  1-&gt;3-&gt;4,\n  2-&gt;6\n]\nOutput: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6\n*/\n\npublic ListNode mergeKLists(ListNode[] lists) {\n    List&lt;Integer&gt; l = new ArrayList&lt;Integer&gt;();\n   \n    for (ListNode ln : lists) {\n        while (ln != null) {\n            l.add(ln.val);\n            ln = ln.next;\n        }\n    }\n   \n    Collections.sort(l);\n \n    ListNode head = new ListNode(0);\n    ListNode h = head;\n    for (int i : l) {\n        ListNode t = new ListNode(i);\n        h.next = t;\n        h = h.next;\n    }\n    h.next = null;\n    return head.next;\n}\n\n\n"
        },
    
      {
        "title"    : "Stack, Heap, Queue",
        "category" : "",
        "tags"     : "",
        "url"      : "/algo/q/",
        "date"     : "2022-09-25 16:35:07 +0300",
        "content"  : "Stack\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\ndef dedup(S: str) -&gt; str:\n    # Repeatedly dedup adjacent letter until no longer can.\n    stack = [\"\"]\n    for s in S:\n        if s == stack[-1]:\n            stack.pop()\n        else:\n            stack.append(s)\n\n    return \"\".join(stack)\n\n\nassert dedup(\"abbaca\") == \"ca\"\n\n\ndef dedup_k(s: str, k: int) -&gt; str:\n    # Repeatedly dedup adjacent K letters until no longer can.\n\n    stack = []  #  keep (char, count) tuples\n    for c in s:\n        if stack and stack[-1][0] == c:\n            stack[-1][1] += 1\n            if stack[-1][1] == k:\n                stack.pop()\n        else:\n            stack.append([c, 1])\n\n    return \"\".join(c * count for c, count in stack)\n\n\nassert dedup_k(\"deeedbbcccbdaa\", 3) == \"aa\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\ndef decodeString(self, s):\n    \"\"\"\n    s = \"3[a]2[bc]\", return \"aaabcbc\".\n    s = \"3[a2[c]]\", return \"accaccacc\".\n    s = \"2[abc]3[cd]ef\", return \"abcabccdcdcdef\".\n    \"\"\"\n\n    stack = []\n    coeff = 0\n    ans = \"\"\n\n    for c in s:\n        if c == \"[\":\n            stack.append(ans)\n            stack.append(coeff)\n            ans = \"\"\n            coeff = 0\n        elif c == \"]\":\n            num = stack.pop()\n            prevString = stack.pop()\n            ans = prevString + num * ans\n        elif c.isdigit():\n            coeff = coeff * 10 + int(c)\n        else:\n            ans += c\n\n    return ans\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\ndef check_brackets(test_iterable):\n    if len(test_iterable) % 2 != 0:\n        return False\n\n    pairs = {\"{\": \"}\", \"[\": \"]\", \"(\": \")\"}\n    s = []\n\n    for bracket in test_iterable:\n        if bracket in pairs:\n            s.append(bracket)\n        elif s and bracket == pairs[s.pop()]:\n            continue\n        else:\n            return False\n\n    return not s\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\ndef longestValidParentheses(self, s: str) -&gt; int:\n    maxlen = 0\n\n    l = r = 0\n\n    for c in s:\n        if c == \"(\":\n            l += 1\n        else:\n            r += 1\n\n        if l == r:\n            maxlen = max(maxlen, 2 * l)\n        elif r &gt; l:\n            l = r = 0\n\n    l = r = 0\n\n    for c in reversed(s):\n        if c == \")\":\n            l += 1\n        else:\n            r += 1\n\n        if l == r:\n            maxlen = max(maxlen, 2 * l)\n        elif r &gt; l:\n            l = r = 0\n\n    return maxlen\n\n\nassert longestValidParentheses(\"()()())\") == 4\nassert longestValidParentheses(\"(()\") == 2\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n/*\nInput: \")()())\"\nOutput: 4\nExplanation: The longest valid parentheses substring is \"()()\"\n*/\n\n// stack, linear time and space \npublic int longestValidParentheses(String s) {\n    int maxans = 0;\n    Stack&lt;Integer&gt; stack = new Stack&lt;&gt;();\n    stack.push(-1);\n    for (int i = 0; i &lt; s.length(); i++) {\n        if (s.charAt(i) == '(') {\n            stack.push(i);\n        } else {\n            stack.pop();\n            if (stack.empty()) {\n                stack.push(i);\n            } else {\n                maxans = Math.max(maxans, i - stack.peek());\n            }\n        }\n    }\n    return maxans;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\ndef dailyTemperatures(T):\n    \"\"\"\n    how many days you would have to wait until a warmer temperature ? \n    \"\"\"\n\n    ans = [0] * len(T)\n    stack = []\n    for i, t in enumerate(T):\n        while stack and T[stack[-1]] &lt; t:\n            cur = stack.pop()\n            ans[cur] = i - cur\n        stack.append(i) \n\n    return ans\n\n\nt = [73, 74, 75, 71, 69, 72, 76, 73]\nassert dailyTemperatures(t) ==  [1, 1, 4, 2, 1, 1, 0, 0]\n\n\nQueue\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n/*\nGiven a positive integer n, \nfind the least number of perfect square numbers which sum to n.\n(for example, 1, 4, 9, 16, ...)\n\nExample 1:\n\nInput: n = 12\nOutput: 3 \nExplanation: 12 = 4 + 4 + 4.\n\n\nExample 2:\n\nInput: n = 13\nOutput: 2\nExplanation: 13 = 4 + 9.\n*/\n\nfunc numSquares(n int) int {\n    var perfect_squares []int\n    for i:= 1; i*i&lt;=n; i++{\n        if i*i == n{\n            return 1\n        }\n        perfect_squares = append(perfect_squares, i*i)\n    }\n    \n    ans := 0 \n    queue := []int{n}\n    \n    for len(queue) != 0  {\n        /*\n        ans 1, queue is [12] \n        ans 2, the paths are 1,4,9 -&gt; queue becomes [11 8 3], \n        following the paths 1,4,9, the new level becomes [10 7 2 7 4 2]\n        ans = 3, it returns at 4, the shortest path to 0 turns out to be 12 -&gt; 8 -&gt; 4 -&gt; 0 \n        */\n        ans += 1\n        var next_level []int\n        for _, num := range(queue){\n            for _, perf := range(perfect_squares){\n                if num == perf{\n                    return ans\n                }\n                if num&lt;perf{\n                    break\n                }\n                next_level = append(next_level, num-perf)\n            } \n            \n        }\n        queue = next_level \n    }\n    return ans \n}\n\n\nHeap\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\nimport heapq\n\n\nclass KthLargest:\n    \"\"\"\n    find the kth largest element in a stream.\n    in the sorted order, not the kth distinct element.\n    \"\"\"\n\n    def __init__(self, k: int, nums: List[int]):\n        self.pool = nums\n        self.k = k\n        heapq.heapify(self.pool)\n        while len(self.pool) &gt; k:\n            heapq.heappop(self.pool)\n\n    def add(self, val: int) -&gt; int:\n        if len(self.pool) &lt; self.k:\n            heapq.heappush(self.pool, val)\n        elif val &gt; self.pool[0]:\n            heapq.heapreplace(self.pool, val)\n        return self.pool[0]\n\n\nKthLargest(3, [4, 5, 8, 2])\nkthLargest.add(3)  # returns 4\nkthLargest.add(5)  # returns 5\nkthLargest.add(10)  # returns 5\nkthLargest.add(9)  # returns 8\nkthLargest.add(4)  # returns 8\n\n"
        },
    
      {
        "title"    : "Search",
        "category" : "",
        "tags"     : "",
        "url"      : "/algo/search/",
        "date"     : "2022-09-25 16:35:07 +0300",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\ndef binary_search(nums, target)-&gt;int:\n    while low &lt;= high:\n        if target at mid:\n            return mid \n        if nums[mid] &lt; target:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return -1\n\n"
        },
    
      {
        "title"    : "Sliding Window",
        "category" : "",
        "tags"     : "",
        "url"      : "/algo/sliding/",
        "date"     : "2022-09-25 16:35:07 +0300",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\nimport collections\n\ndef characterReplacement(s:str, k:int):\n    counter = collections.Counter()\n    start = 0\n    longest_window = 0 \n\n    current_window_size = lambda: end-start+1\n\n    for end, c in enumerate(s):\n        counter[c] += 1\n        count_of_most_freq_char_in_window = counter.most_common(1)[0][1]\n        count_of_different_chars_in_window = current_window_size() - count_of_most_freq_char_in_window\n        has_enough_replacements = count_of_different_chars_in_window &lt;= k\n        if not has_enough_replacements: \n            # shrink_the_window\n            counter[s[start]] -= 1\n            start += 1\n            \n        longest_window = max(longest_window, current_window_size())\n    return longest_window  \n\ns = \"ABAB\"\nk = 2\nassert characterReplacement(s,k) == 4 \n\ns = \"AABABBA\"\nk = 1\nassert characterReplacement(s,k) == 4 \n\n\nhttps://leetcode.com/problems/sliding-window-maximum/\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n/*\nInput: nums = [1,3,-1,-3,5,3,6,7], k = 3\nOutput: [3,3,5,5,6,7]\nExplanation: \nWindow position                Max\n---------------               -----\n[1  3  -1] -3  5  3  6  7       3\n 1 [3  -1  -3] 5  3  6  7       3\n 1  3 [-1  -3  5] 3  6  7       5\n 1  3  -1 [-3  5  3] 6  7       5\n 1  3  -1  -3 [5  3  6] 7       6\n 1  3  -1  -3  5 [3  6  7]      7\n*/\n\nfunc max(nums ...int) int {\n    max := nums[0]\n    for _, i := range nums {\n        if i &gt; max {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc maxSlidingWindow2(nums []int, k int) []int {\n    ans := []int{}    \n    for i:=0; i&lt;len(nums)-k+1;i++{\n        ans = append(ans, max(nums[i:i+k]...))\n    }\n    return ans \n}\n\n\nfunc maxSlidingWindow(nums []int, k int) []int {\n\tans := []int{}\n\tq := make([]int, 0)\n\n\tfor i := 0; i &lt; len(nums); i++ {\n\t\t// if a queue element is less than the new number, pop it \n\t\tfor len(q) &gt; 0 &amp;&amp; nums[i] &gt; q[len(q)-1] {\n\t\t\tq = q[:len(q)-1]\n\t\t}\n\n\t\tq = append(q, nums[i])\n\n\t\tindex_to_exit := i-k+1 // this index will go out of window in the next iteration \n\t\tif index_to_exit &gt;= 0 {\n\t\t    ans = append(ans, q[0])\n\t\t    // If the greatest element in q is about to exit window, remove it from q\n\t\t    if nums[index_to_exit] == q[0] {\n\t\t\tq = q[1:]\n\t\t    }\n\t\t}\n\t}\n\treturn ans\n}\n\n"
        },
    
      {
        "title"    : "Sort",
        "category" : "",
        "tags"     : "",
        "url"      : "/algo/sort/",
        "date"     : "2022-09-25 16:35:07 +0300",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\ndef quick_sort(data):\n    # base case\n    if len(data) &lt; 2:\n        return data\n    # recursion\n    else:\n        less = list()\n        greater = list()\n        equal = list()\n        pivot = data[int(len(data)/2)]\n        for i in data:\n            if i &lt; pivot:\n                less.append(i)\n            elif i == pivot:\n                equal.append(i)\n            else:\n                greater.append(i)\n\n        return quick_sort(less) + equal + quick_sort(greater)\n\n\nif __name__ == \"__main__\":\n    print(quick_sort([9, 7, 5, 4, 6, 8, 12, 1, 26, 1, 1]))\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\ndef selection_sort(data):\n    sorted_list = list()\n    for i in range(len(data)):\n        smallest_index = data.index(min(data))\n        sorted_list.append(data.pop(smallest_index))\n    return sorted_list\n\nif __name__ == \"__main__\":\n    print(selection_sort([9, 7, 5, 4, 6, 8, 12, 1, 26, 1, 1]))\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\nfunction findUnsortedSubarray(nums){\n  return nums.slice()\n    .sort((a, b) =&gt; a - b)\n    .reduce((acc, curr, idx) =&gt; acc + (curr === nums[idx] ? ' ' : 'x'), '')\n    .trim().length;\n}\n\nlet ans = findUnsortedSubarray([2, 6, 4, 8, 10, 9, 15])\nconsole.log(ans)\n// answer is 5 \n// it's enough to sort [6, 4, 8, 10, 9] to make all sorted \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\ndef findUnsortedSubarray(nums) -&gt; int:\n    is_same = [a == b for a, b in zip(nums, sorted(nums))]\n    if all(is_same):\n        return 0\n    else:\n        first_index = is_same.index(False)\n        last_index = len(nums) - is_same[::-1].index(False)\n        return last_index - first_index\n\n\n\"\"\"\n[2, 6, 4, 8, 10, 9, 15]\n[t,f,... f,t]\n0,1, .. 5,6\nfalse starts at index 1, ends at 5 \n\"\"\"\n\nassert findUnsortedSubarray([2, 6, 4, 8, 10, 9, 15]) == 5\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\nfrom heapq import heappush, heappop\n\n\ndef heapsort(iterable):\n    h = []\n    for val in iterable:\n        heappush(h, val)\n    # or just h = heapify(iterable)\n    return [heappop(h) for i in range(len(h))]\n\n\nassert heapsort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n"
        },
    
      {
        "title"    : "String",
        "category" : "",
        "tags"     : "",
        "url"      : "/algo/str/",
        "date"     : "2022-09-25 16:35:07 +0300",
        "content"  : "1\n2\n3\n4\ndef reverse_string(s):\n    if len(s) == 1:\n        return s\n    return s[-1] + rev(s[:-1])\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\ndef generate_ngrams(s, n):\n    # Convert to lowercases\n    s = s.lower()\n\n    # Replace all none alphanumeric characters with spaces\n    s = re.sub(r\"[^a-zA-Z0-9\\s]\", \" \", s)\n\n    # Break sentence in the token, remove empty tokens\n    tokens = [token for token in s.split(\" \") if token != \"\"]\n\n    n_grams = []\n\n    for i in range(len(tokens)):\n        n_gram = \" \".join(tokens[i : i + n])\n        n_grams.append(n_gram)\n\n    return n_grams\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n# with 2 pointers\ndef reverseOnlyLetters(S: str) -&gt; str:\n    n = len(S)\n    left = 0\n    right = n - 1\n    res = list(S)\n\n    while right &gt; 0 and not res[right].isalpha():\n        right -= 1\n\n    while left &lt; right:\n        if res[left].isalpha():\n            res[left], res[right] = res[right], res[left]\n            right -= 1\n            while right &gt; 0 and not res[right].isalpha():\n                right -= 1\n\n        left += 1\n\n    return \"\".join(res)\n\n\n#  a simpler way\ndef reverseOnlyLetters(S: str) -&gt; str:\n    stack = [c for c in S if c.isalpha()]\n    ans = [stack.pop() if c.isalpha() else c for c in S]\n\n    return \"\".join(ans)\n\n\nassert reverseOnlyLetters(\"ab-cd\") == \"dc-ba\"\nassert reverseOnlyLetters(\"a-bC-dEf-ghIj\") == \"j-Ih-gfE-dCba\"\nassert reverseOnlyLetters(\"Test1ng-Leet=code-Q!\") == \"Qedo1ct-eeLg=ntse-T!\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\nimport heapq\nfrom heapq import heappush, heappop, heapify\n\ndef longestDiverseString(a: int, b: int, c: int) -&gt; str:\n    \n    ans = 0\n    \n    # get 2 from max, 1 from min \n    \n    minh = [a,b,c]\n    maxh = [a,b,c]\n\n    heapify(minh)\n    heapq._heapify_max(maxh)\n    \n    \n    maxnum = heappop(maxh)\n    minnum = heappop(minh)\n\n\n    while maxnum or minnum:\n        if maxnum:\n            print(\"maxh\",maxh)\n\n            if maxnum &gt; 1:\n                heappush(maxh, maxnum-2)\n                ans += 2\n            \n\n            else:\n                ans += 1\n            \n            if maxh:\n                maxnum = heappop(maxh)\n                \n        if minnum:\n            print(\"minh\",minh)\n            if minnum &gt; 0:\n                ans += 1\n                heappush(minh, minnum-1)\n\n                minnum = heappop(minh)\n\n    print(ans)\n    return ans \n\n\nlongestDiverseString(7,1,1)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\ndef string_compression(string):\n    counter = 0\n    compressed = \"\"\n    previous_letter = string[0]\n\n    for letter in string:\n        if letter != previous_letter:\n            compressed = compressed + previous_letter + str(counter)\n            counter = 0\n        counter += 1\n        previous_letter = letter\n\n    compressed = compressed + previous_letter + str(counter)\n\n    return compressed\n\n\nassert string_compression(\"aaaabbcccccaaabb\") == \"a4b2c5a3b2\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\ndef longest_common_prefix(words) -&gt; \"str\":\n    if not words:\n        return \"\"\n\n    shortest_word = min(words, key=len)\n\n    for i, letter in enumerate(shortest_word):\n        for s in words:\n            if s[i] != letter:\n                return shortest_word[:i]\n\n    return shortest_word\n\n\nassert longest_common_prefix([\"flower\", \"flow\", \"flight\"]) == \"fl\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\ndef repeatedStringMatch(A: str, B: str) -&gt; int:\n    \"\"\"\n    minimum number of times you should repeat string a,\n    so that string b is a substring of it.\n    \"\"\"\n    if set(B).difference(set(A)):\n        return -1 \n    \n    rep = \"\"\n    count = 0\n    while len(rep) &lt; 10000:\n        rep += A      \n        count += 1\n        if B in rep:\n            return count \n    \n    return -1 \n    \na = \"abcd\"\nb = \"cdabcdab\"\nassert repeatedStringMatch(a,b) == 3 \n\n\nNorvig’s spell corrector\n\nhttps://norvig.com/spell-correct.html\n"
        },
    
      {
        "title"    : "Tree Traversals",
        "category" : "",
        "tags"     : "",
        "url"      : "/algo/tree-traveerse/",
        "date"     : "2022-09-25 16:35:07 +0300",
        "content"  : "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\ninorder(root):\n\n    walk(node):\n        if node:\n            walk(left)\n            visit node \n            walk(right)\n\n    walk(root)\n\n\ninorder(root):\n    # return left, root, right\n\n    stack = []\n\n    while stack or root:\n        if root:\n             add root to stack \n             go left\n\n        else:\n            get node from stack \n            visit node \n            go right \n\n\npreorder(root):\n    # return root, left, right\n\n    stack = []\n\n    while stack or root:\n        if root:\n            add root to stack \n            visit node \n            go left \n\n        else:\n            get node from stack \n            go right\n\npostorder(root):\n    # return left, right, root \n    # visit in reverse \n\n    stack = []\n\n    while stack or root:\n        if root:\n            add root to stack \n             visit node \n             go right \n\n        else:\n            get node from stack \n            go left\n\n    return reverse visited\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\nimport \"fmt\"\n\n\ntype Node struct {\n    Val int\n    Children []*Node\n}\n\nfunc reverse(numbers []int) {\n\tfor i, j := 0, len(numbers)-1; i &lt; j; i, j = i+1, j-1 {\n\t\tnumbers[i], numbers[j] = numbers[j], numbers[i]\n\t}\n}\n\nfunc postorder(root *Node) []int {\n    ans := []int{}\n    stack := []*Node{} \n    for root != nil || len(stack) != 0 {\n        if root != nil {\n            ans = append(ans, root.Val)\n            for _, node := range(root.Children){\n                stack = append(stack, node)\n            }\n            root = nil \n        } else {\n            n := len(stack)\n            root = stack[n-1]\n            stack = stack[:n-1]\n        }\n    }\n    \n    reverse(ans)\n    \n    return ans \n}\n\n"
        },
    
      {
        "title"    : "Tree",
        "category" : "",
        "tags"     : "",
        "url"      : "/algo/tree/",
        "date"     : "2022-09-25 16:35:07 +0300",
        "content"  : "1\n2\ndef tree():\n    return collections.defaultdict(tree)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n/**\n * Definition for TreeNode.\n * type TreeNode struct {\n *     Val int\n *     Left *ListNode\n *     Right *ListNode\n * }\n */\n func lowestCommonAncestor(root, p, q *TreeNode) *TreeNode {\n     if root == nil || root == p || root == q {\n         return root \n     }\n     left := lowestCommonAncestor(root.Left,p,q)\n     right := lowestCommonAncestor(root.Right,p,q)\n     if left != nil &amp;&amp; right != nil {\n         return root \n     }\n     if left != nil{\n         return left \n     } else{\n         return right \n     }\n     \n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\nclass Codec:\n\n    def serialize(self, root):\n        \"\"\"Encodes a tree to a single string.\n        \n        :type root: TreeNode\n        :rtype: str\n        \"\"\"\n        def preorder(root):\n            vals = list()\n            def go(node):\n                if node:\n                    vals.append(str(node.val))\n                    go(node.left)\n                    go(node.right)\n                else:\n                    vals.append(\"#\")\n            \n            go(root)\n            return vals\n        \n        vals = preorder(root)\n        return \" \".join(vals)      \n                \n    def deserialize(self, data):\n        \"\"\"Decodes your encoded data to tree.\n        \n        :type data: str\n        :rtype: TreeNode\n        \"\"\"\n                \n        def construct():\n            val = next(vals)\n            if val == \"#\":\n                return None\n            node = TreeNode(int(val))\n            node.left= construct()\n            node.right= construct()\n            \n            return node\n\n        vals = iter(data.split())\n        root = construct()\n        \n        return root\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\nclass Trie:\n    \"\"\" or prefix tree \"\"\"\n    def __init__(self):\n        \"\"\"\n        a child of a Trie is a Trie        \n        \"\"\"\n        self.trie = {}\n        \n    def insert(self, word: str) -&gt; None:\n        \"\"\"\n        Inserts a word into the trie.\n        \"\"\"\n        t = self.trie\n        for letter in word:\n            if letter not in t:\n                t[letter] = {}\n            t = t[letter]\n        t[\"#\"] = \"#\"  \n\n    def search(self, word: str) -&gt; bool:\n        \"\"\"\n        Returns if the word is in the trie.\n        \"\"\"\n        return self.startsWith(word + '#')\n        \n\n    def startsWith(self, prefix: str) -&gt; bool:\n        \"\"\"\n        Returns if there is any word in the trie that starts with the given prefix.\n        \"\"\"\n        t = self.trie \n        for letter in prefix:\n            if letter not in t:\n                return False\n            t = t[letter]\n        return True\n\ndef test_trie():\n  trie = Trie()\n  trie.insert(\"apple\")\n  assert trie.search(\"apple\") is True\n  assert trie.search(\"app\") is False\n  assert trie.startsWith(\"app\") is True\n  trie.insert(\"app\")\n  assert trie.search(\"app\") is True\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n\"\"\"\nroot = [5,3,6,2,4,null,7]\nkey = 3\n    5\n   / \\\n  3   6\n / \\   \\\n2   4   7\nGiven key to delete is 3. So we find the node with value 3 and delete it.\nOne valid answer is [5,4,6,2,null,null,7], shown in the following BST.\n    5\n   / \\\n  4   6\n /     \\\n2       7\nAnother valid answer is [5,2,6,null,4,null,7].\n    5\n   / \\\n  2   6\n   \\   \\\n    4   7\n\"\"\"\n    \ndef deleteNode(self, root, key):\n\n    if not root:\n        return\n\n    if key &gt; root.val:\n        root.right = self.deleteNode(root.right, key)\n\n    elif key &lt; root.val:\n        root.left = self.deleteNode(root.left, key)\n\n    # now the key is the root of a subtree\n    else:\n        # if the subtree does not have a left child, we just return its right child\n        # to its father, and they will be connected on the higher level recursion.\n        if not root.left:\n            return root.right\n\n        # if it has a left child, we want to find the max val on the left subtree to \n        # replace the node we want to delete.\n        else:\n            # try to find the max value on the left subtree\n            tmp = root.left\n            while tmp.right:\n                tmp = tmp.right\n\n            root.val = tmp.val\n   \n                root.left = self.deleteNode(root.left, tmp.val)\n        \n        return root\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc max(a, b int) int {\n    if a &lt; b {\n        return b\n    }\n    return a\n}\n\nfunc diameterOfBinaryTree(root *TreeNode) int {\n    dia := 0\n    \n    var walk func(root *TreeNode) int\n\n    walk = func(root *TreeNode) int {\n        if root == nil{\n            return 0 \n        }\n        \n        var left = walk(root.Left)\n        \n        var right = walk(root.Right)\n                \n        dia = max(dia, left+right)\n\n        return max(left,right) + 1\n  \n    }\n    \n    walk(root)\n    \n    return dia \n    \n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n\n\n'''\nInvert a binary tree.\nExample:\nInput:\n     4\n   /   \\\n  2     7\n / \\   / \\\n1   3 6   9\nOutput:\n     4\n   /   \\\n  7     2\n / \\   / \\\n9   6 3   1\n'''\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\n  def invertTree(self, root):\n      \"\"\"\n      :type root: TreeNode\n      :rtype: TreeNode\n      \"\"\"\n      if not root:\n          return None\n\n      right = self.invertTree(root.right)\n      left = self.invertTree(root.left)\n\n      root.right = left\n      root.left = right\n\n      return root\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n/*\n    1\n   / \\\n  2   2\n / \\ / \\\n3  4 4  3\n*/\npublic boolean isSymmetric(TreeNode root) {\n    return isMirror(root, root);\n}\n\npublic boolean isMirror(TreeNode t1, TreeNode t2) {\n    if (t1 == null &amp;&amp; t2 == null) return true;\n    if (t1 == null || t2 == null) return false;\n    return (t1.val == t2.val)\n        &amp;&amp; isMirror(t1.right, t2.left)\n        &amp;&amp; isMirror(t1.left, t2.right);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    int maxDepth(TreeNode* root) {\n        if(!root){\n            return 0;\n        }\n        int left = maxDepth(root-&gt;left);\n        int right = maxDepth(root-&gt;right);\n        \n        return max(left,right)+1;\n\n    }\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\n\"\"\"\n   3\n   / \\\n  9  20\n    /  \\\n   15   7\n \nreturn : 3\n\"\"\"\n\ndef maxDepth(self, root: 'TreeNode') -&gt; 'int':\n    if not root:\n        return 0\n    left = self.maxDepth(root.left)\n    right =  self.maxDepth(root.right)\n\n    return max(left,right)+1\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\ndef maxPathSum(self, root: TreeNode) -&gt; int:\n    \"\"\"\n       1\n      / \\\n     2   3\n\n    Output: 6\n\n    -10\n    / \\\n    9  20\n        /  \\\n    15   7\n\n    Output: 42\n\n\n    \"\"\"\n    max_sum = float(\"-inf\")\n\n    def walk(node):\n        if not node:\n            return 0\n\n        left = max(0, walk(node.left))\n        right = max(0, walk(node.right))\n\n        max_sum = max(max_sum, node.val + left + right)\n\n        return max(left, right) + node.val\n\n    walk(root)\n\n    return max_sum\n\n"
        },
    
        {}
        ,
  
    
      {
        "title"    : "A good life",
        "category" : "",
        "tags"     : "",
        "url"      : "/essais/a-good-life/",
        "date"     : "2022-09-25 16:35:07 +0300",
        "content"  : "Some things are in our control and others not\n\nDo what you can, now and here\n\nDon’t worry for the rest\n\n\n\nDo not regret mistakes,\n\nYou need a lot of mistakes for a few good moves,\n\na lot bad ideas for a few good ideas.\n\n\n\nCharacter is worth the whole world\n\nOur actions and thoughts shape us slowly,\n\nBuilding a good character takes time and practice\n\n\n\nDo nothing against your will,\n\nnor against community,\n\nnor without due examination,\n\nnor with reluctancy\n\n\n\nDo what you feel in your heart to be right,\n\nnot what is easy nor what is popular.\n\n\n\nDon’t give in without a fight\n\n\n\nThere comes a time when one must take a position\n\nthat is neither safe, nor politic, nor popular,\n\nbut he must take it because conscience tells him it is right.\n\n― Martin Luther King Jr.\n\n\n\nYou are your best friend\n\nLove you, accept you, believe in you\n\n\n\nAre you still young and dumb enough to know everything?\n\n\n\n“Begin at the beginning,” the King said, very gravely,\n\n“and go on till you come to the end: then stop.\n\n\n\nGolden mean\n\n\n\nWords are irreversible\n\nThink twice before you speak\n\nBe careful with promises\n\n\n\nEnvironment matters\n\nBeauty and ugliness are contagious\n\n\n\nTreat people with kindness and respect,\n\neven when they don’t deserve it,\n\nout of self-respect and principle\n\n\n\nThere are many ways to interpret reality\n\n\n\nWe deal out judgment to others and seek understanding for ourselves\n\nNo one is completely foolish, and we are all foolish in some regards.\n\nBefore dismissing a person or judging too harshly, remember we are all human\n\n\n\nEach of us has the ability to heal\n\n\n\nA man is a success if he gets up in the morning and gets to bed at night,\n\nand in between he does what he wants to do.\n\nBob Dylan\n\n\n\n“To leave the world a bit better\n\nwhether by a healthy child, a garden patch, or a redeemed social condition;\n\nto know that one life has breathed easier because you lived here.\n\nThis is to have succeeded.”\n\n\n\nFreedom is to conquer your dark side, your anger, greed, pride, ..\n\n\n\nYou are a big as what makes you angry\n\nA stone can disturb a pond but can’t disturb the sea\n\nFeel vast and deep like the ocean, nothing can harm you\n\n\n\nA good life is to have time for yourself and your loved ones, to be your master\n\n\n\nEverything can be taken from a man but one thing, the last of the human freedoms,\n\nto choose one’s attitude in any given set of circumstances,\n\nto choose one’s own way.\n\nViktor E. Frankl\n\n\n\nWorrying doesn’t make it one bit better, use your energy to act instead\n\n\n\nAssume the worst, expect everything\n\nThere might be no tomorrow morning for you\n\n\n\nAbove all, don’t lie to yourself.\n\n\n\nHappiness from an experience lasts longer.\n\nMaterial things have the worst kind of hedonic adaptation.\n\nThey come through great toil, and kept by great anxiety.\n\n\n\nWas Du erlebst, kann keine Macht der Welt Dir rauben.\n\nWhat you have experienced, no power on earth can take from you.\n\n\n\nLife is not short but we waste it.\n\n“Think of yourself as dead. Now take what’s left, and live it properly.”\n\n\n\nThe whole wisdom and beauty of the world is here to be explored,\n\nand to expand your life beyond your time.\n\n\n\nThe price of anything is the amount of life you exchange for it - Henry David Thoreau\n\n\n\nRemove all nonessentials.\n\nTalk less, do less, think less.\n\nRecharge\n\n\n\nNature does not hurry, yet everything is accomplished\n\n\n\n“Very little is needed to make a happy life; it is all within yourself, in your way of thinking”\n"
        },
    
      {
        "title"    : "Art",
        "category" : "",
        "tags"     : "",
        "url"      : "/essais/art/",
        "date"     : "2022-09-25 16:35:07 +0300",
        "content"  : "Some liked artwork on Google Arts &amp; Culture\n\nHigh definition, printable public paintings\n"
        },
    
      {
        "title"    : "Books",
        "category" : "",
        "tags"     : "",
        "url"      : "/essais/books/",
        "date"     : "2022-09-25 16:35:07 +0300",
        "content"  : "Lit\n\nCien años de soledad\n\nDon Quixote\n\nEnsaio Sobre a Cegueira\n\nHamlet\n\nLes Miserables\n\nNausea\n\nOblomov\n\nOf Mice and Men\n\nStrange Planet\n\nThe Count of Monte Cristo\n\nThe Death of Ivan Ilych\n\nThe Gambler\n\nThe Hitchhiker’s Guide to the Galaxy\n\nThe Hobbit\n\nThe Iliad\n\nThe Little Prince\n\nThe Lorax\n\nThe Lord of the Rings\n\nThe Metamorphosis\n\nThe Odyssey\n\nThe Overcoat\n\nThe Plague\n\nThe Stranger\n\nThe Trial\n\nPhil\n\nEnchiridion\n\nTao Te Ching\n\nMeditations by Marcus Aurelius\n\nOn the Shortness of Life by Seneca\n\nRubáiyát of Omar Khayyám\n\nThe Art of War\n\nDie Kunst, glücklich zu sein by Schopenhauer\n\nThe Prince\n\nTao: The Watercourse Way by Alan Watts\n\nGreat Thinkers: Simple Tools from 60 Great Thinkers to Improve Your Life Today\n\nScience\n\nA Brief History of Time\n\nStructures: Or Why Things Don’t Fall Down\n\nCosmos, Carl Sagan\n\nBehave: The Biology of Humans at Our Best and Worst\n\nThe Emperor of All Maladies: A Biography of Cancer\n\nWhy We Sleep: Unlocking the Power of Sleep and Dreams\n\nA Life on Our Planet: My Witness Statement and a Vision for the Future\n\nMountaineering: The Freedom of the Hills\n\nBiography\n\nSteve Jobs by Walter Isaacson\n\nA Promised Land, Obama\n\nThe Diary of a Young Girl, Anne Frank\n\nMan’s Search for Meaning, Viktor Frankl\n\nSocial Sciences\n\nThinking, Fast and Slow\n\nPredictably Irrational: The Hidden Forces That Shape Our Decisions\n\nSkill with People\n\nThe Man Who Mistook His Wife for a Hat and Other Clinical Tales\n\nAtomic Habits\n\nThe Boy Who Was Raised as a Dog: And Other Stories from a Child Psychiatrist’s Notebook\n\nFreakonomics\n\nNever Split the Difference: Negotiating As If Your Life Depended On It\n\nSapiens: A Brief History of Humankind\n\nThe Lessons of History, Durant, Will\n\nUnderstanding Power: The Indispensable Chomsky\n\nMetaphors We Live By\n\nSome favorite authors\n\nAntoine de Saint-Exupéry\n\nAristotle\n\nCervantes\n\nDostoyevski\n\nEpictetus\n\nGogol\n\nHawking\n\nHomer\n\nKafka\n\nKant\n\nKierkegaard\n\nLao Tzu\n\nMarcus Aurelius\n\nMarquez\n\nMontaigne\n\nOrwell\n\nPlato\n\nSagan\n\nSartre\n\nSchopenhauer\n\nSeneca\n\nSheakspeare\n\nTolkien\n\nTolstoy\n\n"
        },
    
      {
        "title"    : "Emergence and Chaos",
        "category" : "",
        "tags"     : "",
        "url"      : "/essais/chaos/",
        "date"     : "2022-09-25 16:35:07 +0300",
        "content"  : "Based on Behave: The Biology of Humans at Our Best and Worst by Sapolsky\n\n\n\nBasic building blocks follow a few simple rules,\n\nThis creates complex systems\n\n\n\nAtoms\n\nOrganic molecules\n\nProteins\n\nCells\n\nMicroorganisms\n\nPlants\n\nAnimals\n\n\n\nUnder a complexity threshold, there is convergence\n\nFor example, organic molecules converge to a finite number of possible stable states, proteins\n\nPlants and animals in a desert end up with a small set of strategies to survive\n\n\n\nAfter passing a complexity threshold, a system enters into the land of chaos.\n\nA minor change can create enormous differences\n\nThere is no ideal and optimal point to arrive,\n\nThe only way is to wait and see.\n\n"
        },
    
      {
        "title"    : "Children",
        "category" : "",
        "tags"     : "",
        "url"      : "/essais/children/",
        "date"     : "2022-09-25 16:35:07 +0300",
        "content"  : "They will forget your words but not your actions\n\nThe way to raise honest, brave, kind, hardworking, and loving children is to lead by example\n\n\n\nThey should learn responsibility, how to solve problems, how to manage things on their own\n\n\n\nhttp://fallibleideas.com/taking-children-seriously\n\nTake them seriously and treat them with respect,\n\nit makes them feel like grown-ups and they love it\n\n\n\nIgnorance isn’t stupidity\n\n\n\nLet a child be angry,\n\nBe patient, do not yell,\n\nRemember that they are children and you are the adult\n\nHow Inuit Parents Raise Kids Without Yelling — And Teach Them To Control Anger : Goats and Soda : NPR\n\n\n\nWait a bit before buying something,\n\nbecause they don’t really want most things. having a 1 month rule is useful.\n\n\n\nIf you have a rule, explain the reason,\n\nlife is much easier when they are convinced\n"
        },
    
      {
        "title"    : "Cognitive Biases",
        "category" : "",
        "tags"     : "",
        "url"      : "/essais/cognitive%20biases/",
        "date"     : "2022-09-25 16:35:07 +0300",
        "content"  : "We tend to do what is quick, easy, comfortable over doing the important\n\nEnvironment affects us more than we suspect\n\nWe fear what we don’t understand\n\nWe jump to conclusions, judge, and oversimplify\n\nEmotions make decisions. Reason comes later and justifies.\n\nWe exaggerate\n\nFamiliar seems better, often it’s not\n\nIt won’t be as good as you hope, neither as bad as you fear\n\n\n\nMistakes of others are easier to notice than our own\n\nWe believe we are better than we actually are\n\nWe can’t read minds\n\nWe see what we want to see\n\nWe believe what we want to believe\n\nPeople like you more than you know\n\nPeople think about you way less than you believe\n\n\n\nSunk cost\n\nAnchoring\n\nSocial Proof (Safety in Numbers)\n\nNarrative Instinct -&gt; Stories run the world\n\nTendency to Overgeneralize from Small Samples\n\nHindsight Bias\n\nSensitivity to Fairness\n\nSurvivorship Bias\n\nPavlovian Association\n\nTendency to Distort Due to Liking Loving or Disliking/Hating\n\nRich man in the car paradox\n\nEarned success and deserved failure fallacy\n\nTendency to Feel Envy &amp; Jealousy\n\nAvailability Heuristic\n\nTendency to Stereotype\n\nFailure to learn from the past\n\nRelative Satisfaction/Misery\n\nCommitment &amp; Consistency Bias\n\nTendency to Want to Do Something\n\nFirst-Conclusion Bias\n\n\n\nAll or nothing\n\nExpectation\n\nNegativity\n\nBlack filter\n\nIgnoring positives\n\nJumping to conclusions\n\nMind reading\n\nExaggeration\n\nShould would sentences\n\nLabelling\n\nTaking it personal\n\nHedonic adaptation\n\nUnfit mental models\n\n\n\nhttps://www.clearerthinking.org/tools-and-mini-courses\n"
        },
    
      {
        "title"    : "Communication",
        "category" : "",
        "tags"     : "",
        "url"      : "/essais/communication/",
        "date"     : "2022-09-25 16:35:07 +0300",
        "content"  : "Be present, be interested\n\nIf you are not interested, walk away.\n\n\n\nSet aside your opinion\n\nListen with a beginner’s mind.\n\nSuspend judgement, it’s not personal, not about you\n\n\n\nListen to understand, not to answer.\n\nDo not offer solutions, just listen.\n\nListen to what isn’t being said, too\n\n\n\nThink before you speak\n\n\n\nEmotions drive the conversation\n\nHave a positive, constructive attitude.\n\nSay something good or say nothing.\n\n\n\nStyle matters\n\nBreath, voice, tone\n\nmonolog vs dialog\n\n\n\nRepeat the bottom line\n\nKeep it short and sweet\n\n\n\nPeople can’t read your mind,\n\nsomething being obvious to you doesn’t mean it’s obvious to them\n\n\n\nThe best story wins, not the best idea\n\n\n\nDon’t try to prove anything,\n\npeople believe what they want to believe\n\n\n\nSharing frequently organizes your thoughts\n\n\n\ngood social relationships -&gt; good life \n"
        },
    
      {
        "title"    : "Critical thinking",
        "category" : "",
        "tags"     : "",
        "url"      : "/essais/critical-thinking/",
        "date"     : "2022-09-25 16:35:07 +0300",
        "content"  : "How can you be so sure that you have the truth and they are wrong,\n\nHave you considered all your ideas and others to the bottom?\n\n\n\nDare to see with your own eyes\n\n\n\n“Delete the adjectives and you will have the facts.”\n\n\n\nAll models are wrong, some are useful\n\nSystematic feedback, criticism, and correction can make us less wrong\n\n"
        },
    
      {
        "title"    : "Decisions",
        "category" : "",
        "tags"     : "",
        "url"      : "/essais/decisions/",
        "date"     : "2022-09-25 16:35:07 +0300",
        "content"  : "We make even major decisions carelessly\n\na little forethought can prevent a lot of pain later.\n\n\n\nSolve physical needs before deciding\n\nGet some sleep\n\nTake a walk\n\n\n\nIdentify emotions\n\nDefine goals, inputs, and deadline\n\nCreate a process\n\nGo through it with people you respect\n\n\n\nConsider second-order and third-order consequences.\n\nIt is easier to stay out than get out.\n\nDo not sell your future.\n\n\n\nNever lie to yourself\n\n“When there is doubt, there is no doubt.”\n\n\n\nBuild a broad margin of error into your moves\n\n\n\nMake a move, don’t stuck\n\n"
        },
    
      {
        "title"    : "Design",
        "category" : "",
        "tags"     : "",
        "url"      : "/essais/design/",
        "date"     : "2022-09-25 16:35:07 +0300",
        "content"  : "Design for people,\n\nfor the way people behave,\n\nnot for how we would wish them to behave.\n\n“Know thy user, and you are not thy user.” — Arnie Lund\n\nChoose your audience\n\nDon’t design for everyone. It makes everyone unhappy.\n\n\n\nGood design resembles a likable person: respectful, generous and helpful.\n\nTake hints from the past\n\nBe mindful of emotions, soothe fears, use nostalgia, give hope\n\n\n\nGet the specifications right\n\nDo one thing and do it well\n\n“The best writing is rewriting.”\n\nDo today’s work, tomorrow might turn out differently\n\n\n\ndouble diamond\n\ndivergence - convergence\n\n\n\nTest early\n\n“Testing one user early in the project is better than testing fifty near the end.”\n\n\n\nGood design is hard to notice because it blends into life\n\n\n  Design is like a mom,\n\n  nobody notices when she’s around,\n\n  but everybody misses her when she’s not.\n\n\n\n\nDesign for failure,\n\nMake things work well even when things do not go as planned.\n\n\n\nWhat makes something simple or complex?\n\nIt’s not the number of dials or controls or how many features it has:\n\nIt is whether the user has a good conceptual model of how it works\n\nIts simple when there is nothing left to take away\n\na beginner in an emergency can understand it within ten seconds\n\n\n\nShip it\n\nUsage is like oxygen for ideas.\n\nYou can’t make it better until you make it work.\n\n“Release early. Release often.”\n\nA good plan violently executed now is better than a perfect plan next week.\n\n\n\nIt just doesn’t matter \n\nfingers\n\naddictive design\n"
        },
    
      {
        "title"    : "Entrepreneurship",
        "category" : "",
        "tags"     : "",
        "url"      : "/essais/entrepreneurship/",
        "date"     : "2022-09-25 16:35:07 +0300",
        "content"  : "Going fast in the wrong direction is not productivity.\n\nThink more about what to work on.\n\n\n\nWhat is like fun to me but work to others?\n\nWhat makes me lose track of time?\n\nWhat comes naturally to me?\n\n\n\n\n  What are the most important problems in your field,\n\n  and why aren’t you working on them?\n\n  Richard Hamming\n\n\n\n\nPlay a game where the odds are in your favour\n\n\n\nKnow thy user and you are not your user\n\n\n\nUnderstand your audience and their needs, identify pain\n\nAsk about specific problems in the past and what they did about them\n\nDon’t tell. Show.\n\n\n\nTest early and often\n\nOne test is worth a thousand expert opinions.\n\n\n\nGreat ideas are about reordering existing + connecting together + right timing.\n\nDon’t look for ideas, just work on things that you find genuinely interesting\n\n\n  Creativity is just connecting things.\n\n  Creative people feel a little guilty because they just saw something obvious.\n\n  Steve Jobs\n\n\n\n\nWhat matters is how people perceive your work. Marketing matters.\n\n\n\nDon’t sell. Help.\n\nMake a genuine connection, build trust\n\n\n\nBe aware of how your product compares to others on the market,\n\nand be able to make a case for yours.\n\n\n\nPeople don’t buy the thing, they buy the feeling they imagine.\n\nSell results. Show how your product’s characteristics relevant to customer’s motivations\n\n\n\nIn writing or didn’t happen\n\n\n\nC-level communication\n\n\n  Conclusion &amp; Action\n  Reasons\n  Repeat Conclusion &amp; Action\n\n\n\n\nHow to pitch?\n\n\n  enemy\n  why now\n  promised land\n  obstacles/ how to get over\n  present evidence\n\n\n\n\nHire people you’d work for\n\n\n\n"
        },
    
      {
        "title"    : "How to get things done?",
        "category" : "",
        "tags"     : "",
        "url"      : "/essais/get-things-done/",
        "date"     : "2022-09-25 16:35:07 +0300",
        "content"  : "define what you want\n\ndo one thing and do it well\n\nplan\n\nprioritize\n\ndo it with all your heart\n\nstart small\n\nmake a lot of mistakes\n\ndo less\n\nsleep\n\ndrink water\n\ntake a walk\n\ntalk to a friend\n\nsay no more often\n\nrely on habits and systems\n\nwrite more\n\nwork short, focused intervals and rest\n\nprevent the worst\n\nkeep going\n\nignore sunk costs\n\njust start\n\n\n\nDefine what you want because a weak definition means a bad outcome\n\nYou need a lot of mistakes for a few good moves, a lot bad ideas for a few good ideas. Do not fear making mistakes, do not regret mistakes, you are growing a mistake at a time\n\nThe more you do it, the better you get. Sheer volume of music produced is a good predictor for composer success.\n\nTaking something from 0 to 1 creates value, and so does taking it from 1 to 10\n\nThe ultimate productivity hack is saying no.\n\nProductivity is managing your attention\n\nYou’ll be most successful where you’re most intensely interested.\n\nChronic stress is harmful yet moderate levels of acute stress helps you grow\n\nFocus on what you need to get right and stop worrying for other things\n\nThe antidote to procrastination is courage. Face your fears, face discomfort, you will be glad\n\nProcrastinating is not always bad. Being quick to start slow to finish may increase more background processing and may lead to original ideas.\n\nOne test is worth a thousand expert opinions.\n\nDon’t think about how proud you would be to run a marathon. Question whether you like running.\n\nA goal without a plan is just a wish. - Antoine de Saint-Exupéry\n\nGoing fast in the wrong direction is not productivity. Think more about what to work on.\n\nDefine what you want because a weak definition means a bad outcome\n\nDare to say “I don’t know”\n\nIf you’re perfectly qualified to do something, you’ve already outgrown it\n\nHalf doing something is an expensive way of not doing it\n\nDo it with all your heart\n\nThink before you do, plan before you start.\n\nGain good habits\n\nSet clear goals, plan, create sytems\n\nSet up small checkpoints\n\nEliminate, simplify, chunk, breakdown, prioritize, delegate, focus, get feedback, iterate\n\nSet a time bound, draw a deadline\n\nFocus on one thing at a time\n\nPrevent bad things before they happen\n\nPrioritize important over urgent\n\nIgnore sunk costs\n\nWrite down so you don’t have to remember everything\n\nMake it one bit better\n\nPrevent the worst\n\nMake work playful\n\nDo not mix work and leisure. Have focused intervals of work and play\n\nStart small\n\nPark downhill, stop work with a cliffhanger so it’s easier to start again. Save some easy tasks for low motivation periods\n\nStay professional, responsible and reliable.\n\nEverything looks like a failure in the middle, keep going\n\nWhat seems like work to other people that doesn’t seem like work to you?\n\n"
        },
    
      {
        "title"    : "Habits",
        "category" : "",
        "tags"     : "",
        "url"      : "/essais/habits/",
        "date"     : "2022-09-25 16:35:07 +0300",
        "content"  : "Focus and feel it to break a bad habit\n\nMake good habits easy, visible, and rewarding\n\n\n\nA clear time and place helps\n\nHere and now\n\n"
        },
    
      {
        "title"    : "Happiness",
        "category" : "",
        "tags"     : "",
        "url"      : "/essais/happiness/",
        "date"     : "2022-09-25 16:35:07 +0300",
        "content"  : "Expect less\n\nAppreciate more\n\n\n\nJudge less\n\nAccept more\n\n\n\nLove, Work, Hope\n\n\n\nLess “I know”,\n\nmore “It seems, maybe, probably”\n\n\n\nEven the darkest night will end\n\nand the sun will rise.\n\n\n\nWant everything, lose everything\n\nWhat you want isn’t always best for you\n\n\n\nNeither blame yourself nor others\n\nIts not worth your peace of mind\n\n\n\nForgive yourself, forgive others\n\nLearn and move on\n\n\n\nBe a friend to yourself\n\n\n\nPeople can’t read minds\n\n\n\nits how you look\n\ntake a different view\n\n\n\nits not that good\n\nnot that bad\n\nits not all or nothing\n\n\n\nits not personal\n\nits not all your fault\n\n\n\nit doesn’t matter\n\nit will be better\n\n\n\nwalk slowly but walk\n\nFind time to just be\n\n\n\nIt’s too easy to take good health for granted.\n\n\n\nLet not future troubles you, for you will have the same reason\n\n\n\nThe pain is neither unbearable nor unending,\n\nas long as you keep in mind its limits\n\nand don’t magnify them in your imagination.\n\n\n\nThe reason you don’t have energy to workout is because you don’t workout.\n\n\n\nSee the beauty in all\n\n\n\nWalk no more in shadows\n\nEnjoy the sun\n\n\n\nDo not expect to “get” anything\n\nDo not expect to be better\n\nLive as if you listen to music, or you play music\n\nPlay the game\n\nThe aim is the play itself\n\n\n\nSpeak less, do less, have less\n\n\n\nAnd now that you don’t have to be perfect, you can be good.\n\n"
        },
    
      {
        "title"    : "Some events in the last million years",
        "category" : "",
        "tags"     : "",
        "url"      : "/essais/last-million/",
        "date"     : "2022-09-25 16:35:07 +0300",
        "content"  : "Last Common Ancestor Of Humans And Chimps 6M years ago\n\nFirst Humans 3M\n\nFirst Stone Tools, Fire 2M\n\n\n\nSapiens 200 000 Years\n\nCave Paintings 30 000 Years\n\nEnd Of The Last Ice Age, Agriculture, First Temple 12 000 Years ago\n\n\n\nFirst Cities 7500 BC\n\nCopper 5000 BC\n\nWheel, Ancient Egypt, Sumerians 3500 BC\n\nFirst Writings, Pyramids, Paper 3000 BC\n\n\n\nTelescope 1608\n\nSteam Engine 1698\n\n1800s\n\nElectricity\n\nDC Motor\n\nCombustion Engine\n\nThe Origin Of Species\n\nLigtbulb\n\nTelephone\n\nCar\n\nAC Motor\n\nRadio\n\n1900s\n\nFirst Flight\n\nTelevision\n\nEdwin Hubble found Expansion Of Universe\n\nEinstein found the equality of matter and energy, relativity of time and space\n\nDigital Computer ENIAC\n\nAtomic bomb\n\nTransistor\n\nJonas Salk and his team found Polio Vaccine 48-55\n\nCOBOL, Fortran\n\nDNA double helix 53\n\nIntegrated Circuit 58\n\na prototype of the modern computer, with a mouse and a graphical user interface 1964\n\nThe Birth of the Internet 65-95\n\nApollo 1, 67\n\nIntel 68\n\nUNIX 69\n\nApollo 11, 69\n\nFloppy Disk 71\n\nEthernet 73\n\nfirst personal computers 74-77\n\nC programming language, 72\n\nApollo 17, 72\n\nFirst Cell Phone 73\n\nALTAIR 8800, Microsoft, 75\n\nApple, Apple I, 76\n\nApple II 77\n\nVisiCalc, the first spreadsheet program, 78\n\nWordStar, word processing, 79\n\nIBM PC 81\n\nCommodore 64, 82 (64 KB of RAM, $595, sold more than 22 million units)\n\nMacintosh, 84, $2,500\n\nThe first domain symbolics.com, AOL, C++ 85\n\nCRISPR 87\n\n90s\n\n90: Hubble, Imdb, Python, Haskell\n\n93: Dolly cloned, Pentium processor, Mosaic Browser\n\n94: Netscape Navigator, Internet Explorer, Yahoo, Amazon, PHP\n\n96: Java, Ruby, JavaScript, PostgreSQL\n\n98: Google, International Space Station Launched\n\n99: Wifi\n\n2000s\n\n01: Wikipedia\n\n02: SpaceX\n\n03: Safari, Tesla\n\n04: Gmail, FB\n\n05: Arduino, Reddit, Youtube\n\n06: Twitter, MacBook Pro\n\n07: iPhone, Kindle\n\n08: Macbook Air\n\n09: Windows 7, Github, Whatsapp\n\n10: Instagram, iPad\n\n12: Chrome, Raspberry Pi\n\nalso see https://drewdevault.com/time\n"
        },
    
      {
        "title"    : "Leadership",
        "category" : "",
        "tags"     : "",
        "url"      : "/essais/leadership/",
        "date"     : "2022-09-25 16:35:07 +0300",
        "content"  : "You plant the seeds and water them,\n\nyou can’t force the growing\n\n\n\nBuild projects around motivated people\n\nRemove obstacles\n\nProvide the environment and support\n\nand trust them to get it done.\n\n\n  If you want to build a ship,\n\n  don’t drum up people to collect wood\n\n  and don’t assign them tasks and work,\n\n  but rather teach them to long for the endless immensity of the sea.\n\n  — Antoine de Saint-Exupery\n\n\nThe great ruler speaks little\n\nand his words are priceless\n\nHe works without self-interest\n\nand leaves no trace\n\nWhen all is finished, the people say,\n\n“It happened by itself”\n\nTao Te Ching\n"
        },
    
      {
        "title"    : "Learning",
        "category" : "",
        "tags"     : "",
        "url"      : "/essais/learning/",
        "date"     : "2022-09-25 16:35:07 +0300",
        "content"  : "It’s an art and only genuine interest and passion creates beautiful art\n\n\n\nBeginner’s Mind\n\nSpaced repetition\n\nDeliberate practice\n\nSeparate work from leisure\n\nNo arbitrary, fixed schedule\n\nEducate the heart\n\n"
        },
    
      {
        "title"    : "Links",
        "category" : "",
        "tags"     : "",
        "url"      : "/essais/links/",
        "date"     : "2022-09-25 16:35:07 +0300",
        "content"  : "\n\n    \n        \n            Advice\n        \n    \n        \n            Ask HN\n        \n    \n        \n            Blog posts\n        \n    \n        \n            For makers\n        \n    \n        \n            Liked writings\n        \n    \n        \n            Stack exchange\n        \n    \n\n"
        },
    
      {
        "title"    : "Mental models",
        "category" : "",
        "tags"     : "",
        "url"      : "/essais/mental-models/",
        "date"     : "2022-09-25 16:35:07 +0300",
        "content"  : "All models are wrong, some are useful\n\n\n\nUncertainty\n\nProbability\n\nRelativity\n\n\n\nGolden means\n\nOpportunity - Risk\n\nOptimism - Prudence\n\n\n\nZoom in and out\n\nAtoms to Universe\n\nMath - Physics - Chemistry - Biology - Psychology - Sociology - Astronomy\n\nKnow thyself, know others\n\n\n\nSystems thinking\n\nFeedback loops\n\nChaos\n\nEmergence\n\n\n\nNature\n\nEvolution\n\nEcosystems\n\nEnergy\n\n\n\nInvert\n\nProbabilistic thinking, probability runs the world\n\nMarginal utility\n\nDiminishing Returns\n\nOpportunity Costs\n\nIgnore sunk costs\n\nSupply and Demand\n\nScarcity\n\nCreative Destruction\n\nComparative Advantage\n\nSpecialization\n\nDouble-Entry Bookkeeping\n\nBias for action\n\nSperm and egg\n\nHammer-nail\n\nRandomness as the heart of creativity\n\nIn the long run, optimism is the best prevention for regret\n\nExplore vs exploit\n\nCircle of Competence, understand what you know and what you don’t know\n\nFirst Principles Thinking\n\nUnderstand the fundemantals\n\nSecond-Order Thinking\n\nUnintended consequences\n\nLong term thinking\n\nOccam’s Razor, Simpler explanations are more likely to be true\n\nHanlon’s Razor, think stupidity before malice\n\nThe map is not the territory\n\nReciprocity, people act with intense reciprocity\n\nInertia, objects and people display the same effect. The first move is harder\n\nLeverage, almost every great work includes leverage\n\nAlloying, a team can be better than its parts\n\nActivation Energy\n\nCatalysts\n\nRelativity\n\nFriction\n\nViscosity\n\nVelocity\n\nEnergy\n\nEntropy\n\nEvolution\n\nEcosystems\n\nNiches\n\nHierarchical Organization\n\nIncentives\n\nTendency to preserve energy\n\nFeedback loops\n\nBottlenecks\n\nConstraints\n\nEquilibrium\n\nChurn\n\nCompunding\n\nAtomicity\n\nMargin of Safety and Backup Systems\n\nCriticality\n\nEmergence\n\nChaos\n\nDistributions\n\nLaw of Large Numbers\n\nRegression to the Mean\n\nSurface Area\n\nGlobal and Local Maxima\n\nRandomness\n\nAlgebraic Equivalence, Seemingly two different things can be the same\n\nCounterinsurgency\n\nAsymmetric Warfare\n\nSee the Front\n\nMutually Assured Destruction\n\n\n\nRed Queen Effect, “Now, here, you see, it takes all the running you can do, to keep in the same place. (Alice in Wonderland)\n\nAttention traps are like bacteria, marketing slogans, slot machines, headlines\n\nWhen systems look broken, it’s often because the function they’re really trying to serve is not what we think. Schools, hospitals, politics\n\nMultiplying by Zero\n\nOnce you got somewhere happy, it would be stupid to shake it up further\n\nTake the impossible and make it costly\n\nCool off slowly\n\nSpend the afternoon, you cant take it with you\n\n"
        },
    
      {
        "title"    : "Movies &amp; Series",
        "category" : "",
        "tags"     : "",
        "url"      : "/essais/movies/",
        "date"     : "2022-09-25 16:35:07 +0300",
        "content"  : "Movies\n\nIt’s a Wonderful Life (1946)\n\nBicycle Thieves (1948)\n\nIkiru (1952)\n\nSeven Samurai (1954)\n\n12 Angry Men (1957)\n\nWild Strawberries (1957)\n\nVertigo (1958)\n\nLawrence of Arabia (1962)\n\n8½ (1963)\n\nPersona (1966)\n\nThe Godfather (1972)\n\nOne Flew Over the Cuckoo’s Nest (1975)\n\nAmadeus (1984)\n\nOnce Upon a Time in America (1984)\n\nBack to the Future (1985)\n\nThe Sacrifice (1986)\n\nThe Remains of the Day (1993)\n\nGroundhog Day (1993)\n\nLéon: The Professional (1994)\n\nPulp Fiction (1994)\n\nThe Shawshank Redemption (1994)\n\nBraveheart (1995)\n\nThe Fellowship of the Ring (2001)\n\nA Beautiful Mind (2001)\n\nSpirited Away (2001)\n\nLost in Translation (2003)\n\nHotel Rwanda (2004)\n\nBlood Diamond (2006)\n\nThe Lives of Others (2006)\n\nRatatouille (2007)\n\nShutter Island (2010)\n\nThe Intouchables (2011)\n\n12 Years a Slave (2013)\n\nInterstellar (2014)\n\nCapernaum (2018)\n\nSoul (2020)\n\nSeries\n\nRick and Morty (2013)\n\nThe Sandman (2022)\n\nWatchlist\n\nThe Wizard of Oz\n\n"
        },
    
      {
        "title"    : "Poems",
        "category" : "",
        "tags"     : "",
        "url"      : "/essais/poems/",
        "date"     : "2022-09-25 16:35:07 +0300",
        "content"  : "“I think that I shall never see\n\nA poem lovely as a tree.”\n\n\n\n“Have little and gain much\n\nHave much and be confused”\n\n\n\n“Il faut cultiver notre jardin”\n\nWe must cultivate our garden\n\nVoltaire\n\n\n\nAll that is gold does not glitter,\n\nNot all those who wander are lost;\n\nThe old that is strong does not wither,\n\nDeep roots are not reached by the frost.\n\n\n\nBeautiful is the moment,\n\nWhen the heart indifferent\n\nTo joy or sorrow, just trusts\n\nWhatever this life brings\n\nBut finds time to just be.\n\n\n\nThe best lack all conviction,\n\nwhile the worst\n\nAre full of passionate intensity.\n\n\n\nEnjoy yourself, enjoy yourself, it’s later than you think\n\n\n\nMany years later, as he faced the firing squad, Colonel Aureliano Buendía was to remember that distant afternoon when his father took him to discover ice.\n\n\n\nOn the day they were to kill him, Santiago Nasar arose at five thirty in the morning to wait for the boat carrying the bishop.\n\n\n\nthe danger is to lose who we are,\n\nour character, integrity, warmth\n\n\n\n“The world needs a wash and a week’s rest.”\n\n\n\nMay it be a light to you in dark places, when all other lights go out.\n\n\n\nSell your cleverness and buy bewilderment.\n\n\n\nAll that we see or seem is but a dream within a dream.\n"
        },
    
      {
        "title"    : "Şiirler",
        "category" : "",
        "tags"     : "",
        "url"      : "/essais/poemtr/",
        "date"     : "2022-09-25 16:35:07 +0300",
        "content"  : "çevrende herkes şaşırsa bunu da senden bilse sen aklı başında kalabilirsen eğer\n\nherkes senden kuşku duyarken hem kuşkuya yer bırakır hem kendine güvenebilirsen eğer\n\nbekleyebilirsen usanmadan yalanla karşılık vermezsen yalana\n\nkendini evliya sanmadan kin tutmayabilirsen kin tutana\n\ndüşlere kapılmadan düş kurabilir yolunu saptırmadan düşünebilirsen eğer\n\nne kazandım diye sevinir, ne yıkıldım diye yerinir ikisine de vermeyebilirsen değer\n\nsöylediğin gerçeği eğip büken düzenbaz kandırabilir diye safları dert edinmezsen\n\nömür verdiğin işler bozulsa da yılmaz koyulabilirsen işe yeniden\n\ndöküp ortaya varını yoğunu bir yazı-turada yitirsen bile yitirdiklerini dolamaksızın dile baştan tutabilirsen yolunu\n\nyüreğine sinirine dayan diyecek direncinden başka şeyin kalmasa da herkesin bırakıp gittiği noktada sen dayanabilirsen tek\n\nherkesle düşüp kalkar erdemli kalabilirsen unutmayabilirsen halkı krallarla gezerken\n\ndost da düşman da incitemezse seni, ne küçümser ne de büyültürsen çevreni\n\nher saatin her dakkasına emeğini katarsan hakçasına\n\nher şeyiyle dünya önüne serilir üstelik oğlum adam oldun demektir\n\nRudyard KIPLING\n\nÇeviri: Bülent ECEVİT\n\n\n\nBugün pazar.\n\nBugün beni ilk defa güneşe çıkardılar.\n\nVe ben ömrümde ilk defa gökyüzünün bu kadar benden uzak\n\nbu kadar mavi\n\nbu kadar geniş olduğuna şaşarak\n\nkımıldanmadan durdum.\n\n\n\nSonra saygıyla toprağa oturdum,\n\ndayadım sırtımı duvara.\n\nBu anda ne düşmek dalgalara,\n\nbu anda ne kavga, ne hürriyet, ne karım.\n\nToprak, güneş ve ben…\n\nBahtiyarım…\n\n\n\nYaşamak bir ağaç gibi tek ve hür\n\nve bir orman gibi kardeşçesine\n\n\n\nMemleket mi, daha uzak,\n\ngençliğim mi, yıldızlar mı?\n\nBayramoğlu, Bayramoğlu,\n\nölümden öte köy var mı?\n\n\n\nSen sabahlar ve şafaklar kadar güzelsin\n\nsen ülkemin yaz geceleri gibisin\n\n\n\nHoş geldin kadınım benim hoş geldin\n\nayağını bastın odama\n\nkırk yıllık beton, çayır çimen şimdi\n\ngüldün,\n\ngüller açıldı penceremin demirlerinde\n\nağladın,\n\navuçlarıma döküldü inciler\n\ngönlüm gibi zengin\n\nhürriyet gibi aydınlık oldu odam…\n\nHoş geldin kadınım benim hoş geldin.\n\n\n\nAnayasası İnsanın\n\nUstamız Eluard’ın izinden\n\nKan yasası bu insanın:\n\nÜzümden şarap yapacaksın\n\nÇakmak taşından ateş\n\nVe öpücüklerden insan!\n\nCan yasası bu insanın:\n\nSavaşlara yoksulluklara\n\nVe binbir belaya karşın\n\nİlle de yaşayacaksın!\n\nUs yasası bu insanın:\n\nSuyu şavka döndürüp\n\nDüşü gerçeğe çevirip\n\nDüşmanı dost kılacaksın!\n\nAnayasası bu insanın\n\nEmekleyen çocuktan\n\nUzayda koşana dek\n\nYürürlükte her zaman\n\n\n\nBereket Versin\n\nYaşama bir gitardır\n\nTellerine vurdukça yediveren\n\nGüneş nasıl doğarsa\n\nVe yeşil ne kadar solaksa\n\nSaksofon ne kadar benziyorsa asma kabaklarına\n\nBir sebzevat kokusu sarıyor ortalığı\n\nSanki sırık tomatları biz kızardık diyorlar\n\nSantana çaldıkça\n\nKurbağalar ötüyor tosbağalar yürüyor\n\nBeni bir bostana gömün\n\nGübre olmak istiyorum\n\nCan Yücel\n\n\n\nOrhan veli\n\nDenizlerimiz var, güneş içinde;\n\nAğaçlarımız var, yaprak içinde;\n\nSabah akşam gider gider geliriz,\n\nDenizlerimizle ağaçlarımız arasında,\n\nYokluk içinde.\n\n\n\nHer gün bu kadar güzel mi bu deniz?\n\nBöyle mi görünür gökyüzü her zaman?\n\nHer zaman güzel mi bu kadar,\n\nBu eşya, bu pencere?\n\nDeğil,\n\nVallahi değil;\n\nBir iş var bu işin içinde.\n\n\n\nBeni bu güzel havalar mahvetti,\n\nBöyle havada istifa ettim\n\nEvkaftaki memuriyetimden.\n\nTütüne böyle havada alıştım,\n\nBöyle havada aşık oldum;\n\nEve ekmekle tuz götürmeyi\n\nBöyle havalarda unuttum;\n\nŞiir yazma hastalığım\n\nHep böyle havalarda nüksetti;\n\nBeni bu guzel havalar mahvetti.\n\n\n\nBilmezdim şarkıların bu kadar güzel,\n\nKelimelerinse kifayetsiz olduğunu\n\nBu derde düşmeden önce.\n\n\n\nBenim de mi düşüncelerim olacaktı,\n\nBen de mi böyle uykusuz kalacaktım,\n\nSessiz, sedasız mı olacaktım böyle?\n\nÇok sevdiğim salatayı bile\n\nAramaz mı olacaktım?\n\nBen böyle mi olacaktım?\n\n\n\nBaharın İlk Sabahları\n\nTüyden hafif olurum böyle sabahlar\n\nKarsı damda bir güneş parçası,\n\nİçimde kuş cıvıltıları, şarkılar;\n\nBağıra çağıra düşerim yollara;\n\nDöner döner durur basım havalarda.\n\n\n\nSanırım ki günler hep güzel gidecek;\n\nHer sabah böyle bahar;\n\nNe is güç gelir aklıma, ne yoksulluğum.\n\nDerim ki: ‘Sıkıntılar durdursun!’\n\nSairliğimle yetinir,\n\nAvunurum.\n\n\n\nyaşamak\n\nBiliyorum, kolay değil yaşamak,\n\nGönül verip türkü söylemek yar üstüne;\n\nYıldız ışığında dolaşıp geceleri,\n\nGündüzleri gün ışığında ısınmak;\n\nŞöyle bir fırsat bulup yarım gün,\n\nYan gelebilmek Çamlıca tepesine…\n\n-Bin türlü mavi akar Boğaz’dan-\n\nHer şeyi unutabilmek maviler içinde.\n\nBiliyorum, kolay değil yaşamak;\n\nAma işte\n\nBir ölünün hala yatağı sıcak,\n\nBirinin saati işliyor kolunda.\n\nYaşamak kolay değil ya kardeşler,\n\nÖlmek de değil;\n\nKolay değil bu dünyadan ayrılmak.\n\n\n\n"
        },
    
      {
        "title"    : "Problem Solving",
        "category" : "",
        "tags"     : "",
        "url"      : "/essais/problem-solving/",
        "date"     : "2022-09-25 16:35:07 +0300",
        "content"  : "Prevention is the best\n\n\n\nDon’t panic\n\nStart small\n\nSanity check\n\n\n\nGo see the source\n\nSee examples\n\nAsk a lot of questions\n\nQuestion assumptions\n\nTake a break\n\n\n\nSymptoms vs root cause\n\nState the problem clearly\n\nTest hypotheses\n\n\n\nTake a walk\n\nGet some sleep\n\nTake a shower\n\nSpeak with a friend\n\n\n\nGrinding your wheels won’t solve your problem\n\nGive your mind some space\n\n"
        },
    
      {
        "title"    : "Public speaking",
        "category" : "",
        "tags"     : "",
        "url"      : "/essais/public-speaking/",
        "date"     : "2022-09-25 16:35:07 +0300",
        "content"  : "Focus on the audience\n\nWhat is the bottom line?\n\nSpeak clearly, with enthusiasm\n\nKeep it short and sweet\n"
        },
    
      {
        "title"    : "Questions",
        "category" : "",
        "tags"     : "",
        "url"      : "/essais/questions/",
        "date"     : "2022-09-25 16:35:07 +0300",
        "content"  : "What is in my control?\n\nWhat is not?\n\n\n\nWhat do I not want in life?\n\n\n\nWhat would my best version do?\n\n\n\nIs this the most important thing I should be working on?\n\nWhat seems like work to other people yet play to me?\n\n\n\nHow do I feel?\n\nWould I treat a friend as I treat myself?\n\n\n\nWhat really matters?\n\nWhat doesn’t matter?\n\n\n\nWhat would I do if I knew I would die this year?\n\n\n"
        },
    
      {
        "title"    : "Stupidity",
        "category" : "",
        "tags"     : "",
        "url"      : "/essais/stupidity/",
        "date"     : "2022-09-25 16:35:07 +0300",
        "content"  : "Bad judgement\n\nChoosing an inappropriate model to interpret reality\n\nEither lacking the correct model, or not considering it even if you are aware\n\nBeing dumb is different from stupidity, its more like lacking the mental capacity\n\nIgnorance isn’t stupidity. Smart or educated people can also be very stupid\n\n"
        },
    
      {
        "title"    : "Teamwork in Art of War",
        "category" : "",
        "tags"     : "",
        "url"      : "/essais/teamwork-in-art-of-war/",
        "date"     : "2022-09-25 16:35:07 +0300",
        "content"  : "Everyone in team should share the goal\n\nHighly trained and talented generals, autonomus in military decisions\n\nDiscipline, consistency, and certainty in reward and punishment\n\nObeyable orders\n\nRight person in right place\n\nHarmony in team\n\n"
        },
    
      {
        "title"    : "How to write better?",
        "category" : "",
        "tags"     : "",
        "url"      : "/essais/write-better/",
        "date"     : "2022-09-25 16:35:07 +0300",
        "content"  : "Write a lot\n\nDefine your audience\n\nDefine your goal\n\nAsk a lot of questions\n\nSet out to answer your questions\n\nUse simple words\n\nParaphrase\n\nIterate\n\nLess is more\n\n"
        },
    
        {}
        ,
  
    
      {
        "title"    : "Advice",
        "category" : "",
        "tags"     : "",
        "url"      : "/links/advice/",
        "date"     : "2022-09-25 16:35:07 +0300",
        "content"  : "https://blog.samaltman.com/the-days-are-long-but-the-decades-are-short\n\nhttps://kk.org/thetechnium/68-bits-of-unsolicited-advice/\n\nhttps://lethain.com/career-advice/\n\nhttps://training.kalzumeus.com/newsletters/archive/do-not-end-the-week-with-nothing\n\nhttps://training.kalzumeus.com/newsletters/archive/consulting_1\n\nhttps://www.kalzumeus.com/2012/01/23/salary-negotiation/\n\nhttps://www.simplethread.com/20-things-ive-learned-in-my-20-years-as-a-software-enginee\n\n"
        },
    
      {
        "title"    : "Ask HN",
        "category" : "",
        "tags"     : "",
        "url"      : "/links/ask-hn/",
        "date"     : "2022-09-25 16:35:07 +0300",
        "content"  : "Ask HN: Should I quit the field of software development? - Hacker News\n\nAsk HN: What is your favorite motto? - Hacker News\n\nAsk HN: What is the best enterprise software you use every day? - Hacker News\n\nAsk HN: Which tools have made you a much better programmer? - Hacker News\n\nAsk HN: My wife might lose the ability to speak in 3 weeks – how to prepare? - Hacker News\n\nAsk HN: A way to adblock “we’re using cookies” popups? - Hacker News\n\nAsk HN: What are your go to SaaS products for startups/MVPs? - Hacker News\n\nAsk HN: What’s the worst piece of software you use everyday? - Hacker News\n\nAsk HN: How can I quickly trim my AWS bill? - Hacker News\n\nAsk HN: What makes a good technical leader – any recommended books? - Hacker News\n\nAsk HN: What weird or hard problems are you trying to solve? - Hacker News\n\nAsk HN: Did you take any fresh MOOCs as of 2020? - Hacker News\n\nAsk HN: What are your favorite developer-efficiency tips? - Hacker News\n\nAsk HN: What are must-know concepts for back end development? - Hacker News\n\nAsk HN: How can I pick a side project and stick with it? - Hacker News\n\nAsk HN: What do top engineers you know do that others don’t? - Hacker News\n\nAsk HN: What is the dark side of working at a successful startup? - Hacker News\n\nAsk HN: Why did your startup fail and what did you learn? - Hacker News\n\nAsk HN: I’m a software engineer going blind, how should I prepare? - Hacker News\n\nAsk HN: Best books you read in the past decade? - Hacker News\n\nAsk HN: Learning the business-side of things as a developer? - Hacker News\n\nAsk HN: Advice for a new and inexperienced tech lead? - Hacker News\n\nAsk HN: What’s the most important modern simple invention? - Hacker News\n\nAsk HN: What’s the fastest tool for basic CRUD? - Hacker News\n\nAsk HN: Are you put off building something because it already exists? - Hacker News\n\nAsk HN: What is your money-making side project outside programming? - Hacker News\n\nAsk HN: Pros and cons of working at a startup in 2018? - Hacker News\n\nAsk HN: How did you decide what problems to solve in your lifetime? - Hacker News\n\nAsk HN: How much do you make at Amazon? Here is how much I make at Amazon - Hacker News\n\nAsk HN: What Skills to Acquire in 2020? - Hacker News\n\nAsk HN: How do you learn complex, dense technical information? - Hacker News\n\nAsk HN: What are some examples of good database schema designs? - Hacker News\n\nAsk HN: Moving from a startup to a big co, what should I be aware of? - Hacker News\n\nAsk HN: What are your news sources other than HN? - Hacker News\n\nAsk HN: What are your favorite low-coding apps / tools as a developer?\n\nAsk HN: Which is the most successful one-person business you heard of in 2019? - Hacker News\n\nAsk HN: What mistakes did you make when starting as a consultant/freelancer? - Hacker News\n\nAsk HN: Are there any openly available software architecture documents? - Hacker News\n\nAsk HN: What do top engineers you know do that others don’t? - Hacker News\n\nAsk HN: Advice for a new and inexperienced tech lead? - Hacker News\n\nAsk HN: What are your favorite developer-efficiency tips? - Hacker News\n\nAsk HN: What are must-know concepts for back end development? - Hacker News\n\nAsk HN: How can I pick a side project and stick with it? - Hacker News\n\nAsk HN: What’s the most important modern simple invention? - Hacker News\n\nAsk HN: What’s the fastest tool for basic CRUD? - Hacker News\n\nAsk HN: How do you create a successful community from zero? - Hacker News\n\nAsk HN: Do you ever contact people who have had a positive impact on you? - Hacker News\n\n"
        },
    
      {
        "title"    : "Blog posts",
        "category" : "",
        "tags"     : "",
        "url"      : "/links/blogs/",
        "date"     : "2022-09-25 16:35:07 +0300",
        "content"  : "psychology of tech\n\nCalm Technology\n\nMinimalism — An undervalued development skill\n\nHow Technology is Hijacking Your Mind — from a Magician and Google Design Ethicist\n\nadvice\n\nhacker laws\n\nAvoid Working Alone – Letters To A New Developer\n\nThings end users care about but programmers don’t - Instadeq Blog\n\nPete Shirley’s Graphics Blog: How to succeed as a poor programmer\n\nRules of thumb for a 1x developer - The Other Mickey Wiki\n\nThe mythical 10x programmer by antirez\n\nJulio Biason .Net 4.1 - Things I Learnt The Hard Way (in 30 Years of Software Development)\n\nThe Ten Commandments of Egoless Programming\n\nLessons Learned in Software Development\n\nI could do that in a weekend!\n\nHow to write the perfect pull request - The GitHub Blog\n\nWhat every computer science major should know\n\ngames\n\nOn Games\n\nVideo Games are the Future of Education\n\nwriting\n\nSummary of Technical Writing One  -  Google Developers\n\nSummary of Technical Writing Two  -  Google Developers\n\nstartup\n\nfast\n\nFounder to CEO: How to build a great company from the ground up - Hacker News\n\nJetBrains: $270M revenue, 405K paying users, $0 raised - Hacker News\n\nHow the biggest consumer apps got their first 1,000 users - Issue 25 - Lenny’s Newsletter\n\n#2 How VC works - A Beginner’s Guide - Simplanations\n\nA Few Rules\n\nStart with a Website, Not a Mobile App - Hacker News\n\nStartup Playbook - Hacker News\n\nendler\n\nRunning Legacy Code - Matthias Endler\n\nBeing a Professional Programmer - Matthias Endler\n\nMaking Myself Obsolete - Matthias Endler\n\nMaybe You Don’t Need Kubernetes - Matthias Endler\n\nHacker Folklore - Matthias Endler\n\nprogramming\n\nThe Joel Test: 12 Steps to Better Code – Joel on Software\n\nSoftware development 450 words per minute – Vincit\n\nHow to Build Good Software\n\nAPI Practices If You Hate Your Customers - ACM Queue\n\nWhy are we so bad at software engineering? - www.bitlog.com\n\nAkin’s Laws of Spacecraft Design\n\nDesign Driven Development — Using Design as a Tool for Teamwork\n\nThings You Should Never Do, Part I – Joel on Software\n\nIs High Quality Software Worth the Cost?\n\nWhat Does a Coder Do If They Can’t Type? - Objective Funk\n\nWeb Design - The First 100 Years\n\ngeneral\n\nThe Hacker Classics\n\nHow SEO Ruined the Internet — Superhighway 98\n\nThe Observer Effect – Marc Andreessen\n\nAll the best engineering advice I stole from non-technical people\n\nA new kind of map: it’s about time - Points of interest\n\nProgramming Language Checklist\n\nThe Twelve-Factor App\n\nBrowser Extensions - Mozilla - MDN\n\nThe end of the Redis adventure\n\nSoftware Engineering Within SpaceX - Yasoob Khalid\n\nIs a trillion-dollar worth of programming lying on the ground\n\nDan McKinley :: Choose Boring Technology\n\nmetaESC – Aceso Under Glass\n\nResearchers and Founders - Sam Altman\n\nunim.press\n\nhttps://pdos.csail.mit.edu/6.824/quizzes/q20-2-sol.txt\n\nCNN Explainer\n\nComputers - Timeline of Computer History - Computer History Museum\n\nA Terrible, Horrible, No-Good, Very Bad Day at Slack\n\nWeb Monetization · A JavaScript browser API which allows the creation of a payment stream from the user agent to the website\n\niiSM.org\n\nArticles — Brandur Leach\n\nFuture with Elon\n\nWhy HN was down - Hacker News\n\nProsecutor as bully - Hacker News\n\n94-year-old Lithium-Ion Battery Inventor Introduces Solid State Battery - Hacker News\n\nHow to do hard things - Hacker News\n\nBreaking down Amazon’s mega dropdown - Hacker News\n\nI Quit: What really goes on at Apple - Hacker News\n\n9th Circuit holds that scraping a public website does not violate the CFAA [pdf] - Hacker News\n\nQuick tip for developers who use OS X - Hacker News\n\nData Structures &amp; Algorithms I Actually Used Working at Tech Companies - The Pragmatic Engineer\n\nOne of the Brains Behind Tesla May Have a New Way to Make Electric Cars Cheaper - WSJ\n\nTweet Photo got acquired - Marc Köhlbrugge\n\nWhat Silicon Valley Doesn’t Understand About Agriculture – Thinking Agriculture\n\nOn Coding, Ego and Attention\n\nReadings in Database Systems, 5th Edition\n\nThe Google ‘vs’ Trick - Applied Data Science - Medium\n\n"
        },
    
      {
        "title"    : "Liked writings",
        "category" : "",
        "tags"     : "",
        "url"      : "/links/liked-writings/",
        "date"     : "2022-09-25 16:35:07 +0300",
        "content"  : "We are complicit in our employer’s deeds\n\nhttps://drewdevault.com/2020/05/05/We-are-complicit-in-our-employers-deeds.html\n\n\n\n“How to Grow Old” by Bertrand Russell\n\nhttps://sites.google.com/site/gobenyan/essay\n\n\n\nActive days feel longer, a week of traveling feels like a month\n\nhttps://www.raptitude.com/2018/05/how-to-slow-down-time/\n\n\n\nDriving lessons from fighter pilots\n\nLookout scan: move your head and focus at 3 different points, close, mid, far\n\n\n\nYour Professional Decline Is Coming (Much) Sooner Than You Think\n\n\nWe live in a world built mostly for cars\n\nhttps://www.theguardian.com/cities/2018/sep/18/paradise-life-spanish-city-banned-cars-pontevedra\n\nhttps://metropolisjapan.com/why-tokyo-works/\n\nhttps://www.strongtowns.org/journal/2021/1/6/college-campuses-as-a-model-for-urban-planning\n\n\n\nThe Essence of Information - Matthias Endler\n\nWhat we do is information science, to find a general way to solve a whole class of problems. This is why we love programming and algorithms. Organizing information is so satisfying and computers just happen to be a useful tool for the end goal.\n\n\n\nDRMacIver’s Notebook: The social obligation to be bad at things\n\nAs if the social norms are designed to prevent from trying\n\nTelling you are good is arrogance, telling you are bad is weakness, trying something new embarrassing\n\n\n\nRepetitive Strain Injury (RSI): Causes, Prevention, and More\n\n\n\nHistory of the Internet - Wikipedia\n\n1965 to 1995, 30 years, full of good ideas, collaboration, competition\n\n\n\nDude, you broke the future! - Charlie’s Diary\n\n90% of the future is already here, 9% are not here but predictable by extrapolating trends, 1% are unknown unknowns\n\nHistory tends to repeat itself as soon as the lessons of events slip from the living memory.\n\nCompanies are AIs, humans are their replacable cells. Like paperclip maximizers, they work to maximize revenue disregarding the cost on society, human happiness, and environment\n\n\n\n"
        },
    
      {
        "title"    : "For makers",
        "category" : "",
        "tags"     : "",
        "url"      : "/links/makerspace/",
        "date"     : "2022-09-25 16:35:07 +0300",
        "content"  : "Lists\n\n500 Lines or Less\n\ntuvtran/project-based-learning: Curated list of project-based tutorials\n\ndanistefanovic/build-your-own-x: 🤓 Build your own (insert technology here)\n\nChallenging projects every programmer should try\n\nweb\n\nHow do you create a video chat application?\n\nLet’s Build A Web Server. Part 1. - Ruslan’s Blog\n\nLet’s Build A Web Server. Part 3. - Ruslan’s Blog\n\nLet’s Create a Simple Load Balancer With Go - kasvith.me - a personal blog space\n\nhttp server\n\nIntroduction · Build web application with Golang\n\nWriting Web Applications - The Go Programming Language\n\nBuilding a Simple Chat App With Elixir and Phoenix - Sheharyar Naseer\n\nGet into http package · Build web application with Golang\n\nBuilding a BitTorrent client from the ground up in Go - Jesse Li\n\nThinking in React Hooks\n\ncontainers\n\nContainers the hard way: Gocker: A mini Docker written in Go - Unixism\n\nLinux containers in a few lines of code\n\nlanguages\n\nHow to write a (toy) JVM\n\nLet’s make a Teeny Tiny compiler, part 2 - Austin Z. Henley\n\nasyncio: We Did It Wrong – roguelynn\n\nBaby’s First Garbage Collector – journal.stuffwithstuff.com\n\ncompilers\n\nA crash course in compilers – Increment: Programming Languages\n\nMy First Language Frontend with LLVM Tutorial — LLVM 10 documentation\n\nKaleidoscope: Kaleidoscope Introduction and the Lexer — LLVM 10 documentation\n\nmal/impls/python at master · kanaka/mal\n\nCompiler Construction\n\nSo You Want to Be a (Compiler) Wizard // -dealloc\n\nNicole Orchard\n\nInterpreters\n\nkanaka/mal: mal - Make a Lisp\n\nA Map of the Territory · Crafting Interpreters\n\n(How to Write a (Lisp) Interpreter (in Python))\n\nLet’s Build A Simple Interpreter. Part 11. - Ruslan’s Blog\n\n(An ((Even Better) Lisp) Interpreter (in Python))\n\nrobpike/lisp: Toy Lisp 1.5 interpreter\n\nOS\n\nMiniOS/kernel at master · luisfmcalado/MiniOS\n\nWriting an OS in Rust\n\nWriting a Unix Shell - Part I – Cracking The Code\n\nnetwork\n\nsaminiir/level-ip: A hacker’s userspace TCP/IP stack\n\nReal time communication with WebRTC\n\ncomputer graphics\n\nssloy/tinyrenderer: A brief computer graphics / rendering course\n\nScratchapixel\n\n6 Useful Snippets\n\nsystems\n\nMemory Allocators 101 - Write a simple memory allocator - Arjun Sreedharan\n\nbrowser\n\nLet’s build a browser engine! Part 1: Getting started\n\ngit\n\nWrite yourself a Git!\n\ndatabases\n\nDatabase basics: writing a SQL database from scratch in Go - notes.eatonphil.com\n\nHow to Implement Search By Color When All You Have is A Good Coffee - Mike Alche\n\nNLP\n\nAdvanced NLP with spaCy · A free online course\n\nalgorithms\n\nhackerrank\n\ndevops\n\nsnori74/linuxupskillchallenge: Learn the skills required to sysadmin a remote Linux server from the commandline.\n\nother\n\nHow to Write a Spelling Corrector\n\nBuilding a search engine from scratch\n\nIndex of /en/500L\n\nEryb’s Space\n\nTorrent downloads and distributions for IP 78.175.225.36\n\nIndexing Billions of Text Vectors\n\nRecommendation System Series Part 2: The 10 Categories of Deep Recommendation Systems That Academic Researchers Should Pay Attention To — James Le\n\nlearning\n\nIntroduction to Information Retrieval\n\nRegular Expressions for Regular Folk - Regular Expressions for Regular Folk (REFRF)\n\nalex/what-happens-when: An attempt to answer the age old interview question “What happens when you type google.com into your browser and press enter?”\n\nHow Browsers Work: Behind the scenes of modern web browsers - HTML5 Rocks\n\nbackend questions\n\nGetting Started with WebRTC - HTML5 Rocks\n\nIn depth guide to running Elasticsearch in production – TechNotes\n\nHow does SQLite work? Part 1: pages!\n\ndata-science-interviews/technical.md at master · alexeygrigorev/data-science-interviews\n\nOne second code: Do YOU know how much your computer can do in a second?\n\n20 lines of code that will beat A/B testing every time\n"
        },
    
      {
        "title"    : "Stack exchange",
        "category" : "",
        "tags"     : "",
        "url"      : "/links/stx/",
        "date"     : "2022-09-25 16:35:07 +0300",
        "content"  : "Highest Voted Questions - User Experience Stack Exchange\n\nHighest Voted Questions - Cryptography Stack Exchange\n\nHighest Voted Questions - Server Fault\n\nHighest Voted Questions - Super User\n\nHighest Voted Questions - Cross Validated\n\nHighest Voted Questions - Software Engineering Stack Exchange\n\nHighest Voted Questions - Network Engineering Stack Exchange\n\nHighest Voted Questions - Information Security Stack Exchange\n\nCode Review Stack Exchange\n\nHighest Voted Questions - Data Science Stack Exchange\n\nHighest Voted Questions - Engineering Stack Exchange\n\nHighest Voted Questions - Lifehacks Stack Exchange\n\nHighest Voted Questions - Interpersonal Skills Stack Exchange\n\nHighest Voted Questions - Personal Finance &amp; Money Stack Exchange\n\nHighest Voted Questions - Parenting Stack Exchange\n\nHighest Voted Questions - Computer Science Stack Exchange\n\nHighest Voted Questions - Psychology &amp; Neuroscience Stack Exchange\n\nHighest Voted Questions - Economics Stack Exchange\n\nHighest Voted Questions - Freelancing Stack Exchange\n\nHighest Voted Questions - Writing Stack Exchange\n\nHighest Voted Questions - Philosophy Stack Exchange\n\nAll Sites - Stack Exchange\n"
        },
    
        {}
        ,
  
    
        {}
        ,
  
    
      {
        "title"    : "Tiny blockchain in 100 lines",
        "category" : "",
        "tags"     : "",
        "url"      : "/projects/block/",
        "date"     : "2022-09-25 16:35:07 +0300",
        "content"  : "\n\n"
        },
    
      {
        "title"    : "A garbage collector in C from scratch",
        "category" : "",
        "tags"     : "",
        "url"      : "/projects/gc/",
        "date"     : "2022-09-25 16:35:07 +0300",
        "content"  : "a garbage collector, replicating https://github.com/munificent/mark-sweep step by step\n\n\n\n"
        },
    
      {
        "title"    : "Predict movie genres using ML classifiers",
        "category" : "",
        "tags"     : "",
        "url"      : "/projects/genres/",
        "date"     : "2022-09-25 16:35:07 +0300",
        "content"  : "\n\n"
        },
    
      {
        "title"    : "A hash table in C from scratch",
        "category" : "",
        "tags"     : "",
        "url"      : "/projects/hashmap/",
        "date"     : "2022-09-25 16:35:07 +0300",
        "content"  : "a hash map implementation in C, inspired by https://github.com/jamesroutley/write-a-hash-table\n\n\n\n"
        },
    
      {
        "title"    : "Logos, a very basic operating system kernel from scratch",
        "category" : "",
        "tags"     : "",
        "url"      : "/projects/os/",
        "date"     : "2022-09-25 16:35:07 +0300",
        "content"  : "Modern life runs on computers, and they run on operating systems\n\nSo how do they really work? What happens under the hood?\n\nQuestions follow each other.\n\n\n\nThis is a project to understand and replicate the great os-tutorial\n\nLogos bootloads a kernel, connects to the keyboard and screen, and starts a basic shell\n\nhttps://github.com/selimslab/logos\n\n\n\nThese two books helped me a lot, as well as spending a few hours on os-dev wiki\n\n\n  Operating Systems: From 0 to 1\n  Writing a Simple Operating System — from Scratch\n\n\n\n\nReading Operating Systems: Three Easy Pieces helped me cover more OS concepts, like scheduling, virtualization, file systems, concurrency, ..\n\nContainers\n\nAlthough OS provides process isolation, containers provide more isolation and ease on top of that\n\nContainers From Scratch • Liz Rice • GOTO 2018 is a great look under the hood for what really is a container\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\npackage main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"os\"\n\t\"os/exec\"\n\t\"path/filepath\"\n\t\"strconv\"\n\t\"syscall\"\n)\n\n// go run main.go run &lt;cmd&gt; &lt;args&gt;\nfunc main() {\n\tswitch os.Args[1] {\n\tcase \"run\":\n\t\trun()\n\tcase \"child\":\n\t\tchild()\n\tdefault:\n\t\tpanic(\"help\")\n\t}\n}\n\nfunc run() {\n\tfmt.Printf(\"Running %v \\n\", os.Args[2:])\n\n\tcmd := exec.Command(\"/proc/self/exe\", append([]string{\"child\"}, os.Args[2:]...)...)\n\tcmd.Stdin = os.Stdin\n\tcmd.Stdout = os.Stdout\n\tcmd.Stderr = os.Stderr\n\tcmd.SysProcAttr = &amp;syscall.SysProcAttr{\n\t\tCloneflags:   syscall.CLONE_NEWUTS | syscall.CLONE_NEWPID | syscall.CLONE_NEWNS,\n\t\tUnshareflags: syscall.CLONE_NEWNS,\n\t}\n\n\tmust(cmd.Run())\n}\n\nfunc child() {\n\tfmt.Printf(\"Running %v \\n\", os.Args[2:])\n\n\tcg()\n\n\tcmd := exec.Command(os.Args[2], os.Args[3:]...)\n\tcmd.Stdin = os.Stdin\n\tcmd.Stdout = os.Stdout\n\tcmd.Stderr = os.Stderr\n\n\tmust(syscall.Sethostname([]byte(\"container\")))\n\tmust(syscall.Chroot(\"/home/liz/ubuntufs\"))\n\tmust(os.Chdir(\"/\"))\n\tmust(syscall.Mount(\"proc\", \"proc\", \"proc\", 0, \"\"))\n\tmust(syscall.Mount(\"thing\", \"mytemp\", \"tmpfs\", 0, \"\"))\n\n\tmust(cmd.Run())\n\n\tmust(syscall.Unmount(\"proc\", 0))\n\tmust(syscall.Unmount(\"thing\", 0))\n}\n\nfunc cg() {\n\tcgroups := \"/sys/fs/cgroup/\"\n\tpids := filepath.Join(cgroups, \"pids\")\n\tos.Mkdir(filepath.Join(pids, \"liz\"), 0755)\n\tmust(ioutil.WriteFile(filepath.Join(pids, \"liz/pids.max\"), []byte(\"20\"), 0700))\n\t// Removes the new cgroup in place after the container exits\n\tmust(ioutil.WriteFile(filepath.Join(pids, \"liz/notify_on_release\"), []byte(\"1\"), 0700))\n\tmust(ioutil.WriteFile(filepath.Join(pids, \"liz/cgroup.procs\"), []byte(strconv.Itoa(os.Getpid())), 0700))\n}\n\nfunc must(err error) {\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n\n"
        },
    
      {
        "title"    : "An interpreter in Python for a subset of PASCAL",
        "category" : "",
        "tags"     : "",
        "url"      : "/projects/pascal/",
        "date"     : "2022-09-25 16:35:07 +0300",
        "content"  : "View step by step at https://github.com/selimslab/mini/pascal\n\ninspired by Peter Norvig’s lis.py\n\n\n\n\n\n"
        },
    
      {
        "title"    : "Principal Component Analysis",
        "category" : "",
        "tags"     : "",
        "url"      : "/projects/pca/",
        "date"     : "2022-09-25 16:35:07 +0300",
        "content"  : "Sometimes a few dimensions explain most of the variability\n\nHere 96 dimensional feature vectors are generated by Gaussian distributions\n\nThen they are reduced to 3 dimensions using Principal Componenet Analysis\n\nThen they are visualized and classified\n\nclick to view the colab notebook\n"
        },
    
      {
        "title"    : "A search engine with page rank, in 200 lines",
        "category" : "",
        "tags"     : "",
        "url"      : "/projects/search/",
        "date"     : "2022-09-25 16:35:07 +0300",
        "content"  : "\n\n"
        },
    
        {}
        ,
  
    
      {
        "title"    : "Algorithms",
        "category" : "",
        "tags"     : "",
        "url"      : "/tech/algo/",
        "date"     : "2022-09-25 16:35:07 +0300",
        "content"  : "\n\n    \n        \n            Array\n        \n    \n        \n            Backtrack\n        \n    \n        \n            Bitworks\n        \n    \n        \n            Dijkstra\n        \n    \n        \n            Dynamic\n        \n    \n        \n            Graph\n        \n    \n        \n            Greedy\n        \n    \n        \n            Linked Lists\n        \n    \n        \n            Search\n        \n    \n        \n            Sliding Window\n        \n    \n        \n            Sort\n        \n    \n        \n            Stack, Heap, Queue\n        \n    \n        \n            String\n        \n    \n        \n            Tree\n        \n    \n        \n            Tree Traversals\n        \n    \n        \n            Tree, Binary Search Tree\n        \n    \n\n"
        },
    
      {
        "title"    : "Books",
        "category" : "",
        "tags"     : "",
        "url"      : "/tech/books/",
        "date"     : "2022-09-25 16:35:07 +0300",
        "content"  : "General\n\nCode: The Hidden Language of Computer Hardware and Software\n\nHackers &amp; Painters: Big Ideas from the Computer Age\n\nAlgorithms to Live By: What Computers Can Teach Us About Solving Human Problems\n\nOS\n\nOperating Systems: Three Easy Pieces\n\nWriting a Simple Operating System from Scratch\n\nOperating Systems, From 0 to 1\n\nAlgorithms\n\nGrokking Algorithms An Illustrated Guide For Programmers and Other Curious People\n\nThe Algorithm Design Manual\n\nAlgorithms by Dasgupta\n\nAlgorithms by Sedgewick\n\nLanguages\n\nFluent Python: Clear, Concise, and Effective Programming\n\nML\n\nLinear Algebra and Its Applications\n\nAn Introduction to Statistical Learning: With Applications in R\n\nDeep Learning with Python\n\nData\n\nDesigning Data-Intensive Applications\n\nLearning Spark: Lightning-Fast Big Data Analysis\n\nSoftware business\n\nZero to One: Notes on Startups, or How to Build the Future\n\nThe Hard Things About Hard Things\n\nShape Up: Stop Running in Circles and Ship Work that Matters\n\nThe Mom Test: How to talk to customers &amp; learn if your business is a good idea when everyone is lying to you\n\nEngineering Discipline\n\nClean Code: A Handbook of Agile Software Craftsmanship\n\nThe Clean Coder: A Code of Conduct for Professional Programmers\n\nThe Pragmatic Programmer: From Journeyman to Master\n\nCode Complete\n\nSoftware Engineering at Google: Lessons Learned from Programming Over Time\n\nThe Mythical Man-Month: Essays on Software Engineering\n\nThinking in Systems: A Primer\n\n"
        },
    
      {
        "title"    : "Code Review",
        "category" : "",
        "tags"     : "",
        "url"      : "/tech/code-review/",
        "date"     : "2022-09-25 16:35:07 +0300",
        "content"  : "easily understandable?\n\nsensible?\n\nwell-designed?\n\nuser friendly?\n\nfunctional?\n\nsecure?\n\nperformant?\n\nhas tests?\n\neasy to maintain?\n\ndocumented?\n\nno unnecessary complexity?\n\nare commits clear, small, with good summaries and tags?\n\nconforms to style guides?\n\n\n\nKind and respectful\n\nGive credit where its due\n\nCompliment people for the good parts\n"
        },
    
      {
        "title"    : "Keyboard Shortcuts",
        "category" : "",
        "tags"     : "",
        "url"      : "/tech/keyboard-shortcuts/",
        "date"     : "2022-09-25 16:35:07 +0300",
        "content"  : "Mac\n\nClear line : cmd U\n\nFull screen: cmd shift F\n\nLinux\n\nWindows\n\nVSCode\n\nMultiple cursors : option + shift + click\n\n\n\nGo top : cmd ⬆️\n\nGo bottom : cmd ⬇️\n\n\n\nZoom in : cmd shift 0\n\nZoom out : cmd -\n\n\n\nSelect next occurrence : cmd D\n\nSelect all occurrences : cmd + shift + L\n\n\n\nFold all : Ctrl + K + 0\n\n\n\nUnfold all : Ctrl + K + J\n"
        },
    
      {
        "title"    : "Nature vs tech",
        "category" : "",
        "tags"     : "",
        "url"      : "/tech/natural-tech/",
        "date"     : "2022-09-25 16:35:07 +0300",
        "content"  : "Tech blends into the reality as it matures\n\nWe evolved to use our hands and eyes,\n\nnot to tap on glasses,\n\nor to spend our days dreaming in artificial virtual places,\n\ntech should bring us together and make our lives richer instead of making us comfortably numb\n\nhttp://worrydream.com/#!/ABriefRantOnTheFutureOfInteractionDesign\n\nhttps://www.sony.net/Products/Developer-Spatial-Reality-display/en/\n\nhttps://blog.google/technology/research/project-starline/\n\nhttps://ciechanow.ski/mechanical-watch/\n\n"
        },
    
      {
        "title"    : "TCP/IP Model vs OSI Model",
        "category" : "",
        "tags"     : "",
        "url"      : "/tech/network-layers/",
        "date"     : "2022-09-25 16:35:07 +0300",
        "content"  : "TCP/IP Model\n\nApplication\n\nNetwork\n\nTransport\n\nLink\n\n\n\neg.\n\nHTTP\n\nTCP\n\nIP\n\nEthernet\n\n\n\nOSI Model\n\nApp\n\nPresentation\n\nSession\n\n\n\nTransport\n\nNetwork\n\n\n\nData link\n\nPhysical\n\n\n\neg.\n\nhttp\n\njpeg\n\nsession\n\nTCP\n\nIP\n\nWifi\n\nWire\n\n"
        },
    
      {
        "title"    : "Dev Principles",
        "category" : "",
        "tags"     : "",
        "url"      : "/tech/principles/",
        "date"     : "2022-09-25 16:35:07 +0300",
        "content"  : "Keep it simple\n\nTest early and often\n\nGet end to end first\n\nGet feedback early and often\n\nDo one thing and do it well\n\nDo not overthink\n\nShip it, real artists ship\n"
        },
    
      {
        "title"    : "Some Personal Projects",
        "category" : "",
        "tags"     : "",
        "url"      : "/tech/projects/",
        "date"     : "2022-09-25 16:35:07 +0300",
        "content"  : "\n\n    \n        \n            A garbage collector in C from scratch\n        \n    \n        \n            A hash table in C from scratch\n        \n    \n        \n            A search engine with page rank, in 200 lines\n        \n    \n        \n            An interpreter in Python for a subset of PASCAL\n        \n    \n        \n            Logos, a very basic operating system kernel from scratch\n        \n    \n        \n            Predict movie genres using ML classifiers\n        \n    \n        \n            Principal Component Analysis\n        \n    \n        \n            Tiny blockchain in 100 lines\n        \n    \n\n"
        },
    
      {
        "title"    : "Software Security",
        "category" : "",
        "tags"     : "",
        "url"      : "/tech/software-security/",
        "date"     : "2022-09-25 16:35:07 +0300",
        "content"  : "Prevent problems before they happen\n\nWhat can go wrong?\n\nModel possible threats\n\nSimpler the system, smaller the attack surface\n\nValidate\n\nSanitize\n\nIsolate\n\nDon’t try to roll your own security solutions, it’s a community effort\n\n"
        },
    
      {
        "title"    : "SOLID",
        "category" : "",
        "tags"     : "",
        "url"      : "/tech/solid/",
        "date"     : "2022-09-25 16:35:07 +0300",
        "content"  : "Single responsibility\n\nDo one thing, and do it well\n\n\n\nOpen/closed\n\nClasses should be open for extension but closed for modification\n\n\n\nLiskov’s Substitution\n\nChildren should not violate the contracts of parents.\n\nIf you change a class with one of its children,\nthe program should still work correctly.\n\nInheritance should pass the ‘Is-A’ test.\n\n\n\nInterface Segregation\n\nMany specific interfaces are better than one general interface\n\n\n\nDependency Inversion\n\nProvide dependencies from outside because it makes testing easier, and modularity\n\n"
        },
    
      {
        "title"    : "Resources for new programmers",
        "category" : "",
        "tags"     : "",
        "url"      : "/tech/starter/",
        "date"     : "2022-09-25 16:35:07 +0300",
        "content"  : "Crash Course Computer Science\n\n\n\nWeb design in 4 minutes\n\n\n\nPython is beginner friendly. C is also good  codecademy python\n\n\n\na short and visual book for a tour of algorithms grokking algorithms\n\n\n\nCS50, Harvard University’s introduction to computer science and the art of programming\n\n\n\nLeetcode’s top-100 liked easy collection\n\n\n\nLearn the basics of git, clone, add, commit, push, pull request\n\n\n\nMeet the terminal, ls, cd, mv, top, mkdir, touch, cat, sort, grep, rm\n\n\n\ninteractive SQL lessons\n\nsql - How to implement one-to-one, one-to-many and many-to-many relationships while designing tables? - Stack Overflow\n\n\n\nTeach Yourself Computer Science\n\nTeach Yourself Programming in Ten Years\n\n\n\n\n"
        },
    
      {
        "title"    : "Web Security",
        "category" : "",
        "tags"     : "",
        "url"      : "/tech/websec/",
        "date"     : "2022-09-25 16:35:07 +0300",
        "content"  : "Auth\n\nUse 2-factor\n\nAdd exponential delay to repeated login attempts\n\nLock account after repeated failed login attempts\n\nUse authorization levels.\n\nLeast privilege, never grant more access than required.\n\nSeparation of privileges, so your system is not all or nothing\n\nUse allow-lists, not block-lists\n\nSQL\n\nParametrize queries to prevent SQL injection\n\nCookies\n\nThey are mainly used for managing sessions, tracking, and personalization\n\nPrepend with __Host- to restrict cookie on a specific domain (no subdomains)\n\nPrepend cookies with __Secure- to prevent them from being overwritten.\n\n__Host- prefix is stricter than __Secure\n\nExpires set an expiration\n\nSecure header make cookies HTTPS\n\nHTTPOnly header to prevent JavaScript access\n\nSameSite to prevent sending the cookie via cross-origin requests\n\n1\ndocument.cookie = \"_Host-username=Jane; Secure; HttpOnly; Path=/; SameSite=Strict\";\n\n\nCross-site request forgery CSRF\n\nCSRF is forgery of a valid request.\n\nIt is possible to forge a fake request if\n\n  the only mechanism to track user session is a cookie,\n  all request parameters predictable\n\n\nTo prevent it, we need at least one unpredictable parameter, a CSRF token.\n\nThis token is a large random value, unique per user &amp; per user session.\n\nMake sure your forms have CSRF tokens.\n\n\n\nCSRF tokens should not be sent within cookies.\n\nUse SameSite header to forbid sending the cookie via cross-origin requests\n\nmore on CSRF\n\nCross-origin Resource Sharing (CORS)\n\nan origin is a tuple of protocol:host:port\n\nAccess-Control-Allow-Origin: https://x.com:8081  only the specified origin can access\n\nAccess-Control-Allow-Origin: * every origin can access\n\nBy default, browser XMLHttpRequest or fetch APIs allows same-origin only\n\nUse Access-Control-Allow-Origin to manage CORS\n\nUse integrity to verify a resource is not modified on the way\n\nUse X-Frame-Options: DENY to disallow allow attempts to iframe site\n\nmore on CORS\n\nCross-site scripting XSS\n\nIt is injecting malicious code into a website so user’s browser executes it\n\nTo prevent, validate and encode. For example &lt;script&gt; would be encoded as &amp;lt;script&amp;gt;\n\nSet Content Security Policy header\n\nso the browser will run only allow the white-listed scripts and assets\n\nBy using CSP to disable inline JavaScript, you can effectively eliminate almost all XSS attacks against your site.\n\nDisabling inline JavaScript means that all JavaScript must be loaded from script src tags.\n\nan example CSP response header\n\n1\n2\n3\n4\n5\n6\n7\nContent-Security-Policy: \ndefault-src 'none'; \nobject-src 'none'; \nscript-src 'self'; \nstyle-src 'self';\nimg-src 'self' 'https://i.imgur.com';\nfont-src 'https://fonts.googleapis.com';\n\n\nMore\n\nPick a Vulnerability to Learn About\n\nBest practices for managing &amp; storing secrets like API keys and other credentials [2020]\n\nhttps://stackoverflow.com/questions/2794016/what-should-every-programmer-know-about-security\n\nhttps://stackoverflow.com/questions/tagged/security\n"
        },
    
        {}
        
  
]
